{"interfaceLanguages":{"swift":[{"children":[{"title":"Getting Started","type":"groupMarker"},{"path":"\/documentation\/lighter\/gettingstarted","title":"Getting Started","type":"article"},{"children":[{"title":"Important Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabase\/init(connectionhandler:)","title":"init(connectionHandler: SQLConnectionHandler)","type":"init"},{"path":"\/documentation\/lighter\/sqldatabase\/init(url:readonly:)","title":"init(url: URL, readOnly: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabase\/readtransaction(execute:)-5rhrj","title":"func readTransaction<R>(execute: (SQLTransaction<Self>) throws -> R) throws -> R","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/readtransaction(execute:)-8mbsj","title":"func readTransaction<R>(execute: (SQLTransaction<Self>) throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/transaction(mode:execute:)-2s7zu","title":"func transaction<R>(mode: SQLTransactionType, execute: (SQLChangeTransaction<Self>) throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/transaction(mode:execute:)-kgor","title":"func transaction<R>(mode: SQLTransactionType, execute: (SQLChangeTransaction<Self>) throws -> R) throws -> R","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(at:readonly:overwrite:)-320at","title":"static func bootstrap(at: URL, readOnly: Bool, overwrite: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(at:readonly:overwrite:)-8rwif","title":"static func bootstrap(at: URL, readOnly: Bool, overwrite: Bool) async throws -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(at:readonly:overwrite:copying:)-84xwu","title":"static func bootstrap(at: URL, readOnly: Bool, overwrite: Bool, copying: URL) async throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(at:readonly:overwrite:copying:)-37vi1","title":"static func bootstrap(at: URL, readOnly: Bool, overwrite: Bool, copying: URL) throws -> Self","type":"method"}],"title":"SQLDatabase Implementations","type":"groupMarker"}],"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(at:readonly:overwrite:copying:)-50u3x","title":"static func bootstrap(at: URL, readOnly: Bool, overwrite: Bool, copying: URL) throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(into:domains:filename:readonly:overwrite:)-3nbwf","title":"static func bootstrap(into: FileManager.SearchPathDirectory, domains: FileManager.SearchPathDomainMask, filename: String?, readOnly: Bool, overwrite: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(into:domains:filename:readonly:overwrite:)-592cc","title":"static func bootstrap(into: FileManager.SearchPathDirectory, domains: FileManager.SearchPathDomainMask, filename: String?, readOnly: Bool, overwrite: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(into:domains:readonly:overwrite:copying:)-1vwnt","title":"static func bootstrap(into: FileManager.SearchPathDirectory, domains: FileManager.SearchPathDomainMask, readOnly: Bool, overwrite: Bool, copying: URL) throws -> Self","type":"method"},{"path":"\/documentation\/lighter\/sqldatabase\/bootstrap(into:domains:readonly:overwrite:copying:)-953r3","title":"static func bootstrap(into: FileManager.SearchPathDirectory, domains: FileManager.SearchPathDomainMask, readOnly: Bool, overwrite: Bool, copying: URL) async throws -> Self","type":"method"}],"path":"\/documentation\/lighter\/sqldatabase","title":"SQLDatabase","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltablerecord\/calculatechanges(using:)","title":"func calculateChanges(using: (inout SQLRecordDiffingState<Self>) -> Void) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/lighter\/sqltablerecord","title":"SQLTableRecord","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlpredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlpredicate\/&&(_:_:)-1jmxm","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlpredicate\/&&(_:_:)-4ojox","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlpredicate\/__(_:_:)-6y88h","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlpredicate\/__(_:_:)-9lzku","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"}],"path":"\/documentation\/lighter\/sqlpredicate","title":"SQLPredicate","type":"protocol"}],"path":"\/documentation\/lighter\/lighterapi","title":"Lighter API Overview","type":"symbol"},{"path":"\/documentation\/lighter\/northwind","title":"Northwind","type":"article"},{"title":"Advanced","type":"groupMarker"},{"path":"\/documentation\/lighter\/configuration","title":"Configuration","type":"article"},{"path":"\/documentation\/lighter\/linux","title":"Linux","type":"article"},{"path":"\/documentation\/lighter\/manual","title":"Manual Generation","type":"article"},{"path":"\/documentation\/lighter\/sqliteapi","title":"Dependency-Free API","type":"article"},{"children":[{"title":"Types","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlitevaluetype\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlitevaluetype\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlitevaluetype\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlitevaluetype\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlitevaluetype\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/sqlitevaluetype","title":"SQLiteValueType","type":"protocol"}],"path":"\/documentation\/lighter\/mapping","title":"Mapping","type":"symbol"},{"path":"\/documentation\/lighter\/migrations","title":"Migrations","type":"article"},{"path":"\/documentation\/lighter\/performance","title":"Performance","type":"article"},{"title":"Support","type":"groupMarker"},{"path":"\/documentation\/lighter\/who","title":"Support","type":"article"},{"path":"\/documentation\/lighter\/faq","title":"Frequently Asked Questions","type":"article"},{"path":"\/documentation\/lighter\/troubleshooting","title":"Troubleshooting","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/delete(_:)-5shiz","title":"func delete<T>(T) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/delete(_:)-7ucn2","title":"func delete<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/delete(from:id:)","title":"func delete<T>(from: KeyPath<Self.RecordTypes, T.Type>, id: T.Schema.PrimaryKeyColumn.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/delete(from:where:)","title":"func delete<T, P>(from: KeyPath<Self.RecordTypes, T.Type>, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/delete(from:where:is:)","title":"func delete<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, where: KeyPath<T.Schema, C>, is: C.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(_:)-9nq9d","title":"func insert<T>(T) throws -> T","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(_:)-9ow6z","title":"func insert<S>(S) throws -> [S.Element]","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:_:_:_:_:_:values:_:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5, C6>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value, C6.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:_:_:_:_:values:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:_:_:_:values:_:_:_:)","title":"func insert<T, C1, C2, C3, C4>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, values: C1.Value, C2.Value, C3.Value, C4.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:_:_:values:_:_:)","title":"func insert<T, C1, C2, C3>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, values: C1.Value, C2.Value, C3.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:_:values:_:)","title":"func insert<T, C1, C2>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, values: C1.Value, C2.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/insert(into:_:values:)","title":"func insert<T, C>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, values: C.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:)-252ir","title":"func update<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:)-6iv4d","title":"func update<T>(T) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, C6, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, C6, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:where:)","title":"func update<T, C1, C2, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:set:to:where:is:)","title":"func update<T, C1, C2, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:where:)","title":"func update<T, C, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqlchangetransaction\/update(_:set:to:where:is:)","title":"func update<T, C, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"}],"path":"\/documentation\/lighter\/sqlchangetransaction\/sqldatabasechangeoperations-implementations","title":"SQLDatabaseChangeOperations Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlchangetransaction","title":"SQLChangeTransaction","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/init(url:readonly:maxage:maximumpoolsizeperconfiguration:writetimeout:)","title":"init(url: URL, readOnly: Bool, maxAge: TimeInterval, maximumPoolSizePerConfiguration: Int, writeTimeout: TimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/maxage","title":"let maxAge: TimeInterval","type":"property"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/maxperconfiguration","title":"let maxPerConfiguration: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/closepooledconnections()","title":"func closePooledConnections()","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/openconnection(_:)","title":"func openConnection(SQLConnectionHandler.Configuration) throws -> OpaquePointer","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool\/releaseconnection(_:with:aftererror:)","title":"func releaseConnection(OpaquePointer?, with: SQLConnectionHandler.Configuration, afterError: Error?)","type":"method"}],"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool","title":"SQLConnectionHandler.SimplePool","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/init(url:handle:closeondeinit:)","title":"init(url: URL, handle: OpaquePointer?, closeOnDeinit: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/closeondeinit","title":"let closeOnDeinit: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/handle","title":"var handle: OpaquePointer?","type":"property"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/openconfiguration","title":"var openConfiguration: SQLConnectionHandler.Configuration?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/close()","title":"func close()","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/openconnection(_:)","title":"func openConnection(SQLConnectionHandler.Configuration) throws -> OpaquePointer","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse\/releaseconnection(_:with:aftererror:)","title":"func releaseConnection(OpaquePointer?, with: SQLConnectionHandler.Configuration, afterError: Error?)","type":"method"}],"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse","title":"SQLConnectionHandler.UnsafeReuse","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/configuration\/init(readonly:)","title":"init(readOnly: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/configuration\/readonly","title":"let readOnly: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/configuration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlconnectionhandler\/configuration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlconnectionhandler\/configuration","title":"SQLConnectionHandler.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/init(url:readonly:writetimeout:)","title":"init(url: URL, readOnly: Bool, writeTimeout: TimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/readonly","title":"let readOnly: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/url","title":"let url: URL","type":"property"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/writetimeout","title":"let writeTimeout: TimeInterval","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/openconnection(_:)","title":"func openConnection(SQLConnectionHandler.Configuration) throws -> OpaquePointer","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/releaseconnection(_:with:aftererror:)","title":"func releaseConnection(OpaquePointer?, with: SQLConnectionHandler.Configuration, afterError: Error?)","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/withconnection(readonly:execute:)","title":"func withConnection<R>(readOnly: Bool, execute: (OpaquePointer) throws -> R) throws -> R","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/reopen(url:readonly:writetimeout:)","title":"static func reopen(url: URL, readOnly: Bool, writeTimeout: TimeInterval) -> SQLConnectionHandler","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/simplepool(url:readonly:maxage:maximumpoolsizeperconfiguration:writetimeout:)","title":"static func simplePool(url: URL, readOnly: Bool, maxAge: TimeInterval, maximumPoolSizePerConfiguration: Int, writeTimeout: TimeInterval) -> SQLConnectionHandler.SimplePool","type":"method"},{"path":"\/documentation\/lighter\/sqlconnectionhandler\/unsafereuse(_:url:closeondeinit:)","title":"static func unsafeReuse(OpaquePointer?, url: URL, closeOnDeinit: Bool) -> SQLConnectionHandler.UnsafeReuse","type":"method"}],"path":"\/documentation\/lighter\/sqlconnectionhandler","title":"SQLConnectionHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/init(_:handle:)","title":"init(DB, handle: OpaquePointer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/connectionhandler","title":"let connectionHandler: SQLConnectionHandler","type":"property"},{"path":"\/documentation\/lighter\/sqltransaction\/database","title":"let database: DB","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/recordtypes","title":"static var recordTypes: DB.RecordTypes","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:)","title":"func select<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:)","title":"func select<T, C1, C2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:)","title":"func select<T, C1, C2, C3>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:_:where:)","title":"func select<T, C1, C2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:orderby:_:_:)","title":"func select<T, C1, C2, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:_:where:)","title":"func select<T, C, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:orderby:_:_:)","title":"func select<T, C, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:orderby:_:_:_:_:)","title":"func select<T, C, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:orderby:_:_:_:_:where:)","title":"func select<T, C, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/select(from:_:orderby:_:_:where:)","title":"func select<T, C, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/subscript(dynamicmember:)","title":"subscript<T>(dynamicMember _: KeyPath<Self.RecordTypes, T.Type>) -> SQLRecordFetchOperations<Self, T>","type":"subscript"}],"path":"\/documentation\/lighter\/sqltransaction\/sqldatabasefetchoperations-implementations","title":"SQLDatabaseFetchOperations Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransaction\/execute(_:_:readonly:)","title":"func execute(String, [SQLiteValueType]?, readOnly: Bool) throws","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/fetch(_:_:readonly:yield:)","title":"func fetch(String, [SQLiteValueType]?, readOnly: Bool, yield: (OpaquePointer, inout Bool) throws -> Void) throws","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/get(schema:pragma:as:)","title":"func get<V>(schema: String?, pragma: String, as: V.Type) throws -> V","type":"method"},{"path":"\/documentation\/lighter\/sqltransaction\/set(schema:pragma:to:)","title":"func set(schema: String?, pragma: String, to: SQLiteValueType) throws","type":"method"}],"path":"\/documentation\/lighter\/sqltransaction\/sqldatabaseoperations-implementations","title":"SQLDatabaseOperations Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqltransaction","title":"SQLTransaction","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumn\/!=(_:_:)-1pa5h","title":"static func != <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/!=(_:_:)-39le7","title":"static func != (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/==(_:_:)-10ah5","title":"static func == <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/==(_:_:)-7ut2b","title":"static func == (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_(_:_:)-2uxfx","title":"static func > <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_(_:_:)-345jg","title":"static func < (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_(_:_:)-8fazo","title":"static func < <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_(_:_:)-gid0","title":"static func > (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_=(_:_:)-3lvqy","title":"static func <= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_=(_:_:)-5d09o","title":"static func >= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_=(_:_:)-7ok9s","title":"static func >= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumn\/_=(_:_:)-9fh1p","title":"static func <= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumn\/t","title":"T","type":"associatedtype"},{"path":"\/documentation\/lighter\/sqlcolumn\/value","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumn\/defaultvalue","title":"var defaultValue: Self.Value","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumn\/externalname","title":"var externalName: String","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumn\/keypath","title":"var keyPath: KeyPath<Self.T, Self.Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumn\/contains(_:caseinsensitive:)","title":"func contains(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/glob(_:caseinsensitive:)","title":"func glob(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/hasprefix(_:caseinsensitive:)","title":"func hasPrefix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/hassuffix(_:caseinsensitive:)","title":"func hasSuffix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/in(_:)-4ds12","title":"func `in`<S>(S) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/in(_:)-6rq6g","title":"func `in`(ClosedRange<Self.Value>) -> SQLColumnValueRangePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/in(_:)-9gaxa","title":"func `in`(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/in(_:)-x9sy","title":"func `in`(Self.Value...) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/like(_:caseinsensitive:)","title":"func like(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/notin(_:)-5c4u0","title":"func notIn(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/notin(_:)-61vio","title":"func notIn<S>(S) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumn\/notin(_:)-8j1zg","title":"func notIn(Self.Value...) -> SQLColumnValueSetPredicate<Self>","type":"method"}],"path":"\/documentation\/lighter\/sqlcolumn","title":"SQLColumn","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluechange\/c","title":"C","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluechange\/column","title":"var column: Self.C","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluechange\/newvalue","title":"var newValue: Self.C.Value","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluechange\/oldvalue","title":"var oldValue: Self.C.Value","type":"property"}],"path":"\/documentation\/lighter\/sqlcolumnvaluechange","title":"SQLColumnValueChange","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcreatableschema\/create","title":"static var create: String","type":"property"}],"path":"\/documentation\/lighter\/sqlcreatableschema","title":"SQLCreatableSchema","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcreationstatementsholder\/creationsql","title":"static var creationSQL: String","type":"property"}],"path":"\/documentation\/lighter\/sqlcreationstatementsholder","title":"SQLCreationStatementsHolder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/delete(_:)-431p3","title":"func delete<T>(T) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/delete(_:)-6zmbs","title":"func delete<S>(S) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/delete(from:id:)","title":"func delete<T>(from: KeyPath<Self.RecordTypes, T.Type>, id: T.Schema.PrimaryKeyColumn.Value) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/delete(from:where:)","title":"func delete<T, P>(from: KeyPath<Self.RecordTypes, T.Type>, where: (T.Schema) -> P) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/delete(from:where:is:)","title":"func delete<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, where: KeyPath<T.Schema, C>, is: C.Value) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/insert(_:)-1s91l","title":"func insert<S>(S) async throws -> [S.Element]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/insert(_:)-6yaw7","title":"func insert<T>(T) async throws -> T","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/update(_:)-75s2b","title":"func update<T>(T) async throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations\/update(_:)-r8ao","title":"func update<S>(S) async throws","type":"method"}],"path":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations","title":"SQLDatabaseAsyncChangeOperations","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:)","title":"func select<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:)","title":"func select<T, C1, C2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:)","title":"func select<T, C1, C2, C3>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:_:where:)","title":"func select<T, C1, C2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:orderby:_:_:)","title":"func select<T, C1, C2, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:_:where:)","title":"func select<T, C, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:orderby:_:_:)","title":"func select<T, C, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:orderby:_:_:_:_:)","title":"func select<T, C, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:orderby:_:_:_:_:where:)","title":"func select<T, C, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations\/select(from:_:orderby:_:_:where:)","title":"func select<T, C, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) async throws -> [C.Value]","type":"method"}],"path":"\/documentation\/lighter\/sqldatabaseasyncfetchoperations","title":"SQLDatabaseAsyncFetchOperations","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/lighter\/sqldatabaseasyncoperations\/asyncdatabasequeue-5emzh","title":"var asyncDatabaseQueue: DispatchQueue","type":"property"}],"title":"SQLDatabaseAsyncOperations Implementations","type":"groupMarker"}],"path":"\/documentation\/lighter\/sqldatabaseasyncoperations\/asyncdatabasequeue-89vi8","title":"var asyncDatabaseQueue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseasyncoperations\/get(schema:pragma:as:)","title":"func get<V>(schema: String?, pragma: String, as: V.Type) async throws -> V","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncoperations\/runondatabasequeue(block:)","title":"func runOnDatabaseQueue<R>(block: () throws -> R) async throws -> R","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseasyncoperations\/set(schema:pragma:to:)","title":"func set(schema: String?, pragma: String, to: SQLiteValueType) async throws","type":"method"}],"path":"\/documentation\/lighter\/sqldatabaseasyncoperations","title":"SQLDatabaseAsyncOperations","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(_:)-39qct","title":"func delete<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(_:)-7bmb5","title":"func delete<T>(T) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(_:)-8v6of","title":"func delete<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(from:id:)","title":"func delete<T>(from: KeyPath<Self.RecordTypes, T.Type>, id: T.Schema.PrimaryKeyColumn.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(from:where:)","title":"func delete<T, P>(from: KeyPath<Self.RecordTypes, T.Type>, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/delete(from:where:is:)","title":"func delete<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, where: KeyPath<T.Schema, C>, is: C.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(_:)-5wzqe","title":"func insert<S>(S) throws -> [S.Element]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(_:)-70t6","title":"func insert<S>(S) throws -> [S.Element]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(_:)-8pfoz","title":"func insert<T>(T) throws -> T","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:_:_:_:_:_:values:_:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5, C6>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value, C6.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:_:_:_:_:values:_:_:_:_:)","title":"func insert<T, C1, C2, C3, C4, C5>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, values: C1.Value, C2.Value, C3.Value, C4.Value, C5.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:_:_:_:values:_:_:_:)","title":"func insert<T, C1, C2, C3, C4>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, values: C1.Value, C2.Value, C3.Value, C4.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:_:_:values:_:_:)","title":"func insert<T, C1, C2, C3>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, values: C1.Value, C2.Value, C3.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:_:values:_:)","title":"func insert<T, C1, C2>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, values: C1.Value, C2.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/insert(into:_:values:)","title":"func insert<T, C>(into: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, values: C.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:)-1odj4","title":"func update<T>(T) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:)-511ks","title":"func update<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:)-7wb45","title":"func update<S>(S) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, C6, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, C6, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, set: KeyPath<T.Schema, C6>, to: C6.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, C5, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, C5, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, set: KeyPath<T.Schema, C5>, to: C5.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, C4, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, C4, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, set: KeyPath<T.Schema, C4>, to: C4.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:where:)","title":"func update<T, C1, C2, C3, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:set:to:where:is:)","title":"func update<T, C1, C2, C3, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, set: KeyPath<T.Schema, C3>, to: C3.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:where:)","title":"func update<T, C1, C2, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:set:to:where:is:)","title":"func update<T, C1, C2, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C1>, to: C1.Value, set: KeyPath<T.Schema, C2>, to: C2.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:where:)","title":"func update<T, C, P>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: (T.Schema) -> P) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasechangeoperations\/update(_:set:to:where:is:)","title":"func update<T, C, PK>(KeyPath<Self.RecordTypes, T.Type>, set: KeyPath<T.Schema, C>, to: C.Value, where: KeyPath<T.Schema, PK>, is: PK.Value) throws","type":"method"}],"path":"\/documentation\/lighter\/sqldatabasechangeoperations","title":"SQLDatabaseChangeOperations","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:)","title":"func select<T, C>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:)","title":"func select<T, C1, C2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:)","title":"func select<T, C1, C2, C3>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, C6, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, KeyPath<T.Schema, C6>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value, column6: C6.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, C5, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, KeyPath<T.Schema, C5>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value, column5: C5.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, C4, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, C4, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, KeyPath<T.Schema, C4>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value, column4: C4.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:orderby:_:_:)","title":"func select<T, C1, C2, C3, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, C3, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, C3, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, C3, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, KeyPath<T.Schema, C3>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value, column3: C3.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:_:where:)","title":"func select<T, C1, C2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:orderby:_:_:)","title":"func select<T, C1, C2, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:orderby:_:_:_:_:)","title":"func select<T, C1, C2, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:orderby:_:_:_:_:where:)","title":"func select<T, C1, C2, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:orderby:_:_:where:)","title":"func select<T, C1, C2, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C1>, KeyPath<T.Schema, C2>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [(column1: C1.Value, column2: C2.Value)]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:where:)","title":"func select<T, C, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:orderby:_:_:)","title":"func select<T, C, CS>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:orderby:_:_:_:_:)","title":"func select<T, C, CS1, CS2>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:orderby:_:_:_:_:where:)","title":"func select<T, C, CS1, CS2, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS1>, SQLSortOrder, KeyPath<T.Schema, CS2>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:orderby:_:_:where:)","title":"func select<T, C, CS, P>(from: KeyPath<Self.RecordTypes, T.Type>, KeyPath<T.Schema, C>, orderBy: KeyPath<T.Schema, CS>, SQLSortOrder, Int?, where: (T.Schema) -> P) throws -> [C.Value]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabasefetchoperations\/subscript(dynamicmember:)","title":"subscript<T>(dynamicMember _: KeyPath<Self.RecordTypes, T.Type>) -> SQLRecordFetchOperations<Self, T>","type":"subscript"}],"path":"\/documentation\/lighter\/sqldatabasefetchoperations","title":"SQLDatabaseFetchOperations","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/recordtypes-swift.associatedtype","title":"RecordTypes","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/connectionhandler","title":"var connectionHandler: SQLConnectionHandler","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/execute(_:_:readonly:)","title":"func execute(String, [SQLiteValueType]?, readOnly: Bool) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/fetch(_:_:readonly:yield:)","title":"func fetch(String, [SQLiteValueType]?, readOnly: Bool, yield: (OpaquePointer, inout Bool) throws -> Void) throws","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/get(schema:pragma:as:)","title":"func get<V>(schema: String?, pragma: String, as: V.Type) throws -> V","type":"method"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/set(schema:pragma:to:)","title":"func set(schema: String?, pragma: String, to: SQLiteValueType) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldatabaseoperations\/recordtypes-swift.type.property","title":"static var recordTypes: Self.RecordTypes","type":"property"}],"path":"\/documentation\/lighter\/sqldatabaseoperations","title":"SQLDatabaseOperations","type":"protocol"},{"path":"\/documentation\/lighter\/sqldeletablerecord","title":"SQLDeletableRecord","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqldeletableschema\/delete","title":"static var delete: String","type":"property"},{"path":"\/documentation\/lighter\/sqldeletableschema\/deleteparameterindices","title":"static var deleteParameterIndices: Self.PropertyIndices","type":"property"}],"path":"\/documentation\/lighter\/sqldeletableschema","title":"SQLDeletableSchema","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlentityschema\/propertyindices","title":"PropertyIndices","type":"associatedtype"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlentityschema\/externalname","title":"static var externalName: String","type":"property"},{"path":"\/documentation\/lighter\/sqlentityschema\/select","title":"static var select: String","type":"property"},{"path":"\/documentation\/lighter\/sqlentityschema\/selectcolumnindices","title":"static var selectColumnIndices: Self.PropertyIndices","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlentityschema\/lookupcolumnindices(in:)","title":"static func lookupColumnIndices(in: OpaquePointer!) -> Self.PropertyIndices","type":"method"}],"path":"\/documentation\/lighter\/sqlentityschema","title":"SQLEntitySchema","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlforeignkeycolumn\/destinationcolumn-swift.associatedtype","title":"DestinationColumn","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlforeignkeycolumn\/destinationcolumn-swift.property","title":"var destinationColumn: Self.DestinationColumn","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlforeignkeycolumn\/destination","title":"SQLForeignKeyColumn.Destination","type":"typealias"}],"path":"\/documentation\/lighter\/sqlforeignkeycolumn","title":"SQLForeignKeyColumn","type":"protocol"},{"path":"\/documentation\/lighter\/sqlinsertablerecord","title":"SQLInsertableRecord","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinsertableschema\/insert","title":"static var insert: String","type":"property"},{"path":"\/documentation\/lighter\/sqlinsertableschema\/insertparameterindices","title":"static var insertParameterIndices: Self.PropertyIndices","type":"property"},{"path":"\/documentation\/lighter\/sqlinsertableschema\/insertreturning","title":"static var insertReturning: String","type":"property"}],"path":"\/documentation\/lighter\/sqlinsertableschema","title":"SQLInsertableSchema","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlkeyedtablerecord\/id","title":"var id: Self.ID","type":"property"}],"path":"\/documentation\/lighter\/sqlkeyedtablerecord","title":"SQLKeyedTableRecord","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/==(_:_:)","title":"static func == (Self, Self.PrimaryKeyColumn.Value?) -> SQLColumnValuePredicate<Self.PrimaryKeyColumn>","type":"op"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/primarykeycolumn-swift.associatedtype","title":"PrimaryKeyColumn","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/in(_:)-3qy5a","title":"func `in`(ClosedRange<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueRangePredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/in(_:)-6sp7l","title":"func `in`(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/in(_:)-8vyyo","title":"func `in`(Self.PrimaryKeyColumn.Value...) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/notin(_:)-41sx1","title":"func notIn(Self.PrimaryKeyColumn.Value...) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/notin(_:)-7k3l5","title":"func notIn(Set<Self.PrimaryKeyColumn.Value>) -> SQLColumnValueSetPredicate<Self.PrimaryKeyColumn>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlkeyedtableschema\/primarykeycolumn-swift.type.property","title":"static var primaryKeyColumn: Self.PrimaryKeyColumn","type":"property"}],"path":"\/documentation\/lighter\/sqlkeyedtableschema","title":"SQLKeyedTableSchema","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecord\/schema-swift.associatedtype","title":"Schema","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecord\/init(_:indices:)","title":"init(OpaquePointer!, indices: Self.Schema.PropertyIndices?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecord\/bind(to:indices:then:)","title":"func bind<R>(to: OpaquePointer!, indices: Self.Schema.PropertyIndices, then: () throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecord\/schema-swift.type.property","title":"static var schema: Self.Schema","type":"property"}],"path":"\/documentation\/lighter\/sqlrecord","title":"SQLRecord","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlswiftmatchableschema\/matchselect","title":"static var matchSelect: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlswiftmatchableschema\/registerswiftmatcher(in:flags:matcher:)","title":"static func registerSwiftMatcher(in: OpaquePointer!, flags: Int32, matcher: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/lighter\/sqlswiftmatchableschema\/unregisterswiftmatcher(in:flags:)","title":"static func unregisterSwiftMatcher(in: OpaquePointer!, flags: Int32) -> Int32","type":"method"}],"path":"\/documentation\/lighter\/sqlswiftmatchableschema","title":"SQLSwiftMatchableSchema","type":"protocol"},{"path":"\/documentation\/lighter\/sqltableschema","title":"SQLTableSchema","type":"protocol"},{"path":"\/documentation\/lighter\/sqlupdatablerecord","title":"SQLUpdatableRecord","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlupdatableschema\/update","title":"static var update: String","type":"property"},{"path":"\/documentation\/lighter\/sqlupdatableschema\/updateparameterindices","title":"static var updateParameterIndices: Self.PropertyIndices","type":"property"}],"path":"\/documentation\/lighter\/sqlupdatableschema","title":"SQLUpdatableSchema","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlvaluechanges\/anychanges(from:)","title":"func anyChanges(from: Self) -> [String : Any]","type":"method"},{"path":"\/documentation\/lighter\/sqlvaluechanges\/changes(from:)","title":"func changes(from: Self) -> [SQLColumnValueChange]","type":"method"}],"path":"\/documentation\/lighter\/sqlvaluechanges","title":"SQLValueChanges","type":"protocol"},{"path":"\/documentation\/lighter\/sqlviewrecord","title":"SQLViewRecord","type":"protocol"},{"path":"\/documentation\/lighter\/sqlviewschema","title":"SQLViewSchema","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/lightererror\/init(_:_:_:)","title":"init(LighterError.ErrorType, Int32, UnsafePointer<CChar>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/lightererror\/code","title":"let code: Int32","type":"property"},{"path":"\/documentation\/lighter\/lightererror\/message","title":"let message: String?","type":"property"},{"path":"\/documentation\/lighter\/lightererror\/type","title":"let type: LighterError.ErrorType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/couldnotbegintransaction","title":"case couldNotBeginTransaction","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/couldnotcommittransaction","title":"case couldNotCommitTransaction","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/couldnotfindrelationshiptarget","title":"case couldNotFindRelationshipTarget","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/couldnotopendatabase(_:)","title":"case couldNotOpenDatabase(URL)","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/couldnotrollbacktransaction","title":"case couldNotRollbackTransaction","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/deletefailed(record:)","title":"case deleteFailed(record: AnyHashable)","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/insertfailed(record:)","title":"case insertFailed(record: AnyHashable)","type":"case"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/updatefailed(record:)","title":"case updateFailed(record: AnyHashable)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/lightererror\/errortype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/lightererror\/errortype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/lightererror\/errortype","title":"LighterError.ErrorType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/lightererror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/lightererror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/lightererror","title":"LighterError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumn\/init(externalname:defaultvalue:keypath:)","title":"init(externalName: String, defaultValue: Value, keyPath: KeyPath<T, Value>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumn\/defaultvalue","title":"let defaultValue: Value","type":"property"},{"path":"\/documentation\/lighter\/mappedcolumn\/externalname","title":"let externalName: String","type":"property"},{"path":"\/documentation\/lighter\/mappedcolumn\/keypath","title":"let keyPath: KeyPath<T, Value>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumn\/!=(_:_:)-9lmof","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/mappedcolumn\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumn\/!=(_:_:)-5c0kk","title":"static func != (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/!=(_:_:)-8lt4","title":"static func != <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/==(_:_:)-20sl1","title":"static func == <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/==(_:_:)-2hzha","title":"static func == (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_(_:_:)-1n0ly","title":"static func < <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_(_:_:)-38v4r","title":"static func > (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_(_:_:)-3d8k9","title":"static func < (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_(_:_:)-5jdoi","title":"static func > <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_=(_:_:)-2vufi","title":"static func >= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_=(_:_:)-3frf7","title":"static func <= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_=(_:_:)-5l4w5","title":"static func <= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedcolumn\/_=(_:_:)-6a8ob","title":"static func >= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumn\/contains(_:caseinsensitive:)","title":"func contains(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/glob(_:caseinsensitive:)","title":"func glob(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/hasprefix(_:caseinsensitive:)","title":"func hasPrefix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/hassuffix(_:caseinsensitive:)","title":"func hasSuffix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/in(_:)","title":"func `in`(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/like(_:caseinsensitive:)","title":"func like(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedcolumn\/notin(_:)","title":"func notIn(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"}],"path":"\/documentation\/lighter\/mappedcolumn\/sqlcolumn-implementations","title":"SQLColumn Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/mappedcolumn","title":"MappedColumn","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedcolumnvaluechange\/column","title":"let column: C","type":"property"},{"path":"\/documentation\/lighter\/mappedcolumnvaluechange\/newvalue","title":"let newValue: C.Value","type":"property"},{"path":"\/documentation\/lighter\/mappedcolumnvaluechange\/oldvalue","title":"let oldValue: C.Value","type":"property"}],"path":"\/documentation\/lighter\/mappedcolumnvaluechange","title":"MappedColumnValueChange","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/==(_:_:)-1e7o4","title":"static func == (MappedForeignKey<T, Value, DestinationColumn>, MappedForeignKey<T, Value, DestinationColumn>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/init(externalname:defaultvalue:keypath:destinationcolumn:)","title":"init(externalName: String, defaultValue: Value, keyPath: KeyPath<T, Value>, destinationColumn: () -> DestinationColumn)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/defaultvalue","title":"let defaultValue: Value","type":"property"},{"path":"\/documentation\/lighter\/mappedforeignkey\/destinationcolumn","title":"var destinationColumn: DestinationColumn","type":"property"},{"path":"\/documentation\/lighter\/mappedforeignkey\/externalname","title":"let externalName: String","type":"property"},{"path":"\/documentation\/lighter\/mappedforeignkey\/keypath","title":"let keyPath: KeyPath<T, Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/!=(_:_:)-33la9","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/mappedforeignkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/!=(_:_:)-1f3aa","title":"static func != <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/!=(_:_:)-907a0","title":"static func != (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/==(_:_:)-3370a","title":"static func == (Self, Self.Value?) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/==(_:_:)-5i52q","title":"static func == <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_(_:_:)-1a8w6","title":"static func > <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_(_:_:)-3545a","title":"static func < (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_(_:_:)-524ys","title":"static func > (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_(_:_:)-6dosd","title":"static func < <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_=(_:_:)-1psmd","title":"static func >= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_=(_:_:)-8bg9y","title":"static func >= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_=(_:_:)-8e09f","title":"static func <= <O>(Self, O) -> SQLColumnComparisonPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/mappedforeignkey\/_=(_:_:)-8jwnf","title":"static func <= (Self, Self.Value) -> SQLColumnValuePredicate<Self>","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/mappedforeignkey\/contains(_:caseinsensitive:)","title":"func contains(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/glob(_:caseinsensitive:)","title":"func glob(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/hasprefix(_:caseinsensitive:)","title":"func hasPrefix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/hassuffix(_:caseinsensitive:)","title":"func hasSuffix(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/in(_:)","title":"func `in`(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/like(_:caseinsensitive:)","title":"func like(Self.Value, caseInsensitive: Bool) -> SQLColumnValuePredicate<Self>","type":"method"},{"path":"\/documentation\/lighter\/mappedforeignkey\/notin(_:)","title":"func notIn(Set<Self.Value>) -> SQLColumnValueSetPredicate<Self>","type":"method"}],"path":"\/documentation\/lighter\/mappedforeignkey\/sqlcolumn-implementations","title":"SQLColumn Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/mappedforeignkey","title":"MappedForeignKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlbuilder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlbuilder\/addcolumn(_:)-5ea7z","title":"func addColumn<C>(C)","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/addcolumn(_:)-ezhy","title":"func addColumn<C>(KeyPath<C.T.Schema, C>)","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/escapeandquoteidentifier(_:)","title":"func escapeAndQuoteIdentifier(String) -> String","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/sqlstring(for:)-15wh1","title":"func sqlString<C>(for: C) -> String","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/sqlstring(for:)-1tczk","title":"func sqlString<C>(for: C) -> String","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/sqlstring(for:)-5fk7","title":"func sqlString<C>(for: KeyPath<C.T.Schema, C>) -> String","type":"method"},{"path":"\/documentation\/lighter\/sqlbuilder\/sqlstring(for:)-epas","title":"func sqlString<C>(for: KeyPath<C.T.Schema, C>) -> String","type":"method"}],"path":"\/documentation\/lighter\/sqlbuilder","title":"SQLBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/init(_:_:_:)","title":"init(L, SQLColumnComparisonPredicate<L, R>.ComparisonOperator, R)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparator","title":"let comparator: SQLColumnComparisonPredicate<L, R>.ComparisonOperator","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/lhs","title":"let lhs: L","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/rhs","title":"let rhs: R","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/equal","title":"case equal","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/greaterthan","title":"case greaterThan","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/greaterthanorequal","title":"case greaterThanOrEqual","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/lessthan","title":"case lessThan","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/lessthanorequal","title":"case lessThanOrEqual","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/notequal","title":"case notEqual","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/comparisonoperator","title":"SQLColumnComparisonPredicate.ComparisonOperator","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/&&(_:_:)-39t53","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/&&(_:_:)-suwg","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/__(_:_:)-1j86c","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/__(_:_:)-8qtyi","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumncomparisonpredicate","title":"SQLColumnComparisonPredicate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/init(_:_:_:caseinsensitive:)","title":"init(C, SQLColumnValuePredicate<C>.ComparisonOperator, C.Value?, caseInsensitive: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/caseinsensitive","title":"let caseInsensitive: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/column","title":"let column: C","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparator","title":"let comparator: SQLColumnValuePredicate<C>.ComparisonOperator","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/value","title":"let value: C.Value?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/generatelike(for:with:prefix:suffix:into:)","title":"func generateLike<Base>(for: String, with: SQLiteValueType, prefix: String, suffix: String, into: inout SQLBuilder<Base>)","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/contains","title":"case contains","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/equal","title":"case equal","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/glob","title":"case glob","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/greaterthan","title":"case greaterThan","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/greaterthanorequal","title":"case greaterThanOrEqual","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hasprefix","title":"case hasPrefix","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hassuffix","title":"case hasSuffix","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/lessthan","title":"case lessThan","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/lessthanorequal","title":"case lessThanOrEqual","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/like","title":"case like","type":"case"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/notequal","title":"case notEqual","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/iscasesensitivebydefault","title":"var isCaseSensitiveByDefault: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/comparisonoperator","title":"SQLColumnValuePredicate.ComparisonOperator","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/&&(_:_:)-6dona","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/&&(_:_:)-8mm11","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/__(_:_:)-3q2te","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/__(_:_:)-9bdae","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumnvaluepredicate","title":"SQLColumnValuePredicate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/init(_:_:)-29rlp","title":"init(C, Range<C.Value>)","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/init(_:_:)-5kc2e","title":"init(C, ClosedRange<C.Value>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/column","title":"let column: C","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/values","title":"let values: ClosedRange<C.Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/&&(_:_:)-52kuo","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/&&(_:_:)-6m2xa","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/__(_:_:)-1jeh2","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/__(_:_:)-52ldb","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumnvaluerangepredicate","title":"SQLColumnValueRangePredicate","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/!(_:)-2mckn","title":"static func ! (SQLColumnValueSetPredicate<C>) -> SQLColumnValueSetPredicate<C>","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/init(_:_:negate:)-4tgip","title":"init(C, Set<C.Value>, negate: Bool)","type":"init"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/init(_:_:negate:)-58s9k","title":"init<S>(C, S, negate: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/column","title":"let column: C","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/negate","title":"let negate: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/values","title":"let values: Set<C.Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/!(_:)-6v2ci","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/&&(_:_:)-3rjz8","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/&&(_:_:)-88trb","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/__(_:_:)-7kqy1","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/__(_:_:)-964r9","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"}],"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcolumnvaluesetpredicate","title":"SQLColumnValueSetPredicate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/init(operation:lhs:rhs:)","title":"init(operation: SQLCompoundPredicate<L, R>.Operator, lhs: L, rhs: R)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/lhs","title":"let lhs: L","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operation","title":"let operation: SQLCompoundPredicate<L, R>.Operator","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/rhs","title":"let rhs: R","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/and","title":"case and","type":"case"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/or","title":"case or","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate\/operator","title":"SQLCompoundPredicate.Operator","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/&&(_:_:)-fjyq","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/&&(_:_:)-jydm","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/__(_:_:)-2mn7o","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlcompoundpredicate\/__(_:_:)-9pxg6","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlcompoundpredicate","title":"SQLCompoundPredicate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlerror\/init(_:)","title":"init(OpaquePointer!)","type":"init"},{"path":"\/documentation\/lighter\/sqlerror\/init(_:_:)","title":"init(Int32, UnsafePointer<CChar>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlerror\/code","title":"let code: Int32","type":"property"},{"path":"\/documentation\/lighter\/sqlerror\/message","title":"let message: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/sqlerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlerror","title":"SQLError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlexpression\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"},{"path":"\/documentation\/lighter\/sqlexpression\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlexpression\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlexpression\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/lighter\/sqlexpression\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlexpression\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/lighter\/sqlexpression\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlexpression","title":"SQLExpression","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/init(stringinterpolation:)","title":"init(stringInterpolation: SQLInterpolation)","type":"init"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/&&(_:_:)-1szi3","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/&&(_:_:)-1xiq6","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/__(_:_:)-1n2nb","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/__(_:_:)-35pwm","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlinterpolatedpredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlinterpolatedpredicate","title":"SQLInterpolatedPredicate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolation\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)","type":"init"},{"path":"\/documentation\/lighter\/sqlinterpolation\/init(verbatim:)","title":"init(verbatim: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-1i90h","title":"func appendInterpolation(SQLiteValueType)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-1pg34","title":"func appendInterpolation<V>(V)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-3knpu","title":"func appendInterpolation<S>(S)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-3lm4v","title":"func appendInterpolation<C>(C)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-5g3e1","title":"func appendInterpolation(String)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-5g56p","title":"func appendInterpolation(Int)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-5g8ot","title":"func appendInterpolation(Double)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-5gdd5","title":"func appendInterpolation(Substring)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-8epsj","title":"func appendInterpolation<T>(T.Type)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(_:)-k5o2","title":"func appendInterpolation([UInt8])","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendinterpolation(verbatim:)","title":"func appendInterpolation(verbatim: String)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/appendliteral(_:)","title":"func appendLiteral(String)","type":"method"},{"path":"\/documentation\/lighter\/sqlinterpolation\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"}],"path":"\/documentation\/lighter\/sqlinterpolation","title":"SQLInterpolation","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/!(_:)-3qi45","title":"static func ! (SQLNotPredicate<P>) -> P","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/init(_:)","title":"init(P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/predicate","title":"let predicate: P","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/!(_:)-24iph","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/&&(_:_:)-8nd34","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/&&(_:_:)-tocu","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/__(_:_:)-7tcuf","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqlnotpredicate\/__(_:_:)-8dus8","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqlnotpredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlnotpredicate","title":"SQLNotPredicate","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecorddiffingstate\/addifchanged(_:old:new:)","title":"func addIfChanged<C>(C, old: C.Value, new: C.Value)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecorddiffingstate\/subscript(dynamicmember:)","title":"subscript<C>(dynamicMember _: KeyPath<T.Schema, C>) -> C","type":"subscript"}],"path":"\/documentation\/lighter\/sqlrecorddiffingstate","title":"SQLRecordDiffingState","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/init(_:)","title":"init(Ops)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/connectionhandler","title":"var connectionHandler: SQLConnectionHandler","type":"property"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/operations","title":"let operations: Ops","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-4ip1m","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-6agfw","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-76jbb","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-785ri","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-8ay0t","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:limit:)-8w7dy","title":"func fetch<FK>(for: KeyPath<T.Schema, FK>, in: FK.Destination, limit: Int?) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:omitempty:limit:)-13ngz","title":"func fetch<FK, S>(for: KeyPath<T.Schema, FK>, in: S, omitEmpty: Bool, limit: Int?) async throws -> [FK.DestinationColumn.Value : [T]]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:omitempty:limit:)-2kbdu","title":"func fetch<FK, S>(for: KeyPath<T.Schema, FK>, in: S, omitEmpty: Bool, limit: Int?) throws -> [FK.DestinationColumn.Value : [T]]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:omitempty:limit:)-6c9ov","title":"func fetch<FK, S>(for: KeyPath<T.Schema, FK>, in: S, omitEmpty: Bool, limit: Int?) async throws -> [FK.Destination : [T]]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(for:in:omitempty:limit:)-8lhbc","title":"func fetch<FK, S>(for: KeyPath<T.Schema, FK>, in: S, omitEmpty: Bool, limit: Int?) throws -> [FK.Destination : [T]]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:)-27ot6","title":"func fetch(limit: Int?) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:)-8779p","title":"func fetch(limit: Int?) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:)-4ly8m","title":"func fetch<SC>(limit: Int?, orderBy: KeyPath<T.Schema, SC>, SQLSortOrder) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:)-9k2xb","title":"func fetch<SC>(limit: Int?, orderBy: KeyPath<T.Schema, SC>, SQLSortOrder) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:_:_:where:)-601qm","title":"func fetch<SC1, SC2, P>(limit: Int?, orderBy: KeyPath<T.Schema, SC1>, SQLSortOrder, KeyPath<T.Schema, SC2>, SQLSortOrder, where: (T.Schema) -> P) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:_:_:where:)-6ea5h","title":"func fetch<SC1, SC2, P>(limit: Int?, orderBy: KeyPath<T.Schema, SC1>, SQLSortOrder, KeyPath<T.Schema, SC2>, SQLSortOrder, where: (T.Schema) -> P) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:where:)-1vjqu","title":"func fetch<SC, P>(limit: Int?, orderBy: KeyPath<T.Schema, SC>, SQLSortOrder, where: (T.Schema) -> P) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:where:)-81j98","title":"func fetch<SC, P>(limit: Int?, orderBy: KeyPath<T.Schema, SC>, SQLSortOrder, where: (T.Schema) -> P) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:where:)-9svv","title":"func fetch<P>(limit: Int?, where: (T.Schema) -> P) async throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:where:)-ys7q","title":"func fetch<P>(limit: Int?, where: (T.Schema) -> P) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(sql:)","title":"func fetch(sql: SQLExpression) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(verbatim:bindings:indices:)","title":"func fetch(verbatim: String, bindings: [SQLiteValueType]?, indices: T.Schema.PropertyIndices?) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetchcount()-89bvn","title":"func fetchCount() throws -> Int","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetchcount()-f23z","title":"func fetchCount() async throws -> Int","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetchcount(where:)-13ib3","title":"func fetchCount<P>(where: (T.Schema) -> P) throws -> Int","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetchcount(where:)-62l63","title":"func fetchCount<P>(where: (T.Schema) -> P) async throws -> Int","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/filter(limit:filter:)","title":"func filter(limit: Int?, filter: (T) -> Bool) throws -> [T]","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(_:)-4neoc","title":"func find(T.Schema.PrimaryKeyColumn.Value) async throws -> T?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(_:)-7k750","title":"func find(T.Schema.PrimaryKeyColumn.Value) throws -> T?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(by:_:)-150i1","title":"func find<C>(by: KeyPath<T.Schema, C>, C.Value) async throws -> T?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(by:_:)-434nh","title":"func find<C>(by: KeyPath<T.Schema, C>, C.Value) throws -> T?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-13je3","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-33huo","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) async throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-6ffx4","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-7z6fz","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) async throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-92shi","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/findtarget(for:in:)-9ny8w","title":"func findTarget<FK>(for: KeyPath<T.Schema, FK>, in: T) async throws -> FK.Destination?","type":"method"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/runondatabasequeue(block:)","title":"func runOnDatabaseQueue<R>(block: () throws -> R) async throws -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlrecordfetchoperations\/recordtypes","title":"static var recordTypes: Ops.RecordTypes","type":"property"}],"path":"\/documentation\/lighter\/sqlrecordfetchoperations","title":"SQLRecordFetchOperations","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltruepredicate\/generatesql(into:)","title":"func generateSQL<Base>(into: inout SQLBuilder<Base>)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltruepredicate\/shared","title":"static let shared: SQLTruePredicate","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltruepredicate\/!(_:)","title":"static func ! (Self) -> SQLNotPredicate<Self>","type":"op"},{"path":"\/documentation\/lighter\/sqltruepredicate\/&&(_:_:)-2d8ay","title":"static func && (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"},{"path":"\/documentation\/lighter\/sqltruepredicate\/&&(_:_:)-9mga1","title":"static func && <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqltruepredicate\/__(_:_:)-10bu3","title":"static func || <O>(Self, O) -> SQLCompoundPredicate<Self, O>","type":"op"},{"path":"\/documentation\/lighter\/sqltruepredicate\/__(_:_:)-7wf0","title":"static func || (Self, SQLInterpolatedPredicate) -> SQLCompoundPredicate<Self, SQLInterpolatedPredicate>","type":"op"}],"path":"\/documentation\/lighter\/sqltruepredicate\/sqlpredicate-implementations","title":"SQLPredicate Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqltruepredicate","title":"SQLTruePredicate","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/ascending","title":"case ascending","type":"case"},{"path":"\/documentation\/lighter\/sqlsortorder\/descending","title":"case descending","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqlsortorder\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlsortorder\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlsortorder\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlsortorder\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlsortorder\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlsortorder\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqlsortorder\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqlsortorder\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqlsortorder\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqlsortorder\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqlsortorder\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqlsortorder\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqlsortorder","title":"SQLSortOrder","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/deferred","title":"case deferred","type":"case"},{"path":"\/documentation\/lighter\/sqltransactiontype\/exclusive","title":"case exclusive","type":"case"},{"path":"\/documentation\/lighter\/sqltransactiontype\/immediate","title":"case immediate","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/default","title":"static let `default`: SQLTransactionType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/sqltransactiontype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqltransactiontype\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqltransactiontype\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqltransactiontype\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqltransactiontype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqltransactiontype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/sqltransactiontype\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/lighter\/sqltransactiontype\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/sqltransactiontype\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqltransactiontype\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"},{"path":"\/documentation\/lighter\/sqltransactiontype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lighter\/sqltransactiontype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqltransactiontype","title":"SQLTransactionType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqliterawconversionerror\/couldnotconvertrawvalue(_:)","title":"case couldNotConvertRawValue(RawValue)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/sqliterawconversionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/sqliterawconversionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/sqliterawconversionerror","title":"SQLiteRawConversionError","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/data\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/foundation\/data\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/data\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/foundation\/data\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/data\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/foundation\/data\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/data","title":"Data","type":"extension"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/defaultsqlitedateformatter","title":"static var defaultSQLiteDateFormatter: DateFormatter","type":"property"},{"path":"\/documentation\/lighter\/foundation\/date\/sqldatestoragestyle","title":"static var sqlDateStorageStyle: Date.SQLiteDateStorageStyle","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedateconversionerror\/couldnotparsedatestring(_:)","title":"case couldNotParseDateString(String)","type":"case"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedateconversionerror\/unexpectednull","title":"case unexpectedNull","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedateconversionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/foundation\/date\/sqlitedateconversionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/date\/sqlitedateconversionerror","title":"Date.SQLiteDateConversionError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedatestoragestyle\/formatter(_:)","title":"case formatter(DateFormatter)","type":"case"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedatestoragestyle\/timeintervalsince1970","title":"case timeIntervalSince1970","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlitedatestoragestyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/foundation\/date\/sqlitedatestoragestyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/date\/sqlitedatestoragestyle","title":"Date.SQLiteDateStorageStyle","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/foundation\/date\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/foundation\/date\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/date\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/foundation\/date\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/date","title":"Date","type":"extension"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/sqlcouldnotparsedecimal\/init(string:)","title":"init(string: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/sqlcouldnotparsedecimal\/string","title":"let string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/sqlcouldnotparsedecimal\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/foundation\/decimal\/sqlcouldnotparsedecimal\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/decimal\/sqlcouldnotparsedecimal","title":"Decimal.SQLCouldNotParseDecimal","type":"struct"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/sqlstringlocale","title":"static let sqlStringLocale: Locale","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/foundation\/decimal\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/foundation\/decimal\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/decimal\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/foundation\/decimal\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/decimal","title":"Decimal","type":"extension"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/sqlcouldnotparseurl\/init(string:)","title":"init(string: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/sqlcouldnotparseurl\/string","title":"let string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/sqlcouldnotparseurl\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/foundation\/url\/sqlcouldnotparseurl\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/url\/sqlcouldnotparseurl","title":"URL.SQLCouldNotParseURL","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/foundation\/url\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/foundation\/url\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/url\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/foundation\/url\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/url","title":"URL","type":"extension"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqluuidstoragestyle","title":"static var sqlUUIDStorageStyle: UUID.SQLiteUUIDStorageStyle","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqlcouldnotloaduuid\/couldnotparsestring(_:)","title":"case couldNotParseString(String)","type":"case"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqlcouldnotloaduuid\/datawithinvalidlength(_:)","title":"case dataWithInvalidLength(Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqlcouldnotloaduuid\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/foundation\/uuid\/sqlcouldnotloaduuid\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/uuid\/sqlcouldnotloaduuid","title":"UUID.SQLCouldNotLoadUUID","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqliteuuidstoragestyle\/blob","title":"case blob","type":"case"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqliteuuidstoragestyle\/string","title":"case string","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqliteuuidstoragestyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lighter\/foundation\/uuid\/sqliteuuidstoragestyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/uuid\/sqliteuuidstoragestyle","title":"UUID.SQLiteUUIDStorageStyle","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/foundation\/uuid\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/foundation\/uuid\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/foundation\/uuid\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/foundation\/uuid\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/foundation\/uuid","title":"UUID","type":"extension"}],"path":"\/documentation\/lighter\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/binaryinteger\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/binaryinteger\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/binaryinteger\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/binaryinteger\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/binaryinteger\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/binaryinteger","title":"BinaryInteger","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/collection\/contains(_:)","title":"func contains<C>(C) -> SQLColumnValueSetPredicate<C>","type":"method"}],"path":"\/documentation\/lighter\/swift\/collection","title":"Collection","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/rawrepresentable\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/rawrepresentable\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/rawrepresentable\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/rawrepresentable\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/rawrepresentable\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/rawrepresentable","title":"RawRepresentable","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/array\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/array\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/array\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/array\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/array\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/array\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/bool\/sqliteboolconversionerror\/couldnotparsestring(_:)","title":"case couldNotParseString(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/bool\/sqliteboolconversionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/lighter\/swift\/bool\/sqliteboolconversionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/bool\/sqliteboolconversionerror","title":"Bool.SQLiteBoolConversionError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/bool\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/bool\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/bool\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/bool\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/bool\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/bool\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/closedrange\/contains(_:)","title":"func contains<C>(C) -> SQLColumnValueRangePredicate<C>","type":"method"}],"path":"\/documentation\/lighter\/swift\/closedrange","title":"ClosedRange","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/double\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/double\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/double\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/double\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/double\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/double\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/float\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/float\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/float\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/float\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/float\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/float\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/range\/contains(_:)","title":"func contains<C>(C) -> SQLColumnValueRangePredicate<C>","type":"method"}],"path":"\/documentation\/lighter\/swift\/range","title":"Range","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/string\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/string\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/string\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/string\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/string\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/string\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/substring\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/substring\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/substring\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/substring\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/substring\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/substring\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/substring","title":"Substring","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/uint\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/uint\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/uint\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/uint","title":"UInt","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint64\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/uint64\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint64\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/uint64\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/uint64\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/uint64\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/uint64","title":"UInt64","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/optional\/withcstring(_:)","title":"func withCString<R>((UnsafePointer<CChar>?) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/optional\/init(unsafesqlite3statementhandle:column:)","title":"init(unsafeSQLite3StatementHandle: OpaquePointer!, column: Int32) throws","type":"init"},{"path":"\/documentation\/lighter\/swift\/optional\/init(unsafesqlite3valuehandle:)","title":"init(unsafeSQLite3ValueHandle: OpaquePointer?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/optional\/requiressqlbinding","title":"var requiresSQLBinding: Bool","type":"property"},{"path":"\/documentation\/lighter\/swift\/optional\/sqlstringvalue","title":"var sqlStringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lighter\/swift\/optional\/bind(unsafesqlite3statementhandle:index:then:)","title":"func bind(unsafeSQLite3StatementHandle: OpaquePointer!, index: Int32, then: () -> Void)","type":"method"}],"path":"\/documentation\/lighter\/swift\/optional\/sqlitevaluetype-implementations","title":"SQLiteValueType Implementations","type":"symbol"}],"path":"\/documentation\/lighter\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/lighter\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/lighter","title":"Lighter.swift for SQLite3","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}