{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"roleHeading":"Article","title":"Migrations","modules":[{"name":"Lighter.swift for SQLite3"}],"role":"article"},"seeAlsoSections":[{"generated":true,"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Performance"]}],"abstract":[{"text":"Detecting schema changes and performing schema upgrades.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the context the term “migration” means dealing with changes to the database"},{"type":"text","text":" "},{"type":"text","text":"schema."},{"type":"text","text":" "},{"text":"For example v1 of an app might have created a database table that looks like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"code":["CREATE TABLE contact (","    id   INT  NOT NULL PRIMARY KEY,","    name TEXT NOT NULL",");"],"syntax":"sql","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And v2 of the app added an "},{"type":"codeVoice","code":"age"},{"text":" field:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ALTER TABLE contact ADD COLUMN age INT NULL;"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Resulting in a new schema:"}]},{"code":["CREATE TABLE contact (","    id   INT  NOT NULL PRIMARY KEY,","    name TEXT NOT NULL,","    age  INT  NULL",");"],"syntax":"sql","type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"This only is relevant for databases that are not packaged as resources,"},{"type":"text","text":" "},{"type":"text","text":"e.g. caches or document databases. Resource database always automatically"},{"text":" ","type":"text"},{"text":"match up with the generated code.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the new v2 version of the app is released, existing users might still"},{"text":" ","type":"text"},{"type":"text","text":"have a v1 database."},{"text":" ","type":"text"},{"text":"“Migrations” is the process to deal with that.","type":"text"}]},{"inlineContent":[{"type":"text","text":"How migrations should be handled depends a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"text":" on the actual use case.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There are various approaches on dealing with them."},{"type":"text","text":" "},{"text":"Lighter (like SQLite) itself doesn’t have migration functionality builtin,","type":"text"},{"text":" ","type":"text"},{"text":"but it is easy to build such on top.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Detecting-Old-Database-Versions","text":"Detecting Old Database Versions"},{"inlineContent":[{"type":"text","text":"One (and the recommended) SQLite way to communicate schema changes is the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/www.sqlite.org\/pragma.html#pragma_user_version","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This pragma is simply a persistent integer value that the user can set to"},{"type":"text","text":" "},{"text":"anything.","type":"text"},{"type":"text","text":" "},{"text":"But its most common use is as a schema change indicator.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example the above SQL should be done like this:","type":"text"}]},{"syntax":"sql","code":["CREATE TABLE contact (","    id   INT  NOT NULL PRIMARY KEY,","    name TEXT NOT NULL",");","PRAGMA user_version = 1; -- tag the schema version"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then if the schema is modified, that version should be bumped:"}]},{"code":["ALTER TABLE contact ADD COLUMN age INT NULL;","PRAGMA user_version = 2; -- tag the new schema version"],"type":"codeListing","syntax":"sql"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when the application starts up (or a document is opened), it can retrieve"},{"type":"text","text":" "},{"type":"text","text":"this version:"}]},{"type":"codeListing","code":["let fileVersion = try database.get(pragma: \"user_version\", as: Int.self)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Which will return ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" for old database files and "},{"code":"2","type":"codeVoice"},{"type":"text","text":" for v2 database files."}]},{"inlineContent":[{"text":"The version the database had when generating the Swift code for it","type":"text"},{"text":" ","type":"text"},{"text":"is stored in the ","type":"text"},{"code":"userVersion","type":"codeVoice"},{"text":" property of the database structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To detect whether something has changed with respect to the running code:"}],"type":"paragraph"},{"code":["let fileVersion = try database.get(pragma: \"user_version\", as: Int.self)","if fileVersion != BodiesDB.userVersion {","    print(\"The database version has changed!\")","}"],"type":"codeListing","syntax":"swift"},{"name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"What a version change "},{"type":"strong","inlineContent":[{"text":"means","type":"text"}]},{"text":" is entirely application specific,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and its requirements for downwards and upwards compatibility."},{"type":"text","text":" "},{"type":"text","text":"It is tempting to say that each version bump needs to result in a migration,"},{"text":" ","type":"text"},{"type":"text","text":"but that isn’t necessarily true."},{"text":" ","type":"text"},{"type":"text","text":"If the change was purely additive (e.g. another table got added),"},{"type":"text","text":" "},{"text":"an application might still work with the “older” database file but reduce","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the available functionality (maybe letting the user decide to “upgrade”)."}]}],"type":"aside"},{"anchor":"Simple-Solution-for-Caches-Drop--Recreate","level":3,"text":"Simple Solution for Caches: Drop & Recreate","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If the database is really just used as a network cache for offline first,","type":"text"},{"text":" ","type":"text"},{"text":"and not so large that a cache rebuild would be expensive,","type":"text"},{"text":" ","type":"text"},{"text":"just dropping the cache database can be quick option.","type":"text"}]},{"inlineContent":[{"text":"A good place to do this is the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" of an application for app-wide databases","type":"text"},{"text":" ","type":"text"},{"text":"e.g. from the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/Lighter-swift\/Examples\/tree\/develop\/Sources\/Bodies\/","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"example:"}],"type":"paragraph"},{"type":"codeListing","code":["@main","struct BodiesApp: App {","    ","    let database = try! BodiesDB.bootstrap(into: .cachesDirectory)","    ","    init() {","        let schemaVersion =","            try! database.get(pragma: \"user_version\", as: Int.self)","        if schemaVersion != BodiesDB.userVersion {","            print(\"Dumping cache, the version is outdated.\")","            _ = try! BodiesDB.bootstrap(into: .cachesDirectory, overwrite: true)","        }","    }","...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes sure the database is the latest prior being used by any"},{"type":"text","text":" "},{"text":"SwiftUI Views.","type":"text"}]},{"anchor":"Simple-Solution-for-Caches-Version-the-Filename","type":"heading","text":"Simple Solution for Caches: Version the Filename","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If different applications or extensions share the same cache, it can also"},{"type":"text","text":" "},{"text":"be useful to put it into a version filename:","type":"text"}]},{"code":["let filename = \"BodiesDB-\\(BodiesDB.userVersion).sqlite3\"","let database = ","    try BodiesDB.bootstrap(into: .cachesDirectory, filename: filename)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This way different versions can co-exist.","type":"text"}]},{"text":"SQL Resource File Based Migrations","anchor":"SQL-Resource-File-Based-Migrations","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"When generating the Swift code, Enlighter and companions do not only look at"},{"text":" ","type":"text"},{"text":"individual files, e.g. ","type":"text"},{"type":"codeVoice","code":"BodiesDB.sql"},{"type":"text","text":". They actually group files with the same"},{"type":"text","text":" "},{"type":"text","text":"name together, e.g. "},{"type":"codeVoice","code":"BodiesDB.sql"},{"type":"text","text":" and "},{"type":"codeVoice","code":"BodiesDB-create-indices.sql"},{"type":"text","text":" would both"},{"text":" ","type":"text"},{"type":"text","text":"form a group that results in the "},{"code":"BodiesDB","type":"codeVoice"},{"text":" database.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Since the group is applied after being sorted, this can be used to implement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a simple migration mechanism. Each migration can be placed into a separate"},{"text":" ","type":"text"},{"text":"file with the version being part of the file name:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"File "},{"type":"codeVoice","code":"ContactsDB-001.sql"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["CREATE TABLE contact (","    id   INT  NOT NULL PRIMARY KEY,","    name TEXT NOT NULL",");","PRAGMA user_version = 1; -- tag the schema version"],"syntax":"sql","type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"File "},{"code":"ContactsDB-002.sql","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ALTER TABLE contact ADD COLUMN age INT NULL;","PRAGMA user_version = 2; -- tag the new schema version"],"syntax":"sql"}]}]},{"inlineContent":[{"type":"text","text":"Enlighter will combine both files into the "},{"code":"ContactsDB","type":"codeVoice"},{"text":" structure. If the files","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are also embedded as resource files into the application bundle, they can be"},{"text":" ","type":"text"},{"type":"text","text":"executed at runtime (pseudo code):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let fileVersion = try database.get(pragma: \"user_version\", as: Int.self)","guard fileVersion < BodiesDB.userVersion else { return }","","for i in (fileVersion + 1)...BodiesDB.userVersion {","    let filename = \"ContactsDB-\\(leftpad(i, 3)).sql\" \/\/ ;-)","    let url = Bundle.main.urlForResource(filename, ofType: \"sql\")","    let sql = try String(contentsOf: url)","    try database.execute(sql)","}"]},{"type":"heading","anchor":"During-Development","level":3,"text":"During Development"},{"inlineContent":[{"text":"When the SQL for a database is still being developed on and modified often,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the developer may want to start out with a clean database with the latest schema"},{"type":"text","text":" "},{"type":"text","text":"on startup."},{"type":"text","text":" "},{"type":"text","text":"This can be done using the "},{"type":"codeVoice","code":"overwrite"},{"type":"text","text":" parameter in the "},{"type":"codeVoice","code":"bootstrap"},{"type":"text","text":" functions,"},{"text":" ","type":"text"},{"text":"e.g. from the","type":"text"},{"text":" ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"Solar Bodies"}],"type":"reference","overridingTitle":"Solar Bodies","isActive":true,"identifier":"https:\/\/github.com\/Lighter-swift\/Examples\/tree\/develop\/Sources\/Bodies\/"},{"text":" ","type":"text"},{"type":"text","text":"example:"}],"type":"paragraph"},{"code":["@main","struct BodiesApp: App {","  ","    #if DEBUG","    let database = try! BodiesDB.bootstrap(overwrite: true)","    #else","    let database = try! BodiesDB.bootstrap()","    #endif","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"#if DEBUG"},{"type":"text","text":" is recommended, so that an "},{"type":"codeVoice","code":"overwrite"},{"text":" doesn’t","type":"text"},{"text":" ","type":"text"},{"text":"accidentially leak into a production deployment.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Keeping Multiple Code Versions in the App","level":3,"anchor":"Keeping-Multiple-Code-Versions-in-the-App"},{"type":"paragraph","inlineContent":[{"text":"It is also possible to keep generated Swift code for multiple version in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"single app."},{"text":" ","type":"text"},{"text":"Simply keep both versions as separate “databases”. E.g. ","type":"text"},{"type":"codeVoice","code":"OldContactsDB.sql"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NewContactsDB.sql"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then use the "},{"type":"codeVoice","code":"embedRecordTypesInDatabaseType"},{"text":" ","type":"text"},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"reference","isActive":true},{"type":"text","text":", and only"},{"type":"text","text":" "},{"type":"text","text":"set it to "},{"type":"codeVoice","code":"false"},{"text":" for the latest database","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(or set it to "},{"type":"codeVoice","code":"true"},{"text":" for all versions).","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It’ll end up with something like this:"}]},{"syntax":"swift","code":["struct OldContactsDB: SQLDatabase {","","    struct Contact: SQLTableRecord {} \/\/ the older version","}","struct NewContactsDB: SQLDatabase {","}","struct Contact: SQLTableRecord {} \/\/ the latest version"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This way different versions of database files can be used with generated code,"},{"type":"text","text":" "},{"text":"only the database struct has to be toggled.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The same is possible w\/ the SQLite3 API when the type-attached function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generators are used."}]},{"anchor":"SQLite-Schema-Modification-Specifics","text":"SQLite Schema Modification Specifics","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Schema migrations sometimes require custom work due to SQLite limitations,","type":"text"},{"text":" ","type":"text"},{"text":"this is a good document on the specifics:","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.sqlite.org\/lang_altertable.html#making_other_kinds_of_table_schema_changes"},{"type":"text","text":"."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"variants":[{"paths":["\/documentation\/lighter\/migrations"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations"},"references":{"https://www.sqlite.org/pragma.html#pragma_user_version":{"titleInlineContent":[{"code":"PRAGMA user_version","type":"codeVoice"}],"title":"PRAGMA user_version","url":"https:\/\/www.sqlite.org\/pragma.html#pragma_user_version","type":"link","identifier":"https:\/\/www.sqlite.org\/pragma.html#pragma_user_version"},"https://github.com/Lighter-swift/Examples/tree/develop/Sources/Bodies/":{"type":"link","titleInlineContent":[{"type":"text","text":"Solar Bodies"}],"title":"Solar Bodies","identifier":"https:\/\/github.com\/Lighter-swift\/Examples\/tree\/develop\/Sources\/Bodies\/","url":"https:\/\/github.com\/Lighter-swift\/Examples\/tree\/develop\/Sources\/Bodies\/"},"doc://Lighter/documentation/Lighter/Linux":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","role":"article","url":"\/documentation\/lighter\/linux","type":"topic","abstract":[{"text":"Using Lighter on Linux.","type":"text"}],"title":"Linux"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","url":"\/documentation\/lighter\/configuration","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"topic","kind":"article","title":"Configuration","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Lighter.json"},{"text":" configuration file.","type":"text"}]},"doc://Lighter/documentation/Lighter/Mapping":{"url":"\/documentation\/lighter\/mapping","role":"collectionGroup","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"title":"Mapping","type":"topic","kind":"article"},"doc://Lighter/documentation/Lighter/Performance":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","role":"article","url":"\/documentation\/lighter\/performance","type":"topic","abstract":[{"text":"A quick look at Lighter performance.","type":"text"}],"title":"Performance"},"doc://Lighter/documentation/Lighter/Manual":{"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","title":"Manual Generation","url":"\/documentation\/lighter\/manual","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"role":"article"},"https://www.sqlite.org/lang_altertable.html#making_other_kinds_of_table_schema_changes":{"type":"link","titleInlineContent":[{"type":"text","text":"SQLite ALTER TABLE"}],"identifier":"https:\/\/www.sqlite.org\/lang_altertable.html#making_other_kinds_of_table_schema_changes","title":"SQLite ALTER TABLE","url":"https:\/\/www.sqlite.org\/lang_altertable.html#making_other_kinds_of_table_schema_changes"},"doc://Lighter/documentation/Lighter":{"url":"\/documentation\/lighter","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Lighter\/documentation\/Lighter","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"inlineContent":[{"type":"text","text":"very"}],"type":"strong"},{"type":"text","text":", fast. Dependency free."}]},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","role":"article","url":"\/documentation\/lighter\/sqliteapi","type":"topic","abstract":[{"text":"Using the dependency-free SQLite API.","type":"text"}],"title":"Dependency-Free API"}}}