{"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter directly represents the SQLite database schema as Swift structures"},{"type":"text","text":" "},{"type":"text","text":"and has only limited mapping capabilities."},{"type":"text","text":" "},{"type":"text","text":"This is intentional, the library isn’t supposed to be a mapping framework."}]},{"anchor":"Column-Value-Mapping","level":3,"type":"heading","text":"Column Value Mapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter and Enlighter has support for those types builtin (the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/datatype3.html"},{"type":"text","text":"):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"},{"type":"text","text":"       (SQL "},{"type":"codeVoice","code":"INTEGER"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"},{"type":"text","text":"    (SQL "},{"type":"codeVoice","code":"REAL"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"    (SQL "},{"type":"codeVoice","code":"TEXT"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[ UInt8 ]"},{"type":"text","text":" (SQL "},{"type":"codeVoice","code":"BLOB"},{"type":"text","text":")"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And those Foundation types (if Foundation is enabled in the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"URL"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UUID"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Date"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Decimal"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All column values must conform to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" (which also makes all Lighter"},{"type":"text","text":" "},{"type":"text","text":"record structures "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"&"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", often a convinient thing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type used for a column is derived from the database schema type for the"},{"type":"text","text":" "},{"type":"text","text":"core SQLite3 types, and can be further configured by the"},{"type":"text","text":" "},{"type":"codeVoice","code":"typeMap"},{"type":"text","text":" and "},{"type":"codeVoice","code":"columnSuffixToType"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"’s:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"typeMap"},{"type":"text","text":" (Dictionary): This is used to map SQL types to Foundation types,"},{"type":"text","text":" "},{"type":"text","text":"or actually any type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" to "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When using Lighter own types can be added by implementing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"columnSuffixToType"},{"type":"text","text":" (Dictionary): Similar to "},{"type":"codeVoice","code":"typeMap"},{"type":"text","text":", this matches"},{"type":"text","text":" "},{"type":"text","text":"against the name of a column to define the type."},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"codeVoice","code":"_date"},{"type":"text","text":" could be mapped to "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" and "},{"type":"codeVoice","code":"start_date"},{"type":"text","text":", "},{"type":"codeVoice","code":"end_date"},{"type":"text","text":" "},{"type":"text","text":"etc would all be generated as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default "},{"type":"codeVoice","code":"typeMap"},{"type":"text","text":" for Foundation types:"}]},{"type":"codeListing","syntax":"swift","code":["[ \"uuid\"      : .uuid,","  \"UUID\"      : .uuid,","  \"url\"       : .url,","  \"URL\"       : .url,","  \"Data\"      : .date,","  \"DECIMAL\"   : .decimal,","  \"decimal\"   : .decimal,","  \"NUMERIC\"   : .decimal,","  \"numeric\"   : .decimal,","  \"TIMESTAMP\" : .date,","  \"timestamp\" : .date,","  \"DATETIME\"  : .date,","  \"datetime\"  : .date ]"]},{"anchor":"User-Defined-Column-Types","level":3,"type":"heading","text":"User Defined Column Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using the dependency-free SQLite3 API additional types cannot be used."},{"type":"text","text":" "},{"type":"text","text":"Additional mapping has to be done at a higher level."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using the Lighter API, new types can be introduced by adding the type"},{"type":"text","text":" "},{"type":"text","text":"name to the configuration and implementing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"Since the custom values must be backed by one of SQLite builtin types,"},{"type":"text","text":" "},{"type":"text","text":"it is often possible to work on top of the existing implementations of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":" by "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"String"},{"type":"text","text":" etc."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"RawRepresentable"},{"type":"text","text":" Enumerations have predefined support,"},{"type":"text","text":" "},{"type":"text","text":"e.g. that works just by tagging the enum as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["enum SolarBodyType: String, SQLiteValueType {","  case asteroid = \"Asteroid\"","  case moon     = \"Moon\"","  case planet   = \"Planet\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Manual example implementation for "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":"s, backed by Strings:"}]},{"type":"codeListing","syntax":"swift","code":["extension UUID : SQLiteValueType {","      ","  init(unsafeSQLite3StatementHandle stmt: OpaquePointer!, column: Int32) throws {","    let s = try String(unsafeSQLite3StatementHandle: stmt, column: column)","    guard let value = UUID(uuidString: s) else { throw Error() }","    self = value","  }","  init(unsafeSQLite3ValueHandle value: OpaquePointer?) throws {","    let s = try String(unsafeSQLite3ValueHandle: value)","    guard let value = UUID(uuidString: s) else { throw Error() }","    self = value","  }","  ","  var sqlStringValue     : String { uuidString.sqlStringValue }","  var requiresSQLBinding : Bool   { true }","  ","  func bind(unsafeSQLite3StatementHandle stmt: OpaquePointer!,","            index: Int32, then execute: () -> Void)","  {","    uuidString","      .bind(unsafeSQLite3StatementHandle: stmt, index: index, then: execute)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Those are the things required during column mapping both ways."}]},{"anchor":"Mapping-at-a-Higher-Level","level":2,"type":"heading","text":"Mapping at a Higher Level"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are various options on where to place more general mapping code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s assume the record structure mapped for the Northwind"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category"},{"type":"text","text":" "},{"type":"text","text":"table. It looks like this:"}]},{"type":"codeListing","syntax":"swift","code":["public struct Category : Identifiable, Codable {","  ","  public var id           : Int?","  public var categoryName : String?","  public var description  : String?","  public var picture      : [ UInt8 ]?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It carries an embedded JPEG in the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture"},{"type":"text","text":" "},{"type":"text","text":"column, as a BLOB (i.e. just bytes)."},{"type":"text","text":" "},{"type":"text","text":"It would be nice to have this mapped to a "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" for display."},{"type":"text","text":" "},{"type":"text","text":"And maybe make the "},{"type":"codeVoice","code":"categoryName"},{"type":"text","text":" available as just "},{"type":"codeVoice","code":"name"},{"type":"text","text":", and remove the"},{"type":"text","text":" "},{"type":"text","text":"optionality and make it an empty String when "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"anchor":"Map-Using-Swift-Type-Extensions","level":3,"type":"heading","text":"Map Using Swift Type Extensions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated code can be extended just like normal code. To add our "},{"type":"codeVoice","code":"image"},{"type":"text","text":" "},{"type":"text","text":"column, we could so a simple:"}]},{"type":"codeListing","syntax":"swift","code":["extension Category {","","  var name  : String   { categoryName ?? \"\" }","  var image : UIImage? { UIImage(data: Data(picture ?? [])) }","}"]},{"anchor":"Map-Using-a-View-Model","level":3,"type":"heading","text":"Map Using a View Model"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Something which is commonly down anyways is mapping model data to a view model:"}]},{"type":"codeListing","syntax":"swift","code":["struct CategoryViewMode: Equatable, Identifiable {","","  let id    : Int","  let name  : String","  let image : UIImage?","","  init(_ category: Category) {","    self.id    = category.id ?? -1","    self.name  = category.categoryName ?? \"\"","    self.image = UIImage(data: Data(category.picture ?? []))","  }","}"]},{"anchor":"Map-Using-dynamicMemberLookup","level":3,"type":"heading","text":"Map Using `@dynamicMemberLookup`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/"},{"type":"text","text":" "},{"type":"text","text":"feature is useful during mapping, as it allows to easily wrap existing types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example to enhance the "},{"type":"codeVoice","code":"Category"},{"type":"text","text":" structure with the additional properties,"},{"type":"text","text":" "},{"type":"text","text":"but "},{"type":"emphasis","inlineContent":[{"type":"text","text":"also"}]},{"type":"text","text":" keep the "},{"type":"codeVoice","code":"Category"},{"type":"text","text":" properties available this can be done:"}]},{"type":"codeListing","syntax":"swift","code":["@dynamicMemberLookup","struct ExtendedCategory {","  ","  let category : Category","  ","  var name  : String   { self.categoryName ?? \"\" }","  var image : UIImage? { UIImage(data: Data(self.picture ?? [])) }","  ","  subscript<V>(dynamicMember keyPath: KeyPath<Category, V>) -> V {","    category[keyPath: keyPath]","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The extended category can be used like this:"}]},{"type":"codeListing","syntax":"swift","code":["let categories = try db.categories.fetch().map(ExtendedCategory.init)","categories[0].id    \/\/ works because of the `@dynamicMemberLookup`","categories[0].image \/\/ also works"]}]}],"variants":[{"paths":["\/documentation\/lighter\/mapping"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"kind":"article","metadata":{"modules":[{"name":"Lighter.swift for SQLite3"}],"role":"collectionGroup","title":"Mapping"},"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"topicSections":[{"title":"Types","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"]}],"references":{"doc://Lighter/documentation/Lighter/Manual":{"role":"article","title":"Manual Generation","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","type":"topic","url":"\/documentation\/lighter\/manual"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/category":{"title":"Product Category","titleInlineContent":[{"type":"text","text":"Product Category"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category"},"https://www.sqlite.org/datatype3.html":{"title":"core SQLite types","titleInlineContent":[{"type":"text","text":"core SQLite types"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/datatype3.html","url":"https:\/\/www.sqlite.org\/datatype3.html"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/category/picture":{"title":"picture","titleInlineContent":[{"type":"text","text":"picture"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","title":"Configuration","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","kind":"article","type":"topic","url":"\/documentation\/lighter\/configuration"},"doc://Lighter/documentation/Lighter/Linux":{"role":"article","title":"Linux","abstract":[{"type":"text","text":"Using Lighter on Linux."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","kind":"article","type":"topic","url":"\/documentation\/lighter\/linux"},"doc://Lighter/documentation/Lighter/SQLiteValueType":{"role":"symbol","title":"SQLiteValueType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLiteValueType"}],"abstract":[{"type":"text","text":"A value that can be used in SQLite columns."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLiteValueType"}],"url":"\/documentation\/lighter\/sqlitevaluetype"},"doc://Lighter/documentation/Lighter/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"A quick look at Lighter performance."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","kind":"article","type":"topic","url":"\/documentation\/lighter\/performance"},"doc://Lighter/documentation/Lighter/Migrations":{"role":"article","title":"Migrations","abstract":[{"type":"text","text":"Detecting schema changes and performing schema upgrades."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","kind":"article","type":"topic","url":"\/documentation\/lighter\/migrations"},"http://www.alwaysrightinstitute.com/swift-dynamic-callable/":{"title":"@dynamicMemberLookup","titleInlineContent":[{"type":"codeVoice","code":"@dynamicMemberLookup"}],"type":"link","identifier":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/","url":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/"},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"role":"article","title":"Dependency-Free API","abstract":[{"type":"text","text":"Using the dependency-free SQLite API."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","kind":"article","type":"topic","url":"\/documentation\/lighter\/sqliteapi"},"doc://Lighter/documentation/Lighter":{"role":"collection","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"type":"strong","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":", fast. Dependency free."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter","kind":"symbol","type":"topic","url":"\/documentation\/lighter"}}}