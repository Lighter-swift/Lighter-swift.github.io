{"kind":"article","metadata":{"modules":[{"name":"Lighter.swift for SQLite3"}],"role":"collectionGroup","title":"Mapping"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping"},"topicSections":[{"title":"Types","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"]}],"variants":[{"paths":["\/documentation\/lighter\/mapping"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Lighter directly represents the SQLite database schema as Swift structures"},{"type":"text","text":" "},{"text":"and has only limited mapping capabilities.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is intentional, the library isn’t supposed to be a mapping framework."}],"type":"paragraph"},{"type":"heading","text":"Column Value Mapping","level":3,"anchor":"Column-Value-Mapping"},{"type":"paragraph","inlineContent":[{"text":"Lighter and Enlighter has support for those types builtin (the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.sqlite.org\/datatype3.html","isActive":true},{"text":"):","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"},{"text":"       (SQL ","type":"text"},{"type":"codeVoice","code":"INTEGER"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Double"},{"text":"    (SQL ","type":"text"},{"type":"codeVoice","code":"REAL"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":"    (SQL "},{"code":"TEXT","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[ UInt8 ]"},{"type":"text","text":" (SQL "},{"code":"BLOB","type":"codeVoice"},{"type":"text","text":")"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"And those Foundation types (if Foundation is enabled in the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"URL"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UUID"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Date","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"Decimal","type":"codeVoice"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All column values must conform to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" (which also makes all Lighter"},{"type":"text","text":" "},{"type":"text","text":"record structures "},{"code":"Hashable","type":"codeVoice"},{"text":"&","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", often a convinient thing."}]},{"type":"paragraph","inlineContent":[{"text":"The type used for a column is derived from the database schema type for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"core SQLite3 types, and can be further configured by the"},{"type":"text","text":" "},{"code":"typeMap","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"columnSuffixToType","type":"codeVoice"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true},{"type":"text","text":"’s:"}]},{"items":[{"content":[{"inlineContent":[{"code":"typeMap","type":"codeVoice"},{"type":"text","text":" (Dictionary): This is used to map SQL types to Foundation types,"},{"type":"text","text":" "},{"type":"text","text":"or actually any type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example "},{"code":"UUID","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"When using Lighter own types can be added by implementing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"columnSuffixToType","type":"codeVoice"},{"type":"text","text":" (Dictionary): Similar to "},{"code":"typeMap","type":"codeVoice"},{"text":", this matches","type":"text"},{"type":"text","text":" "},{"type":"text","text":"against the name of a column to define the type."},{"text":" ","type":"text"},{"type":"text","text":"For example "},{"code":"_date","type":"codeVoice"},{"text":" could be mapped to ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" and "},{"code":"start_date","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"end_date"},{"text":" ","type":"text"},{"text":"etc would all be generated as ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" values.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The default "},{"code":"typeMap","type":"codeVoice"},{"type":"text","text":" for Foundation types:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["[ \"uuid\"      : .uuid,","  \"UUID\"      : .uuid,","  \"url\"       : .url,","  \"URL\"       : .url,","  \"Data\"      : .date,","  \"DECIMAL\"   : .decimal,","  \"decimal\"   : .decimal,","  \"NUMERIC\"   : .decimal,","  \"numeric\"   : .decimal,","  \"TIMESTAMP\" : .date,","  \"timestamp\" : .date,","  \"DATETIME\"  : .date,","  \"datetime\"  : .date ]"]},{"type":"heading","anchor":"User-Defined-Column-Types","level":3,"text":"User Defined Column Types"},{"inlineContent":[{"text":"When using the dependency-free SQLite3 API additional types cannot be used.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Additional mapping has to be done at a higher level."}],"type":"paragraph"},{"inlineContent":[{"text":"When using the Lighter API, new types can be introduced by adding the type","type":"text"},{"text":" ","type":"text"},{"text":"name to the configuration and implementing the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","type":"reference"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"Since the custom values must be backed by one of SQLite builtin types,","type":"text"},{"type":"text","text":" "},{"text":"it is often possible to work on top of the existing implementations of","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"text":" by ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" etc."}],"type":"paragraph"},{"inlineContent":[{"code":"RawRepresentable","type":"codeVoice"},{"type":"text","text":" Enumerations have predefined support,"},{"type":"text","text":" "},{"type":"text","text":"e.g. that works just by tagging the enum as "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum SolarBodyType: String, SQLiteValueType {","  case asteroid = \"Asteroid\"","  case moon     = \"Moon\"","  case planet   = \"Planet\"","}"]},{"inlineContent":[{"text":"Manual example implementation for ","type":"text"},{"code":"UUID","type":"codeVoice"},{"type":"text","text":"s, backed by Strings:"}],"type":"paragraph"},{"code":["extension UUID : SQLiteValueType {","      ","  init(unsafeSQLite3StatementHandle stmt: OpaquePointer!, column: Int32) throws {","    let s = try String(unsafeSQLite3StatementHandle: stmt, column: column)","    guard let value = UUID(uuidString: s) else { throw Error() }","    self = value","  }","  init(unsafeSQLite3ValueHandle value: OpaquePointer?) throws {","    let s = try String(unsafeSQLite3ValueHandle: value)","    guard let value = UUID(uuidString: s) else { throw Error() }","    self = value","  }","  ","  var sqlStringValue     : String { uuidString.sqlStringValue }","  var requiresSQLBinding : Bool   { true }","  ","  func bind(unsafeSQLite3StatementHandle stmt: OpaquePointer!,","            index: Int32, then execute: () -> Void)","  {","    uuidString","      .bind(unsafeSQLite3StatementHandle: stmt, index: index, then: execute)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Those are the things required during column mapping both ways.","type":"text"}]},{"type":"heading","level":2,"anchor":"Mapping-at-a-Higher-Level","text":"Mapping at a Higher Level"},{"inlineContent":[{"type":"text","text":"There are various options on where to place more general mapping code."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s assume the record structure mapped for the Northwind","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"table. It looks like this:"}],"type":"paragraph"},{"code":["public struct Category : Identifiable, Codable {","  ","  public var id           : Int?","  public var categoryName : String?","  public var description  : String?","  public var picture      : [ UInt8 ]?","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It carries an embedded JPEG in the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture"},{"text":" ","type":"text"},{"type":"text","text":"column, as a BLOB (i.e. just bytes)."},{"type":"text","text":" "},{"text":"It would be nice to have this mapped to a ","type":"text"},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" for display."},{"text":" ","type":"text"},{"type":"text","text":"And maybe make the "},{"code":"categoryName","type":"codeVoice"},{"text":" available as just ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":", and remove the"},{"type":"text","text":" "},{"text":"optionality and make it an empty String when ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"anchor":"Map-Using-Swift-Type-Extensions","type":"heading","text":"Map Using Swift Type Extensions","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated code can be extended just like normal code. To add our "},{"code":"image","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"column, we could so a simple:"}]},{"code":["extension Category {","","  var name  : String   { categoryName ?? \"\" }","  var image : UIImage? { UIImage(data: Data(picture ?? [])) }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Map Using a View Model","anchor":"Map-Using-a-View-Model"},{"type":"paragraph","inlineContent":[{"text":"Something which is commonly done anyways is mapping model data to a view model:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct CategoryViewModel: Equatable, Identifiable {","","  let id    : Int","  let name  : String","  let image : UIImage?","","  init(_ category: Category) {","    self.id    = category.id ?? -1","    self.name  = category.categoryName ?? \"\"","    self.image = UIImage(data: Data(category.picture ?? []))","  }","}"]},{"level":3,"text":"Map using `@dynamicMemberLookup`","anchor":"Map-using-dynamicMemberLookup","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"feature is useful during mapping, as it allows easing wrapping of existing"},{"text":" ","type":"text"},{"type":"text","text":"types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example to enhance the "},{"type":"codeVoice","code":"Category"},{"text":" structure with the additional properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but "},{"inlineContent":[{"text":"also","type":"text"}],"type":"emphasis"},{"type":"text","text":" keep the "},{"type":"codeVoice","code":"Category"},{"type":"text","text":" properties available this can be done:"}]},{"syntax":"swift","code":["@dynamicMemberLookup","struct ExtendedCategory {","  ","  let category : Category","  ","  var name  : String   { self.categoryName ?? \"\" }","  var image : UIImage? { UIImage(data: Data(self.picture ?? [])) }","  ","  subscript<V>(dynamicMember keyPath: KeyPath<Category, V>) -> V {","    category[keyPath: keyPath]","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The extended category can be used like this:","type":"text"}]},{"type":"codeListing","code":["let categories = try db.categories.fetch().map(ExtendedCategory.init)","categories[0].id    \/\/ works because of the `@dynamicMemberLookup`","categories[0].image \/\/ also works"],"syntax":"swift"}],"kind":"content"}],"references":{"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/category":{"title":"Product Category","titleInlineContent":[{"type":"text","text":"Product Category"}],"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category","type":"link"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/category/picture":{"title":"picture","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture","type":"link","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/category\/picture","titleInlineContent":[{"text":"picture","type":"text"}]},"https://www.sqlite.org/datatype3.html":{"title":"core SQLite types","titleInlineContent":[{"type":"text","text":"core SQLite types"}],"identifier":"https:\/\/www.sqlite.org\/datatype3.html","url":"https:\/\/www.sqlite.org\/datatype3.html","type":"link"},"doc://Lighter/documentation/Lighter/SQLiteValueType":{"url":"\/documentation\/lighter\/sqlitevaluetype","role":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","abstract":[{"type":"text","text":"A value that can be used in SQLite columns."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLiteValueType","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SQLiteValueType"}],"title":"SQLiteValueType","type":"topic","kind":"symbol"},"http://www.alwaysrightinstitute.com/swift-dynamic-callable/":{"title":"@dynamicMemberLookup","url":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/","type":"link","identifier":"http:\/\/www.alwaysrightinstitute.com\/swift-dynamic-callable\/","titleInlineContent":[{"code":"@dynamicMemberLookup","type":"codeVoice"}]},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","url":"\/documentation\/lighter\/configuration","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"topic","kind":"article","title":"Configuration","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Lighter.json"},{"text":" configuration file.","type":"text"}]},"doc://Lighter/documentation/Lighter/Linux":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","role":"article","url":"\/documentation\/lighter\/linux","type":"topic","abstract":[{"text":"Using Lighter on Linux.","type":"text"}],"title":"Linux"},"doc://Lighter/documentation/Lighter/Manual":{"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","title":"Manual Generation","url":"\/documentation\/lighter\/manual","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"role":"article"},"doc://Lighter/documentation/Lighter/Migrations":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","role":"article","url":"\/documentation\/lighter\/migrations","type":"topic","abstract":[{"text":"Detecting schema changes and performing schema upgrades.","type":"text"}],"title":"Migrations"},"doc://Lighter/documentation/Lighter":{"url":"\/documentation\/lighter","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Lighter\/documentation\/Lighter","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"inlineContent":[{"type":"text","text":"very"}],"type":"strong"},{"type":"text","text":", fast. Dependency free."}]},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","role":"article","url":"\/documentation\/lighter\/sqliteapi","type":"topic","abstract":[{"text":"Using the dependency-free SQLite API.","type":"text"}],"title":"Dependency-Free API"},"doc://Lighter/documentation/Lighter/Performance":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","role":"article","url":"\/documentation\/lighter\/performance","type":"topic","abstract":[{"text":"A quick look at Lighter performance.","type":"text"}],"title":"Performance"}}}