{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter and companions can generate code that depends on the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" "},{"type":"text","text":"library or dependency-free code that just uses the builtin SQLite API."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dependency-free API is more low level and follows the conventions of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/cintro.html"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"While lower level and less automatic, it is still fully type-safe down to the"},{"type":"text","text":" "},{"type":"text","text":"schema and quite usable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The dependency-free code generation has two styles:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global functions that work on record structures (default), e.g.:"}]},{"type":"codeListing","syntax":"swift","code":["func sqlite3_person_insert(_ db: OpaquePointer!, _ record: inout Person)","     -> Int32"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Record methods:"}]},{"type":"codeListing","syntax":"swift","code":["extension Person {","  mutating func insert(into db: OpaquePointer!) -> Int32","}"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Performance is the same and which style is used is just a matter of preference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this API variant does not itself deal with connection handling or"},{"type":"text","text":" "},{"type":"text","text":"async\/await."},{"type":"text","text":" "},{"type":"text","text":"It also doesn’t throw Swift errors, but relies on the same error handling like"},{"type":"text","text":" "},{"type":"text","text":"the builtin SQLite3 API."}]},{"anchor":"At-a-Glimpse","level":2,"type":"heading","text":"At a Glimpse"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"type":"text","text":" "},{"type":"text","text":"itself (e.g. "},{"type":"codeVoice","code":"Northwind"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"Product"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The database is just opened using the regular"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let db : OpaquePointer!","let rc = sqlite3_open_v2(","  \"\/tmp\/MyDatabase.db\", &db, ","  SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, nil",")","assert(rc == SQLITE_OK)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the database needs to be created, a generated function can be used:"}]},{"type":"codeListing","syntax":"swift","code":["var db : OpaquePointer!","let rc = sqlite3_create_northwind(\"\/tmp\/MyDatabase.db\", &db) \/\/ global-style","let rc = Northwind.create(\"\/tmp\/MyDatabase.db\", in: &db)     \/\/ record-style","assert(rc == SQLITE_OK)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The APIs then allow the common"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},{"type":"text","text":" on them."},{"type":"text","text":" "},{"type":"text","text":"E.g. to insert a new product into the Northwind database:"}]},{"type":"codeListing","syntax":"swift","code":["var newProduct = Product(name: \"Maple Sirup\")","sqlite3_products_insert(db, newProduct) \/\/ global-style","newProduct.insert(into: db)             \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To change it:"}]},{"type":"codeListing","syntax":"swift","code":["newProduct.name = \"Marmelade\"","sqlite3_products_update(db, newProduct) \/\/ global-style","newProduct.update(in: db)               \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To delete it:"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_products_delete(db, newProduct) \/\/ global-style","newProduct.delete(in: db)               \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetch functions are generated for database tables and views:"}]},{"type":"codeListing","syntax":"swift","code":["let allProducts = sqlite3_products_fetch(db) \/\/ global-style","let allProducts = Product.fetch(in: db)      \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If just a single record needs to be fetched by its identifier, "},{"type":"codeVoice","code":"find"},{"type":"text","text":" is used:"}]},{"type":"codeListing","syntax":"swift","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To filter a Swift closure can be used (it runs in the database):"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db) { product in","  product.name.lowercased().contains(\"e\")","}","let products = Product.fetch(in: db) { product in","  product.name.lowercased().contains(\"e\")","}"]},{"anchor":"What-is-Generated","level":2,"type":"heading","text":"What is Generated"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":", the dependency-free code generated doesn’t make"},{"type":"text","text":" "},{"type":"text","text":"the records conform to any extra protocols. The generated types become"},{"type":"text","text":" "},{"type":"text","text":"self-contained."}]},{"anchor":"Database-Structure","level":3,"type":"heading","text":"Database Structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the database file name. E.g. if it"},{"type":"text","text":" "},{"type":"text","text":"is called “northwind.db”, the default name mapping produces a structure with"},{"type":"text","text":" "},{"type":"text","text":"the name “Northwind”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the database structure can contain some"},{"type":"text","text":" "},{"type":"text","text":"supporting functions. But it doesn’t conform to any extra protocols."}]},{"anchor":"Table-and-View-Structures","level":3,"type":"heading","text":"Table and View Structures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the table name according to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default “snake_case” (e.g. "},{"type":"codeVoice","code":"product_assignment"},{"type":"text","text":") is converted to Swiftier"},{"type":"text","text":" "},{"type":"text","text":"camel case ("},{"type":"codeVoice","code":"ProductAssignment"},{"type":"text","text":"), for both the structure name as well as the"},{"type":"text","text":" "},{"type":"text","text":"property names."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the structures conforms to e.g.:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"text","text":"If the record has a primary key."},{"type":"text","text":" "},{"type":"text","text":"This is particularily useful in combination with SwiftUI, as such records can"},{"type":"text","text":" "},{"type":"text","text":"directly be used in SwiftUI Lists and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Hashable"},{"type":"text","text":": Table record structures are always Hashable as the allowed column"},{"type":"text","text":" "},{"type":"text","text":"values always are. It can be useful to compare a snapshot to the current edit"},{"type":"text","text":" "},{"type":"text","text":"state (e.g. "},{"type":"codeVoice","code":"var hasChanges : Bool { oldRecord != record }"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Codable"},{"type":"text","text":": An extra conformance in the default configuration, not needed by"},{"type":"text","text":" "},{"type":"text","text":"Lighter itself."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default Enlighter changes the name of the primary key to "},{"type":"codeVoice","code":"id"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that can be changed using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."}]},{"anchor":"Performing-Queries","level":2,"type":"heading","text":"Performing Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter generates three things for the dependency-free API:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fetch functions (e.g. "},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Product.fetch"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"find functions (e.g. "},{"type":"codeVoice","code":"sqlite3_product_find"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Product.find"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"relationship functions (e.g. "},{"type":"codeVoice","code":"sqlite3_category_find(_:for:)"},{"type":"text","text":")"}]}]}]},{"anchor":"Locating-Individual-Records","level":3,"type":"heading","text":"Locating Individual Records"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"find"},{"type":"text","text":" functions are used to locate individual records by primary key:"}]},{"type":"codeListing","syntax":"swift","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"anchor":"Filtering-Records-using-Swift","level":3,"type":"heading","text":"Filtering Records using Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated code can directly filter"},{"type":"text","text":" "},{"type":"text","text":"in the database using a Swift closure:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure receives a fully filled "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" model which it can"},{"type":"text","text":" "},{"type":"text","text":"filter w\/ arbitrary Swift code."},{"type":"text","text":" "},{"type":"text","text":"This can be important if the filtering requirements are more demanding,"},{"type":"text","text":" "},{"type":"text","text":"e.g. a SQLite "},{"type":"codeVoice","code":"LOWER"},{"type":"text","text":" function doesn’t do the same Unicode normalization the"},{"type":"text","text":" "},{"type":"text","text":"Swift "},{"type":"codeVoice","code":"lowercased()"},{"type":"text","text":" function and companions do."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Careful with reusing the same database within a filter. It is best to"},{"type":"text","text":" "},{"type":"text","text":"keep them simple."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the "},{"type":"strong","inlineContent":[{"type":"text","text":"most convenient way"}]},{"type":"text","text":" to filter which offers the broadest"},{"type":"text","text":" "},{"type":"text","text":"flexibility."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"disadvantage"}]},{"type":"text","text":" is that it can be a little "},{"type":"strong","inlineContent":[{"type":"text","text":"slower"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"SQLite can’t use database indices and a full record has to be filled for"},{"type":"text","text":" "},{"type":"text","text":"filtering."}]},{"anchor":"Sorting","level":4,"type":"heading","text":"Sorting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fetch"},{"type":"text","text":" functions come with an "},{"type":"codeVoice","code":"orderBy"},{"type":"text","text":" parameter:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db, orderBy: \"name\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The orderBy value is raw SQL and inject as-is into an "},{"type":"codeVoice","code":"ORDER BY"},{"type":"text","text":" clause."},{"type":"text","text":" "},{"type":"text","text":"E.g. to get multiple orderings or change the direction, use actual SQL:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db, orderBy: \"name ASC, age DESC\")"]},{"anchor":"Fetching-Relationships","level":3,"type":"heading","text":"Fetching Relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When Enlighter detected a relationship, it generates convenience accessors"},{"type":"text","text":" "},{"type":"text","text":"(can be disabled in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let supplier       : Supplier = ...","let relatedRecords = sqlite3_products_fetch(db, for: supplier)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other way around:"}]},{"type":"codeListing","syntax":"swift","code":["let product  : Product = ...","let supplier = sqlite3_supplier_find(db, for: product)"]},{"anchor":"Performing-raw-SQL-Queries","level":3,"type":"heading","text":"Performing raw SQL Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final escape hatch one can perform raw SQL queries:"}]},{"type":"codeListing","syntax":"swift","code":["let results = sqlite3_products_fetch(sql: \"SELECT * FROM products\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A raw fetch against a specific type (e.g. "},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":") will always"},{"type":"text","text":" "},{"type":"text","text":"return full records (e.g. "},{"type":"codeVoice","code":"Product"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This still works for fetching fragments though:"}]},{"type":"codeListing","syntax":"swift","code":["let results = sqlite3_products_fetch(sql: ","  \"SELECT id, name FROM products\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All other properties of the structure will be set to their default values (as"},{"type":"text","text":" "},{"type":"text","text":"specified in the SQL schema, or a sensible default if that isn’t available)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetching fragments like that is still reasonably fast but has a bigger"},{"type":"text","text":" "},{"type":"text","text":"associated memory cost vs a custom SQLite3 query."}]},{"anchor":"Using-SQL-Views-to-Define-Complex-Queries","level":3,"type":"heading","text":"Using SQL Views to Define Complex Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is tempting to define queries dynamically in Swift. It is often more"},{"type":"text","text":" "},{"type":"text","text":"performant to do such in SQL and use the full power of SQL built into"},{"type":"text","text":" "},{"type":"text","text":"SQLite, e.g. "},{"type":"codeVoice","code":"GROUP BY"},{"type":"text","text":", "},{"type":"codeVoice","code":"DISTINCT"},{"type":"text","text":", "},{"type":"codeVoice","code":"SUM"},{"type":"text","text":" and extensive joins."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter can’t translate plain queries yet (stay tuned), but there is an easy"},{"type":"text","text":" "},{"type":"text","text":"workaround: SQL Views. Views in the basic form are just stored queries:"}]},{"type":"codeListing","syntax":"sql","code":["CREATE VIEW [Customer and Suppliers by City] AS","  SELECT City, CompanyName, ContactName, 'Customers' AS Relationship ","    FROM Customers","  UNION ","  SELECT City, CompanyName, ContactName, 'Suppliers' ","    FROM Suppliers ","ORDER BY City, CompanyName"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Northwind comes with a set of example views, e.g."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/lighter\/sqliteapi"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Using the dependency-free SQLite API."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Dependency-Free API","role":"article","modules":[{"name":"Lighter.swift for SQLite3"}]},"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"generated":true}],"references":{"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","title":"Configuration","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","kind":"article","type":"topic","url":"\/documentation\/lighter\/configuration"},"doc://Lighter/documentation/Lighter/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"A quick look at Lighter performance."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","kind":"article","type":"topic","url":"\/documentation\/lighter\/performance"},"doc://Lighter/documentation/Lighter/Manual":{"role":"article","title":"Manual Generation","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","type":"topic","url":"\/documentation\/lighter\/manual"},"doc://Lighter/documentation/Lighter/Migrations":{"role":"article","title":"Migrations","abstract":[{"type":"text","text":"Detecting schema changes and performing schema upgrades."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","kind":"article","type":"topic","url":"\/documentation\/lighter\/migrations"},"doc://Lighter/documentation/Lighter/Mapping":{"role":"collectionGroup","title":"Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","kind":"article","type":"topic","url":"\/documentation\/lighter\/mapping"},"https://www.sqlite.org/cintro.html":{"title":"SQLite API","titleInlineContent":[{"type":"text","text":"SQLite API"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/cintro.html","url":"https:\/\/www.sqlite.org\/cintro.html"},"doc://Lighter/documentation/Lighter/LighterAPI":{"role":"collectionGroup","title":"Lighter API Overview","abstract":[{"type":"text","text":"Using the Lighter API."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","kind":"article","type":"topic","url":"\/documentation\/lighter\/lighterapi"},"doc://Lighter/documentation/Lighter":{"role":"collection","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"type":"strong","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":", fast. Dependency free."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter","kind":"symbol","type":"topic","url":"\/documentation\/lighter"},"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete":{"title":"CRUD","titleInlineContent":[{"type":"text","text":"CRUD"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","url":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},"https://developer.apple.com/documentation/swift/identifiable":{"title":"Identifiable","titleInlineContent":[{"type":"text","text":"Identifiable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","url":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/customerandsuppliersbycity":{"title":"CustomerAndSuppliersByCity","titleInlineContent":[{"type":"text","text":"CustomerAndSuppliersByCity"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},"https://www.sqlite.org/c3ref/open.html":{"title":"SQLite3 API","titleInlineContent":[{"type":"text","text":"SQLite3 API"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html","url":"https:\/\/www.sqlite.org\/c3ref\/open.html"},"doc://Lighter/documentation/Lighter/Linux":{"role":"article","title":"Linux","abstract":[{"type":"text","text":"Using Lighter on Linux."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","kind":"article","type":"topic","url":"\/documentation\/lighter\/linux"}}}