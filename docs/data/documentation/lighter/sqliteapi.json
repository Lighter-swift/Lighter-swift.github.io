{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter and companions can generate code that depends on the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" "},{"type":"text","text":"library or dependency-free code that just uses the builtin SQLite API."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dependency-free API is more low level and follows the conventions of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/cintro.html"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"While lower level and less automatic, it is still fully type-safe down to the"},{"type":"text","text":" "},{"type":"text","text":"schema and quite usable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The dependency-free code generation has two styles:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global functions that work on record structures (default), e.g.:"}]},{"type":"codeListing","syntax":"swift","code":["func sqlite3_person_insert(_ db: OpaquePointer!, _ record: inout Person)","     -> Int32"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Record methods:"}]},{"type":"codeListing","syntax":"swift","code":["extension Person {","  mutating func insert(into db: OpaquePointer!) -> Int32","}"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Performance is the same and which style is used is just a matter of preference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this API variant does not itself deal with connection handling or"},{"type":"text","text":" "},{"type":"text","text":"async\/await."},{"type":"text","text":" "},{"type":"text","text":"It also doesn’t throw Swift errors, but relies on the same error handling like"},{"type":"text","text":" "},{"type":"text","text":"the builtin SQLite3 API."}]},{"anchor":"At-a-Glimpse","level":2,"type":"heading","text":"At a Glimpse"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"type":"text","text":" "},{"type":"text","text":"itself (e.g. "},{"type":"codeVoice","code":"Northwind"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"Product"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The database is just opened using the regular"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let db : OpaquePointer!","let rc = sqlite3_open_v2(","  \"\/tmp\/MyDatabase.db\", &db, ","  SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, nil",")","assert(rc == SQLITE_OK)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the database needs to be created, a generated function can be used:"}]},{"type":"codeListing","syntax":"swift","code":["var db : OpaquePointer!","let rc = sqlite3_create_northwind(\"\/tmp\/MyDatabase.db\", &db) \/\/ global-style","let rc = Northwind.create(\"\/tmp\/MyDatabase.db\", in: &db)     \/\/ record-style","assert(rc == SQLITE_OK)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The APIs then allow the common"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},{"type":"text","text":" on them."},{"type":"text","text":" "},{"type":"text","text":"E.g. to insert a new product into the Northwind database:"}]},{"type":"codeListing","syntax":"swift","code":["var newProduct = Product(name: \"Maple Sirup\")","sqlite3_products_insert(db, newProduct) \/\/ global-style","newProduct.insert(into: db)             \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To change it:"}]},{"type":"codeListing","syntax":"swift","code":["newProduct.name = \"Marmelade\"","sqlite3_products_update(db, newProduct) \/\/ global-style","newProduct.update(in: db)               \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To delete it:"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_products_delete(db, newProduct) \/\/ global-style","newProduct.delete(in: db)               \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetch functions are generated for database tables and views:"}]},{"type":"codeListing","syntax":"swift","code":["let allProducts = sqlite3_products_fetch(db) \/\/ global-style","let allProducts = Product.fetch(in: db)      \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If just a single record needs to be fetched by its identifier, "},{"type":"codeVoice","code":"find"},{"type":"text","text":" is used:"}]},{"type":"codeListing","syntax":"swift","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To filter a Swift closure can be used:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db) { product in","  product.name.lowercased().contains(\"e\")","}","let products = Product.fetch(in: db) { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure actually runs in the database as part of the query!"},{"type":"text","text":" "},{"type":"text","text":"I.e. it is not just a fetch-all and then filter on the Swift side."}]},{"anchor":"What-is-Generated","level":2,"type":"heading","text":"What is Generated"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":", the dependency-free code generated doesn’t make"},{"type":"text","text":" "},{"type":"text","text":"the records conform to any extra protocols. The generated types become"},{"type":"text","text":" "},{"type":"text","text":"self-contained."}]},{"anchor":"Database-Structure","level":3,"type":"heading","text":"Database Structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the database file name. E.g. if it"},{"type":"text","text":" "},{"type":"text","text":"is called “northwind.db”, the default name mapping produces a structure with"},{"type":"text","text":" "},{"type":"text","text":"the name “Northwind”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the database structure can contain some"},{"type":"text","text":" "},{"type":"text","text":"supporting functions. But it doesn’t conform to any extra protocols."}]},{"anchor":"Table-and-View-Structures","level":3,"type":"heading","text":"Table and View Structures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the table name according to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default “snake_case” (e.g. "},{"type":"codeVoice","code":"product_assignment"},{"type":"text","text":") is converted to Swiftier"},{"type":"text","text":" "},{"type":"text","text":"camel case ("},{"type":"codeVoice","code":"ProductAssignment"},{"type":"text","text":"), for both the structure name as well as the"},{"type":"text","text":" "},{"type":"text","text":"property names."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the structures conforms to e.g.:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"text","text":"If the record has a primary key."},{"type":"text","text":" "},{"type":"text","text":"This is particularily useful in combination with SwiftUI, as such records can"},{"type":"text","text":" "},{"type":"text","text":"directly be used in SwiftUI Lists and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Hashable"},{"type":"text","text":": Table record structures are always Hashable as the allowed column"},{"type":"text","text":" "},{"type":"text","text":"values always are. It can be useful to compare a snapshot to the current edit"},{"type":"text","text":" "},{"type":"text","text":"state (e.g. "},{"type":"codeVoice","code":"var hasChanges : Bool { oldRecord != record }"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Codable"},{"type":"text","text":": An extra conformance in the default configuration, not needed by"},{"type":"text","text":" "},{"type":"text","text":"Lighter itself."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default Enlighter changes the name of the primary key to "},{"type":"codeVoice","code":"id"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that can be changed using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."}]},{"anchor":"Performing-Queries","level":2,"type":"heading","text":"Performing Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter generates three things for the dependency-free API:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fetch functions (e.g. "},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Product.fetch"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"find functions (e.g. "},{"type":"codeVoice","code":"sqlite3_product_find"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Product.find"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"relationship functions (e.g. "},{"type":"codeVoice","code":"sqlite3_category_find(_:for:)"},{"type":"text","text":")"}]}]}]},{"anchor":"Locating-Individual-Records","level":3,"type":"heading","text":"Locating Individual Records"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"find"},{"type":"text","text":" functions are used to locate individual records by primary key:"}]},{"type":"codeListing","syntax":"swift","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"anchor":"Filtering-Records-using-Swift","level":3,"type":"heading","text":"Filtering Records using Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated code can directly filter"},{"type":"text","text":" "},{"type":"text","text":"in the database using a Swift closure:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure receives a fully filled "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" model which it can"},{"type":"text","text":" "},{"type":"text","text":"filter w\/ arbitrary Swift code."},{"type":"text","text":" "},{"type":"text","text":"This can be important if the filtering requirements are more demanding,"},{"type":"text","text":" "},{"type":"text","text":"e.g. a SQLite "},{"type":"codeVoice","code":"LOWER"},{"type":"text","text":" function doesn’t do the same Unicode normalization the"},{"type":"text","text":" "},{"type":"text","text":"Swift "},{"type":"codeVoice","code":"lowercased()"},{"type":"text","text":" function and companions do."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Careful with reusing the same database within a filter. It is best to"},{"type":"text","text":" "},{"type":"text","text":"keep them simple."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the "},{"type":"strong","inlineContent":[{"type":"text","text":"most convenient way"}]},{"type":"text","text":" to filter which offers the broadest"},{"type":"text","text":" "},{"type":"text","text":"flexibility."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"disadvantage"}]},{"type":"text","text":" is that it can be a little "},{"type":"strong","inlineContent":[{"type":"text","text":"slower"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"SQLite can’t use database indices and a full record has to be filled for"},{"type":"text","text":" "},{"type":"text","text":"filtering."}]},{"anchor":"Sorting","level":4,"type":"heading","text":"Sorting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fetch"},{"type":"text","text":" functions come with an "},{"type":"codeVoice","code":"orderBy"},{"type":"text","text":" parameter:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db, orderBy: \"name\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The orderBy value is raw SQL and inject as-is into an "},{"type":"codeVoice","code":"ORDER BY"},{"type":"text","text":" clause."},{"type":"text","text":" "},{"type":"text","text":"E.g. to get multiple orderings or change the direction, use actual SQL:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db, orderBy: \"name ASC, age DESC\")"]},{"anchor":"Fetching-Relationships","level":3,"type":"heading","text":"Fetching Relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When Enlighter detected a relationship, it generates convenience accessors"},{"type":"text","text":" "},{"type":"text","text":"(can be disabled in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let supplier       : Supplier = ...","let relatedRecords = sqlite3_products_fetch(db, for: supplier)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other way around:"}]},{"type":"codeListing","syntax":"swift","code":["let product  : Product = ...","let supplier = sqlite3_supplier_find(db, for: product)"]},{"anchor":"Performing-raw-SQL-Queries","level":3,"type":"heading","text":"Performing raw SQL Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final escape hatch one can perform raw SQL queries:"}]},{"type":"codeListing","syntax":"swift","code":["let results = sqlite3_products_fetch(sql: ","  \"SELECT * FROM products WHERE stock_count > 10\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A raw fetch against a specific type (e.g. "},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":") will always"},{"type":"text","text":" "},{"type":"text","text":"return full records (e.g. "},{"type":"codeVoice","code":"Product"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This still works for fetching fragments though:"}]},{"type":"codeListing","syntax":"swift","code":["let results = sqlite3_products_fetch(sql: ","  \"SELECT id, name FROM products WHERE stock_count > 10\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All other properties of the structure will be set to their default values (as"},{"type":"text","text":" "},{"type":"text","text":"specified in the SQL schema, or a sensible default if that isn’t available)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetching fragments like that is still reasonably fast but has a bigger"},{"type":"text","text":" "},{"type":"text","text":"associated memory cost vs a custom SQLite3 query."}]},{"anchor":"Using-SQL-Views-to-Define-Complex-Queries","level":3,"type":"heading","text":"Using SQL Views to Define Complex Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is tempting to define queries dynamically in Swift. It is often more"},{"type":"text","text":" "},{"type":"text","text":"performant to do such in SQL and use the full power of SQL built into"},{"type":"text","text":" "},{"type":"text","text":"SQLite, e.g. "},{"type":"codeVoice","code":"GROUP BY"},{"type":"text","text":", "},{"type":"codeVoice","code":"DISTINCT"},{"type":"text","text":", "},{"type":"codeVoice","code":"SUM"},{"type":"text","text":" and extensive joins."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter can’t translate plain queries yet (stay tuned), but there is an easy"},{"type":"text","text":" "},{"type":"text","text":"workaround: SQL Views. Views in the basic form are just stored queries:"}]},{"type":"codeListing","syntax":"sql","code":["CREATE VIEW [Customer and Suppliers by City] AS","  SELECT City, CompanyName, ContactName, 'Customers' AS Relationship ","    FROM Customers","  UNION ","  SELECT City, CompanyName, ContactName, 'Suppliers' ","    FROM Suppliers ","ORDER BY City, CompanyName"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Northwind comes with a set of example views, e.g."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},{"type":"text","text":"."}]},{"anchor":"Advanced-SQLite-API","level":3,"type":"heading","text":"Advanced SQLite API"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the generated API either Swift closure based filtering can be used"},{"type":"text","text":" "},{"type":"text","text":"or a raw SQL can be initiated:"}]},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch { product in","  product.quantityPerUnit.contains(\"boxes\")","}","let results = sqlite3_products_fetch(sql: ","  \"SELECT * FROM Products WHERE QuantityPerUnit LIKE '%boxes%'\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The disadvantage of the closure solution is that a full table scan has to be"},{"type":"text","text":" "},{"type":"text","text":"performed and indices can’t be used. It "},{"type":"emphasis","inlineContent":[{"type":"text","text":"does"}]},{"type":"text","text":" run as part of the database"},{"type":"text","text":" "},{"type":"text","text":"query though (it is not a fetch-all, filter in Swift)."},{"type":"text","text":" "},{"type":"text","text":"The disadvantage of the SQL one is that the user has to do the value quoting"},{"type":"text","text":" "},{"type":"text","text":"(careful w\/ SQL injection when using "},{"type":"codeVoice","code":"sql"},{"type":"text","text":"!)"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" library, the generated dependency-free code doesn’t"},{"type":"text","text":" "},{"type":"text","text":"contain a “SQL query builder”."},{"type":"text","text":" "},{"type":"text","text":"It isn’t supposed to be a library and can only do what the SQLite API itself"},{"type":"text","text":" "},{"type":"text","text":"can do."}]}],"type":"aside","name":"Note"},{"anchor":"Parameterized-Fetches","level":4,"type":"heading","text":"Parameterized Fetches"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If parameterized SQL fetches likes this are needed (Northwind DB):"}]},{"type":"codeListing","syntax":"sql","code":["SELECT * FROM Products WHERE QuantityPerUnit LIKE ?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"… the generated code can still be used in combination w\/ the builtin"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"SQLite API"}],"isActive":true,"type":"reference","identifier":"https:\/\/www.sqlite.org\/cintro.html","overridingTitle":"SQLite API"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"First the SQL is “prepared” using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/prepare.html"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var statement : OpaquePointer?","sqlite3_prepare_v2(","  db,","  \"SELECT * FROM Products WHERE QuantityPerUnit LIKE ?\", -1,","  &statement, nil",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then the variables ("},{"type":"codeVoice","code":"?"},{"type":"text","text":" is used here) need to be bound using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html"},{"type":"text","text":" "},{"type":"text","text":"and companions:"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_bind_text(","  statement,","  1,               \/\/ the parameter index, 1-based","  \"%boxes%\", -1,   \/\/ -1 means `\\0` based C string","  SQLITE_TRANSIENT \/\/ careful w\/ Swift\/C API integration here",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally the records can be fetched in a fetch-loop using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/step.html"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var products = [ Product ]()","while sqlite3_step(statement) == SQLITE_ROW {","  products.append(Product(statement))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note how the generated “"},{"type":"codeVoice","code":"statement"},{"type":"text","text":"”-initializer for "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" "},{"type":"text","text":"can be reused for custom code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift extensions are a good way to build APIs around such code. Puttings"},{"type":"text","text":" "},{"type":"text","text":"things together:"}]},{"type":"codeListing","syntax":"swift","code":["extension Product {","","  static func fetchWhereQuantityPerUnitContains(","    _ string: String, from db: OpaquePointer!","  ) -> [ Product ]?","  {","    var statement : OpaquePointer?","    guard sqlite3_prepare_v2(","      db,","      \"SELECT * FROM Products WHERE QuantityPerUnit LIKE ?\", -1,","      &statement, nil","    ) == SQLITE3_OK else { return nil }","    defer { sqlite3_finalize(statement) }","    ","    sqlite3_bind_text(statement, 1, \"%\\(string)%\", -1, SQLITE_TRANSIENT)","    var products = [ Product ]()","    while sqlite3_step(statement) == SQLITE_ROW {","      products.append(Product(statement))","    }","    return products","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function can then be used like:"}]},{"type":"codeListing","syntax":"swift","code":["let products = ","  Product.fetchWhereQuantityPerUnitContains(\"boxes\", from: db)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If more complex code is necessary, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":" might be worth a"},{"type":"text","text":" "},{"type":"text","text":"consideration."},{"type":"text","text":" "},{"type":"text","text":"But a lot can be done using this style of access w\/o any dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A (not so) small performance improvement can be done."},{"type":"text","text":" "},{"type":"text","text":"Like most other “SQLite Libs” the generated “"},{"type":"codeVoice","code":"statement"},{"type":"text","text":"”-initializer works by"},{"type":"text","text":" "},{"type":"text","text":"looking up the columns by name in the statement. With the above this is done"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" value is initialized."},{"type":"text","text":" "},{"type":"text","text":"The generated "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLEntitySchema\/lookupColumnIndices(in:)"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"can be used to do the lookup just once:"}]},{"type":"codeListing","syntax":"swift","code":["let indices = Product.Schema.lookupColumnIndices(in: statement)","var records = [ Product ]()","while sqlite3_step(statement) == SQLITE_ROW {","  products.append(Product(statement, indices: indices))","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/sqlite.org\/c3ref\/c_static.html"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"isn’t exported by the SQLite module (generated code uses"},{"type":"text","text":" "},{"type":"text","text":"SQLITE_STATIC - a reason, why it can be faster on bind-heavy code)."},{"type":"text","text":" "},{"type":"text","text":"This can be used:"}]},{"type":"codeListing","syntax":"swift","code":["let SQLITE_TRANSIENT = unsafeBitCast(-1, to: sqlite3_destructor_type?.self)"]}],"type":"aside","name":"Note"},{"anchor":"Handling-Errors","level":4,"type":"heading","text":"Handling Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw API doesn’t throw any Swift errors, but expects the user to deal with"},{"type":"text","text":" "},{"type":"text","text":"SQLite errors as usual."},{"type":"text","text":" "},{"type":"text","text":"Described in "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/rescode.html"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, Lighter comes with a useful "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError"},{"type":"text","text":" structure that can grab the"},{"type":"text","text":" "},{"type":"text","text":"error code from a database handle."},{"type":"text","text":" "},{"type":"text","text":"When just the raw API is generated, it also gets the same "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError"},{"type":"text","text":" as part"},{"type":"text","text":" "},{"type":"text","text":"of the generated database structure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be used like this:"}]},{"type":"codeListing","syntax":"swift","code":["guard let products = sqlite3_products_fetch(","  db, sql: \"SELECT Blub FROM Missing\"",") else {","  throw SQLError(db)","}"]},{"anchor":"Partial-Fetches","level":4,"type":"heading","text":"Partial Fetches"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated structures can also be used with partial fetches"},{"type":"text","text":" "},{"type":"text","text":"which can sometimes be convenient."},{"type":"text","text":" "},{"type":"text","text":"It has a slight overhead over just extracting the values directly"},{"type":"text","text":" "},{"type":"text","text":"(because the allocated structures are larger than necessary"},{"type":"text","text":" "},{"type":"text","text":"and the default values need to be applied)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example just selecting the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_prepare_v2(","  db,","  \"\"\"","  SELECT ProductId, ProductName, QuantityPerUnit FROM Products","   WHERE QuantityPerUnit LIKE ?","  \"\"\",","  -1, &statement, nil",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can still use the generated “"},{"type":"codeVoice","code":"statement"},{"type":"text","text":"”-initializer for "},{"type":"codeVoice","code":"Product"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var records = [ ( id: Int, name: String ) ]()","while sqlite3_step(statement) == SQLITE_ROW {","  let product = Product(statement)","  records.append( ( id: product.id, name: product.productName ) )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property values that are not part of the fetch will get their “default value”"},{"type":"text","text":" "},{"type":"text","text":"if assigned in the SQLite schema, or a reasonable default for the base type"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for all optionals, "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for integers, "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" for strings.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example if the "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" table would be defined as:"}]},{"type":"codeListing","syntax":"sql","code":["CREATE TABLE Products (","  ProductId       INTEGER NOT NULL PRIMARY KEY,","  ProductName     TEXT    NOT NULL,","  QuantityPerUnit TEXT,","  CategoryId      INTEGER,","  Discontinued    BOOL NOT NULL DEFAULT 0",");"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"product"},{"type":"text","text":" value would contain "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"property (because it is optional) and"},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"discontinued"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"(because that is the specified table default value)."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"Consider creating an “SQL view” instead of manually doing partial fetches!"},{"type":"text","text":" "},{"type":"text","text":"A specific Swift structure and API will be generated for the view by Lighter."},{"type":"text","text":" "},{"type":"text","text":"Explained further up in this document."}]}],"type":"aside","name":"Important"},{"anchor":"Reusing-a-Generated-Struct-for-Multiple-Tables","level":4,"type":"heading","text":"Reusing a Generated Struct for Multiple Tables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes very large databases may want to do manual “table partitioning”,"},{"type":"text","text":" "},{"type":"text","text":"i.e. using different tables with the same schema for different datasets."},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"reference","isActive":true,"identifier":"https:\/\/shrugs.app"},{"type":"text","text":", the chat client, creates"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache"},{"type":"text","text":"\/conversation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw SQL select can be useful for such scenarios, while still using"},{"type":"text","text":" "},{"type":"text","text":"features like Swift closure filtering:"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_products_fetch(db, sql: \"SELECT * FROM Products\") {","  $0.name.hasPrefix(\"Gallions\")","}","sqlite3_products_fetch(db, sql: \"SELECT * FROM Products2022\") {","  $0.name.hasPrefix(\"Gallions\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another “hacky” variant is abusing the schema for a different table,"},{"type":"text","text":" "},{"type":"text","text":"sometimes also useful to perform migrations:"}]},{"type":"codeListing","syntax":"swift","code":["sqlite3_products_fetch(db, sql: ","  \"\"\"","  SELECT NewProductId    AS ProductId,","         NewProductTitle AS ProductName","    FROM NewProducts","  \"\"\"",")"]},{"anchor":"Opening-a-SQLite-Handle-from-a-Lighter-Structure","level":4,"type":"heading","text":"Opening a SQLite Handle from a Lighter Structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI"},{"type":"text","text":" there might sometimes still be a need to open a"},{"type":"text","text":" "},{"type":"text","text":"SQLite database handle manually."},{"type":"text","text":" "},{"type":"text","text":"To get to the active URL for a Lighter database,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLConnectionHandler\/url"},{"type":"text","text":" property of the connection handler can be used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let url = database.connectionHandler.url","var db : OpaquePointer?","let rc = sqlite3_open_v2(","  url.absoluteString, &db,","  SQLITE_OPEN_READONLY | SQLITE_OPEN_URI, nil",")","assert(rc == SQLITE_OK)","defer {","  sqlite3_close(db)","}","","let allProducts = sqlite3_products_fetch(db)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/lighter\/sqliteapi"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Using the dependency-free SQLite API."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Dependency-Free API","role":"article","modules":[{"name":"Lighter.swift for SQLite3"}]},"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"generated":true}],"references":{"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete":{"title":"CRUD","titleInlineContent":[{"type":"text","text":"CRUD"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","url":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","title":"Configuration","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","kind":"article","type":"topic","url":"\/documentation\/lighter\/configuration"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/quantityperunit/":{"title":"quantityPerUnit","titleInlineContent":[{"type":"codeVoice","code":"quantityPerUnit"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/"},"https://developer.apple.com/documentation/swift/identifiable":{"title":"Identifiable","titleInlineContent":[{"type":"text","text":"Identifiable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","url":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},"https://www.sqlite.org/cintro.html":{"title":"SQLite API","titleInlineContent":[{"type":"text","text":"SQLite API"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/cintro.html","url":"https:\/\/www.sqlite.org\/cintro.html"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/id-7350h/":{"title":"id","titleInlineContent":[{"type":"codeVoice","code":"id"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/"},"doc://Lighter/documentation/Lighter/SQLError":{"role":"symbol","title":"SQLError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLError"}],"abstract":[{"type":"text","text":"A raw SQLite3 error."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLError"}],"url":"\/documentation\/lighter\/sqlerror"},"https://sqlite.org/c3ref/c_static.html":{"title":"SQLITE_TRANSIENT","titleInlineContent":[{"type":"codeVoice","code":"SQLITE_TRANSIENT"}],"type":"link","identifier":"https:\/\/sqlite.org\/c3ref\/c_static.html","url":"https:\/\/sqlite.org\/c3ref\/c_static.html"},"https://github.com/ZeeZide/Shrugs/wiki/Querying-the-SQLite-Cache":{"title":"a message table for each channel","titleInlineContent":[{"type":"text","text":"a message table for each channel"}],"type":"link","identifier":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache","url":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/categoryid":{"title":"categoryId","titleInlineContent":[{"type":"codeVoice","code":"categoryId"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/customerandsuppliersbycity":{"title":"CustomerAndSuppliersByCity","titleInlineContent":[{"type":"text","text":"CustomerAndSuppliersByCity"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},"doc://Lighter/documentation/Lighter/LighterAPI":{"role":"collectionGroup","title":"Lighter API Overview","abstract":[{"type":"text","text":"Using the Lighter API."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","kind":"article","type":"topic","url":"\/documentation\/lighter\/lighterapi"},"https://www.sqlite.org/c3ref/step.html":{"title":"sqlite3_step","titleInlineContent":[{"type":"codeVoice","code":"sqlite3_step"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/c3ref\/step.html","url":"https:\/\/www.sqlite.org\/c3ref\/step.html"},"doc://Lighter/documentation/Lighter/SQLEntitySchema/lookupColumnIndices(in:)":{"role":"symbol","title":"lookupColumnIndices(in:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lookupColumnIndices"},{"kind":"text","text":"("},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":"!) -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"PropertyIndices"}],"abstract":[{"type":"text","text":"Given a SQLite prepared statement handle, this looks up the property"},{"type":"text","text":" "},{"type":"text","text":"indices by external name (SQL column name)."},{"type":"text","text":" "},{"type":"text","text":"This is used as a fallback when the SQL input is dynamic (i.e. not a"},{"type":"text","text":" "},{"type":"text","text":"code generated statement)."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLEntitySchema\/lookupColumnIndices(in:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/lighter\/sqlentityschema\/lookupcolumnindices(in:)"},"https://www.sqlite.org/c3ref/prepare.html":{"title":"sqlite3_prepare_v2","titleInlineContent":[{"type":"text","text":"sqlite3_prepare_v2"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/c3ref\/prepare.html","url":"https:\/\/www.sqlite.org\/c3ref\/prepare.html"},"https://www.sqlite.org/rescode.html":{"title":"Result and Error Codes","titleInlineContent":[{"type":"text","text":"Result and Error Codes"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/rescode.html","url":"https:\/\/www.sqlite.org\/rescode.html"},"doc://Lighter/documentation/Lighter/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"A quick look at Lighter performance."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","kind":"article","type":"topic","url":"\/documentation\/lighter\/performance"},"https://www.sqlite.org/c3ref/open.html":{"title":"SQLite3 API","titleInlineContent":[{"type":"text","text":"SQLite3 API"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html","url":"https:\/\/www.sqlite.org\/c3ref\/open.html"},"doc://Lighter/documentation/Lighter/Linux":{"role":"article","title":"Linux","abstract":[{"type":"text","text":"Using Lighter on Linux."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","kind":"article","type":"topic","url":"\/documentation\/lighter\/linux"},"https://www.sqlite.org/c3ref/bind_blob.html":{"title":"sqlite3_bind_text","titleInlineContent":[{"type":"text","text":"sqlite3_bind_text"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html","url":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html"},"doc://Lighter/documentation/Lighter/SQLConnectionHandler/url":{"role":"symbol","title":"url","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"url"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"}],"abstract":[],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLConnectionHandler\/url","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlconnectionhandler\/url"},"doc://Lighter/documentation/Lighter":{"role":"collection","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"type":"strong","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":", fast. Dependency free."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter","kind":"symbol","type":"topic","url":"\/documentation\/lighter"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/productname/":{"title":"name","titleInlineContent":[{"type":"codeVoice","code":"name"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/"},"doc://Lighter/documentation/Lighter/Mapping":{"role":"collectionGroup","title":"Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","kind":"article","type":"topic","url":"\/documentation\/lighter\/mapping"},"https://shrugs.app":{"title":"Shrugs.app","titleInlineContent":[{"type":"text","text":"Shrugs.app"}],"type":"link","identifier":"https:\/\/shrugs.app","url":"https:\/\/shrugs.app"},"doc://Lighter/documentation/Lighter/Manual":{"role":"article","title":"Manual Generation","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","type":"topic","url":"\/documentation\/lighter\/manual"},"doc://Lighter/documentation/Lighter/Migrations":{"role":"article","title":"Migrations","abstract":[{"type":"text","text":"Detecting schema changes and performing schema upgrades."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","kind":"article","type":"topic","url":"\/documentation\/lighter\/migrations"}}}