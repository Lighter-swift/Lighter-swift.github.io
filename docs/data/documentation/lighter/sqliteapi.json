{"abstract":[{"text":"Using the dependency-free SQLite API.","type":"text"}],"metadata":{"modules":[{"name":"Lighter.swift for SQLite3"}],"role":"article","title":"Dependency-Free API","roleHeading":"Article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Configuration","doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"]}],"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter and companions can generate code that depends on the "},{"type":"codeVoice","code":"Lighter"},{"text":" ","type":"text"},{"text":"library or dependency-free code that just uses the builtin SQLite API.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This dependency-free API is more low level and follows the conventions of the"},{"type":"text","text":" "},{"identifier":"https:\/\/www.sqlite.org\/cintro.html","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"While lower level and less automatic, it is still fully type-safe down to the"},{"type":"text","text":" "},{"text":"schema and quite usable.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The dependency-free code generation has two styles:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Global functions that work on record structures (default), e.g.:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func sqlite3_person_insert(_ db: OpaquePointer!, _ record: inout Person)","     -> Int32"]}]},{"content":[{"inlineContent":[{"type":"text","text":"Record methods:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Person {","  mutating func insert(into db: OpaquePointer!) -> Int32","}"]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Performance is the same and which style is used is just a matter of preference."}]},{"inlineContent":[{"type":"text","text":"Unlike "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","isActive":true,"type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this API variant does not itself deal with connection handling or"},{"text":" ","type":"text"},{"type":"text","text":"async\/await."},{"type":"text","text":" "},{"text":"It also doesn’t throw Swift errors, but relies on the same error handling like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the builtin SQLite3 API."}],"type":"paragraph"},{"anchor":"At-a-Glimpse","type":"heading","text":"At a Glimpse","level":2},{"inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"text":" ","type":"text"},{"type":"text","text":"itself (e.g. "},{"type":"codeVoice","code":"Northwind"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"Product"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The database is just opened using the regular"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html","isActive":true},{"text":":","type":"text"}]},{"syntax":"swift","code":["let db : OpaquePointer!","let rc = sqlite3_open_v2(","  \"\/tmp\/MyDatabase.db\", &db, ","  SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, nil",")","assert(rc == SQLITE_OK)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If the database needs to be created, a generated function can be used:","type":"text"}]},{"syntax":"swift","code":["var db : OpaquePointer!","let rc = sqlite3_create_northwind(\"\/tmp\/MyDatabase.db\", &db) \/\/ global-style","let rc = Northwind.create(\"\/tmp\/MyDatabase.db\", in: &db)     \/\/ record-style","assert(rc == SQLITE_OK)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The APIs then allow the common","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","isActive":true},{"text":" on them.","type":"text"},{"type":"text","text":" "},{"text":"E.g. to insert a new product into the Northwind database:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var newProduct = Product(name: \"Maple Sirup\")","sqlite3_products_insert(db, newProduct) \/\/ global-style","newProduct.insert(into: db)             \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To change it:"}]},{"code":["newProduct.name = \"Marmelade\"","sqlite3_products_update(db, newProduct) \/\/ global-style","newProduct.update(in: db)               \/\/ record-style"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To delete it:"}]},{"code":["sqlite3_products_delete(db, newProduct) \/\/ global-style","newProduct.delete(in: db)               \/\/ record-style"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetch functions are generated for database tables and views:"}]},{"code":["let allProducts = sqlite3_products_fetch(db) \/\/ global-style","let allProducts = Product.fetch(in: db)      \/\/ record-style"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If just a single record needs to be fetched by its identifier, "},{"type":"codeVoice","code":"find"},{"type":"text","text":" is used:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To filter a Swift closure can be used:"}]},{"syntax":"swift","code":["let products = sqlite3_products_fetch(db) { product in","  product.name.lowercased().contains(\"e\")","}","let products = Product.fetch(in: db) { product in","  product.name.lowercased().contains(\"e\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The closure actually runs in the database as part of the query!"},{"type":"text","text":" "},{"text":"I.e. it is not just a fetch-all and then filter on the Swift side.","type":"text"}],"type":"paragraph"},{"level":2,"text":"What is Generated","type":"heading","anchor":"What-is-Generated"},{"type":"paragraph","inlineContent":[{"text":"Unlike the ","type":"text"},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","isActive":true,"type":"reference"},{"text":", the dependency-free code generated doesn’t make","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the records conform to any extra protocols. The generated types become"},{"type":"text","text":" "},{"type":"text","text":"self-contained."}]},{"level":3,"type":"heading","text":"Database Structure","anchor":"Database-Structure"},{"inlineContent":[{"type":"text","text":"The name of the structure is derived from the database file name. E.g. if it"},{"type":"text","text":" "},{"type":"text","text":"is called “northwind.db”, the default name mapping produces a structure with"},{"type":"text","text":" "},{"type":"text","text":"the name “Northwind”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Depending on the ","type":"text"},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true,"type":"reference"},{"type":"text","text":", the database structure can contain some"},{"type":"text","text":" "},{"text":"supporting functions. But it doesn’t conform to any extra protocols.","type":"text"}]},{"level":3,"text":"Table and View Structures","anchor":"Table-and-View-Structures","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The name of the structure is derived from the table name according to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"By default “snake_case” (e.g. ","type":"text"},{"code":"product_assignment","type":"codeVoice"},{"type":"text","text":") is converted to Swiftier"},{"type":"text","text":" "},{"type":"text","text":"camel case ("},{"type":"codeVoice","code":"ProductAssignment"},{"text":"), for both the structure name as well as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"property names."}]},{"inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true},{"text":", the structures conforms to e.g.:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","type":"reference","isActive":true},{"type":"text","text":":"},{"text":" ","type":"text"},{"type":"text","text":"If the record has a primary key."},{"type":"text","text":" "},{"type":"text","text":"This is particularily useful in combination with SwiftUI, as such records can"},{"type":"text","text":" "},{"type":"text","text":"directly be used in SwiftUI Lists and more."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Hashable"},{"type":"text","text":": Table record structures are always Hashable as the allowed column"},{"text":" ","type":"text"},{"type":"text","text":"values always are. It can be useful to compare a snapshot to the current edit"},{"type":"text","text":" "},{"type":"text","text":"state (e.g. "},{"type":"codeVoice","code":"var hasChanges : Bool { oldRecord != record }"},{"text":").","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Codable"},{"text":": An extra conformance in the default configuration, not needed by","type":"text"},{"text":" ","type":"text"},{"text":"Lighter itself.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"By default Enlighter changes the name of the primary key to ","type":"text"},{"type":"codeVoice","code":"id"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that can be changed using the "},{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"reference"},{"type":"text","text":"."}]},{"level":2,"anchor":"Performing-Queries","text":"Performing Queries","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enlighter generates three things for the dependency-free API:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"fetch functions (e.g. ","type":"text"},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Product.fetch"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"text":"find functions (e.g. ","type":"text"},{"code":"sqlite3_product_find","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Product.find"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"relationship functions (e.g. "},{"type":"codeVoice","code":"sqlite3_category_find(_:for:)"},{"type":"text","text":")"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Locating Individual Records","type":"heading","anchor":"Locating-Individual-Records","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"find","type":"codeVoice"},{"text":" functions are used to locate individual records by primary key:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let product31 = sqlite3_product_find(db, 31) \/\/ global-style","let product31 = Product.find(31, in: db)     \/\/ record-style"]},{"level":3,"anchor":"Filtering-Records-using-Swift","text":"Filtering Records using Swift","type":"heading"},{"inlineContent":[{"type":"text","text":"The generated code can directly filter"},{"text":" ","type":"text"},{"text":"in the database using a Swift closure:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"text":"The closure receives a fully filled ","type":"text"},{"type":"codeVoice","code":"Product"},{"type":"text","text":" model which it can"},{"text":" ","type":"text"},{"type":"text","text":"filter w\/ arbitrary Swift code."},{"text":" ","type":"text"},{"text":"This can be important if the filtering requirements are more demanding,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"e.g. a SQLite "},{"code":"LOWER","type":"codeVoice"},{"text":" function doesn’t do the same Unicode normalization the","type":"text"},{"type":"text","text":" "},{"text":"Swift ","type":"text"},{"type":"codeVoice","code":"lowercased()"},{"text":" function and companions do.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Careful with reusing the same database within a filter. It is best to","type":"text"},{"text":" ","type":"text"},{"text":"keep them simple.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the "},{"type":"strong","inlineContent":[{"type":"text","text":"most convenient way"}]},{"type":"text","text":" to filter which offers the broadest"},{"text":" ","type":"text"},{"text":"flexibility.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"disadvantage"}],"type":"strong"},{"type":"text","text":" is that it can be a little "},{"type":"strong","inlineContent":[{"type":"text","text":"slower"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"SQLite can’t use database indices and a full record has to be filled for","type":"text"},{"text":" ","type":"text"},{"text":"filtering.","type":"text"}]},{"level":4,"text":"Sorting","anchor":"Sorting","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"fetch","type":"codeVoice"},{"type":"text","text":" functions come with an "},{"code":"orderBy","type":"codeVoice"},{"type":"text","text":" parameter:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let products = sqlite3_products_fetch(db, orderBy: \"name\")"]},{"inlineContent":[{"text":"The orderBy value is raw SQL and inject as-is into an ","type":"text"},{"type":"codeVoice","code":"ORDER BY"},{"type":"text","text":" clause."},{"text":" ","type":"text"},{"type":"text","text":"E.g. to get multiple orderings or change the direction, use actual SQL:"}],"type":"paragraph"},{"type":"codeListing","code":["let products = sqlite3_products_fetch(db, orderBy: \"name ASC, age DESC\")"],"syntax":"swift"},{"anchor":"Fetching-Relationships","text":"Fetching Relationships","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"When Enlighter detected a relationship, it generates convenience accessors"},{"text":" ","type":"text"},{"text":"(can be disabled in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"reference"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let supplier       : Supplier = ...","let relatedRecords = sqlite3_products_fetch(db, for: supplier)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other way around:"}]},{"type":"codeListing","syntax":"swift","code":["let product  : Product = ...","let supplier = sqlite3_supplier_find(db, for: product)"]},{"level":3,"type":"heading","anchor":"Performing-raw-SQL-Queries","text":"Performing raw SQL Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final escape hatch one can perform raw SQL queries:"}]},{"type":"codeListing","syntax":"swift","code":["let results = sqlite3_products_fetch(sql: ","  \"SELECT * FROM products WHERE stock_count > 10\"",")"]},{"type":"paragraph","inlineContent":[{"text":"A raw fetch against a specific type (e.g. ","type":"text"},{"type":"codeVoice","code":"sqlite3_products_fetch"},{"type":"text","text":") will always"},{"text":" ","type":"text"},{"text":"return full records (e.g. ","type":"text"},{"type":"codeVoice","code":"Product"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This still works for fetching fragments though:"}]},{"code":["let results = sqlite3_products_fetch(sql: ","  \"SELECT id, name FROM products WHERE stock_count > 10\"",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"All other properties of the structure will be set to their default values (as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified in the SQL schema, or a sensible default if that isn’t available)."}]},{"type":"paragraph","inlineContent":[{"text":"Fetching fragments like that is still reasonably fast but has a bigger","type":"text"},{"type":"text","text":" "},{"text":"associated memory cost vs a custom SQLite3 query.","type":"text"}]},{"text":"Using SQL Views to Define Complex Queries","level":3,"type":"heading","anchor":"Using-SQL-Views-to-Define-Complex-Queries"},{"inlineContent":[{"type":"text","text":"It is tempting to define queries dynamically in Swift. It is often more"},{"type":"text","text":" "},{"type":"text","text":"performant to do such in SQL and use the full power of SQL built into"},{"text":" ","type":"text"},{"text":"SQLite, e.g. ","type":"text"},{"code":"GROUP BY","type":"codeVoice"},{"type":"text","text":", "},{"code":"DISTINCT","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"SUM"},{"type":"text","text":" and extensive joins."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter can’t translate plain queries yet (stay tuned), but there is an easy"},{"type":"text","text":" "},{"type":"text","text":"workaround: SQL Views. Views in the basic form are just stored queries:"}]},{"code":["CREATE VIEW [Customer and Suppliers by City] AS","  SELECT City, CompanyName, ContactName, 'Customers' AS Relationship ","    FROM Customers","  UNION ","  SELECT City, CompanyName, ContactName, 'Suppliers' ","    FROM Suppliers ","ORDER BY City, CompanyName"],"type":"codeListing","syntax":"sql"},{"inlineContent":[{"type":"text","text":"Northwind comes with a set of example views, e.g."},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Advanced-SQLite-API","type":"heading","text":"Advanced SQLite API"},{"type":"paragraph","inlineContent":[{"text":"In the generated API either Swift closure based filtering can be used","type":"text"},{"type":"text","text":" "},{"text":"or a raw SQL can be initiated:","type":"text"}]},{"code":["let products = sqlite3_products_fetch { product in","  product.quantityPerUnit.contains(\"boxes\")","}","let results = sqlite3_products_fetch(sql: ","  \"SELECT * FROM Products WHERE QuantityPerUnit LIKE '%boxes%'\"",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The disadvantage of the closure solution is that a full table scan has to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"performed and indices can’t be used. It "},{"type":"emphasis","inlineContent":[{"text":"does","type":"text"}]},{"type":"text","text":" run as part of the database"},{"text":" ","type":"text"},{"text":"query though (it is not a fetch-all, filter in Swift).","type":"text"},{"text":" ","type":"text"},{"text":"The disadvantage of the SQL one is that the user has to do the value quoting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(careful w\/ SQL injection when using "},{"code":"sql","type":"codeVoice"},{"type":"text","text":"!)"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Unlike the ","type":"text"},{"code":"Lighter","type":"codeVoice"},{"text":" library, the generated dependency-free code doesn’t","type":"text"},{"text":" ","type":"text"},{"text":"contain a “SQL query builder”.","type":"text"},{"text":" ","type":"text"},{"text":"It isn’t supposed to be a library and can only do what the SQLite API itself","type":"text"},{"text":" ","type":"text"},{"text":"can do.","type":"text"}]}],"name":"Note"},{"anchor":"Parameterized-Fetches","level":4,"type":"heading","text":"Parameterized Fetches"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If parameterized SQL fetches likes this are needed (Northwind DB):"}]},{"type":"codeListing","code":["SELECT * FROM Products WHERE QuantityPerUnit LIKE ?"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"type":"text","text":"… the generated code can still be used in combination w\/ the builtin"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.sqlite.org\/cintro.html","overridingTitle":"SQLite API","overridingTitleInlineContent":[{"text":"SQLite API","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"First the SQL is “prepared” using"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/prepare.html","type":"reference"},{"type":"text","text":":"}]},{"syntax":"swift","code":["var statement : OpaquePointer?","sqlite3_prepare_v2(","  db,","  \"SELECT * FROM Products WHERE QuantityPerUnit LIKE ?\", -1,","  &statement, nil",")"],"type":"codeListing"},{"inlineContent":[{"text":"Then the variables (","type":"text"},{"type":"codeVoice","code":"?"},{"text":" is used here) need to be bound using","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html","type":"reference"},{"type":"text","text":" "},{"text":"and companions:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["sqlite3_bind_text(","  statement,","  1,               \/\/ the parameter index, 1-based","  \"%boxes%\", -1,   \/\/ -1 means `\\0` based C string","  SQLITE_TRANSIENT \/\/ careful w\/ Swift\/C API integration here",")"]},{"inlineContent":[{"type":"text","text":"And finally the records can be fetched in a fetch-loop using"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.sqlite.org\/c3ref\/step.html","type":"reference","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var products = [ Product ]()","while sqlite3_step(statement) == SQLITE_ROW {","  products.append(Product(statement))","}"]},{"type":"paragraph","inlineContent":[{"text":"Note how the generated “","type":"text"},{"code":"statement","type":"codeVoice"},{"type":"text","text":"”-initializer for "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" "},{"text":"can be reused for custom code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift extensions are a good way to build APIs around such code. Puttings"},{"text":" ","type":"text"},{"text":"things together:","type":"text"}]},{"syntax":"swift","code":["extension Product {","","  static func fetchWhereQuantityPerUnitContains(","    _ string: String, from db: OpaquePointer!","  ) -> [ Product ]?","  {","    var statement : OpaquePointer?","    guard sqlite3_prepare_v2(","      db,","      \"SELECT * FROM Products WHERE QuantityPerUnit LIKE ?\", -1,","      &statement, nil","    ) == SQLITE3_OK else { return nil }","    defer { sqlite3_finalize(statement) }","    ","    sqlite3_bind_text(statement, 1, \"%\\(string)%\", -1, SQLITE_TRANSIENT)","    var products = [ Product ]()","    while sqlite3_step(statement) == SQLITE_ROW {","      products.append(Product(statement))","    }","    return products","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The function can then be used like:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let products = ","  Product.fetchWhereQuantityPerUnitContains(\"boxes\", from: db)"]},{"inlineContent":[{"type":"text","text":"If more complex code is necessary, the "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","isActive":true},{"type":"text","text":" might be worth a"},{"type":"text","text":" "},{"text":"consideration.","type":"text"},{"type":"text","text":" "},{"text":"But a lot can be done using this style of access w\/o any dependencies.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A (not so) small performance improvement can be done.","type":"text"},{"text":" ","type":"text"},{"text":"Like most other “SQLite Libs” the generated “","type":"text"},{"type":"codeVoice","code":"statement"},{"text":"”-initializer works by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"looking up the columns by name in the statement. With the above this is done"},{"text":" ","type":"text"},{"text":"each time the ","type":"text"},{"type":"codeVoice","code":"Product"},{"type":"text","text":" value is initialized."},{"type":"text","text":" "},{"text":"The generated ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLEntitySchema\/lookupColumnIndices(in:)"},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"can be used to do the lookup just once:","type":"text"}]},{"code":["let indices = Product.Schema.lookupColumnIndices(in: statement)","var records = [ Product ]()","while sqlite3_step(statement) == SQLITE_ROW {","  products.append(Product(statement, indices: indices))","}"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/sqlite.org\/c3ref\/c_static.html","isActive":true},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"isn’t exported by the SQLite module (generated code uses","type":"text"},{"type":"text","text":" "},{"text":"SQLITE_STATIC - a reason, why it can be faster on bind-heavy code).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This can be used:"}],"type":"paragraph"},{"code":["let SQLITE_TRANSIENT = unsafeBitCast(-1, to: sqlite3_destructor_type?.self)"],"syntax":"swift","type":"codeListing"}],"type":"aside"},{"text":"Handling Errors","level":4,"anchor":"Handling-Errors","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw API doesn’t throw any Swift errors, but expects the user to deal with"},{"type":"text","text":" "},{"type":"text","text":"SQLite errors as usual."},{"text":" ","type":"text"},{"text":"Described in ","type":"text"},{"identifier":"https:\/\/www.sqlite.org\/rescode.html","type":"reference","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, Lighter comes with a useful "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError","isActive":true,"type":"reference"},{"type":"text","text":" structure that can grab the"},{"type":"text","text":" "},{"type":"text","text":"error code from a database handle."},{"type":"text","text":" "},{"text":"When just the raw API is generated, it also gets the same ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError"},{"type":"text","text":" as part"},{"text":" ","type":"text"},{"type":"text","text":"of the generated database structure."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It can be used like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["guard let products = sqlite3_products_fetch(","  db, sql: \"SELECT Blub FROM Missing\"",") else {","  throw SQLError(db)","}"]},{"anchor":"Partial-Fetches","text":"Partial Fetches","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated structures can also be used with partial fetches"},{"type":"text","text":" "},{"text":"which can sometimes be convenient.","type":"text"},{"type":"text","text":" "},{"text":"It has a slight overhead over just extracting the values directly","type":"text"},{"text":" ","type":"text"},{"text":"(because the allocated structures are larger than necessary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the default values need to be applied)."}]},{"inlineContent":[{"text":"An example just selecting the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/","isActive":true},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"and the"},{"text":" ","type":"text"},{"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["sqlite3_prepare_v2(","  db,","  \"\"\"","  SELECT ProductId, ProductName, QuantityPerUnit FROM Products","   WHERE QuantityPerUnit LIKE ?","  \"\"\",","  -1, &statement, nil",")"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This can still use the generated “"},{"code":"statement","type":"codeVoice"},{"type":"text","text":"”-initializer for "},{"code":"Product","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["var records = [ ( id: Int, name: String ) ]()","while sqlite3_step(statement) == SQLITE_ROW {","  let product = Product(statement)","  records.append( ( id: product.id, name: product.productName ) )","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Property values that are not part of the fetch will get their “default value”"},{"type":"text","text":" "},{"type":"text","text":"if assigned in the SQLite schema, or a reasonable default for the base type"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"nil"},{"text":" for all optionals, ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" for integers, "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" for strings.)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example if the "},{"code":"Product","type":"codeVoice"},{"type":"text","text":" table would be defined as:"}],"type":"paragraph"},{"type":"codeListing","syntax":"sql","code":["CREATE TABLE Products (","  ProductId       INTEGER NOT NULL PRIMARY KEY,","  ProductName     TEXT    NOT NULL,","  QuantityPerUnit TEXT,","  CategoryId      INTEGER,","  Discontinued    BOOL NOT NULL DEFAULT 0",");"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"product"},{"text":" value would contain ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"property (because it is optional) and"},{"type":"text","text":" "},{"type":"codeVoice","code":"0"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"discontinued"},{"text":" property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(because that is the specified table default value)."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"Consider creating an “SQL view” instead of manually doing partial fetches!"},{"text":" ","type":"text"},{"type":"text","text":"A specific Swift structure and API will be generated for the view by Lighter."},{"text":" ","type":"text"},{"type":"text","text":"Explained further up in this document."}]}],"name":"Important","style":"important"},{"type":"heading","level":4,"anchor":"Reusing-a-Generated-Struct-for-Multiple-Tables","text":"Reusing a Generated Struct for Multiple Tables"},{"type":"paragraph","inlineContent":[{"text":"Sometimes very large databases may want to do manual “table partitioning”,","type":"text"},{"text":" ","type":"text"},{"text":"i.e. using different tables with the same schema for different datasets.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example "},{"identifier":"https:\/\/shrugs.app","isActive":true,"type":"reference"},{"type":"text","text":", the chat client, creates"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache","isActive":true},{"text":"\/conversation.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The raw SQL select can be useful for such scenarios, while still using"},{"type":"text","text":" "},{"type":"text","text":"features like Swift closure filtering:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["sqlite3_products_fetch(db, sql: \"SELECT * FROM Products\") {","  $0.name.hasPrefix(\"Gallions\")","}","sqlite3_products_fetch(db, sql: \"SELECT * FROM Products2022\") {","  $0.name.hasPrefix(\"Gallions\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another “hacky” variant is abusing the schema for a different table,"},{"text":" ","type":"text"},{"type":"text","text":"sometimes also useful to perform migrations:"}]},{"code":["sqlite3_products_fetch(db, sql: ","  \"\"\"","  SELECT NewProductId    AS ProductId,","         NewProductTitle AS ProductName","    FROM NewProducts","  \"\"\"",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Opening-a-SQLite-Handle-from-a-Lighter-Structure","level":4,"text":"Opening a SQLite Handle from a Lighter Structure","type":"heading"},{"inlineContent":[{"type":"text","text":"When using the "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","isActive":true},{"text":" there might sometimes still be a need to open a","type":"text"},{"type":"text","text":" "},{"text":"SQLite database handle manually.","type":"text"},{"text":" ","type":"text"},{"text":"To get to the active URL for a Lighter database,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLConnectionHandler\/url","isActive":true},{"text":" property of the connection handler can be used.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"code":["let url = database.connectionHandler.url","var db : OpaquePointer?","let rc = sqlite3_open_v2(","  url.absoluteString, &db,","  SQLITE_OPEN_READONLY | SQLITE_OPEN_URI, nil",")","assert(rc == SQLITE_OK)","defer {","  sqlite3_close(db)","}","","let allProducts = sqlite3_products_fetch(db)"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lighter\/sqliteapi"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI"},"kind":"article","references":{"https://developer.apple.com/documentation/swift/identifiable":{"title":"Identifiable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","url":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","type":"link","titleInlineContent":[{"type":"text","text":"Identifiable"}]},"https://www.sqlite.org/c3ref/step.html":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"sqlite3_step"}],"identifier":"https:\/\/www.sqlite.org\/c3ref\/step.html","title":"sqlite3_step","url":"https:\/\/www.sqlite.org\/c3ref\/step.html"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","url":"\/documentation\/lighter\/configuration","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"topic","kind":"article","title":"Configuration","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Lighter.json"},{"text":" configuration file.","type":"text"}]},"https://www.sqlite.org/c3ref/open.html":{"title":"SQLite3 API","identifier":"https:\/\/www.sqlite.org\/c3ref\/open.html","url":"https:\/\/www.sqlite.org\/c3ref\/open.html","type":"link","titleInlineContent":[{"type":"text","text":"SQLite3 API"}]},"https://www.sqlite.org/rescode.html":{"type":"link","titleInlineContent":[{"type":"text","text":"Result and Error Codes"}],"identifier":"https:\/\/www.sqlite.org\/rescode.html","title":"Result and Error Codes","url":"https:\/\/www.sqlite.org\/rescode.html"},"https://www.sqlite.org/cintro.html":{"identifier":"https:\/\/www.sqlite.org\/cintro.html","titleInlineContent":[{"type":"text","text":"SQLite API"}],"url":"https:\/\/www.sqlite.org\/cintro.html","title":"SQLite API","type":"link"},"doc://Lighter/documentation/Lighter/SQLConnectionHandler/url":{"type":"topic","abstract":[],"title":"url","kind":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLConnectionHandler\/url","url":"\/documentation\/lighter\/sqlconnectionhandler\/url","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"url"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"}]},"https://www.sqlite.org/c3ref/bind_blob.html":{"type":"link","titleInlineContent":[{"type":"text","text":"sqlite3_bind_text"}],"identifier":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html","title":"sqlite3_bind_text","url":"https:\/\/www.sqlite.org\/c3ref\/bind_blob.html"},"doc://Lighter/documentation/Lighter":{"url":"\/documentation\/lighter","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Lighter\/documentation\/Lighter","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"inlineContent":[{"type":"text","text":"very"}],"type":"strong"},{"type":"text","text":", fast. Dependency free."}]},"doc://Lighter/documentation/Lighter/LighterAPI":{"abstract":[{"text":"Using the Lighter API.","type":"text"}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/lighter\/lighterapi","title":"Lighter API Overview"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/id-7350h/":{"title":"id","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/id-7350h\/","type":"link","titleInlineContent":[{"type":"codeVoice","code":"id"}]},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/categoryid":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"categoryId"}],"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid","title":"categoryId","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/categoryid"},"https://www.sqlite.org/c3ref/prepare.html":{"title":"sqlite3_prepare_v2","identifier":"https:\/\/www.sqlite.org\/c3ref\/prepare.html","url":"https:\/\/www.sqlite.org\/c3ref\/prepare.html","type":"link","titleInlineContent":[{"type":"text","text":"sqlite3_prepare_v2"}]},"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete":{"type":"link","titleInlineContent":[{"type":"text","text":"CRUD"}],"identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","title":"CRUD","url":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},"doc://Lighter/documentation/Lighter/Migrations":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","role":"article","url":"\/documentation\/lighter\/migrations","type":"topic","abstract":[{"text":"Detecting schema changes and performing schema upgrades.","type":"text"}],"title":"Migrations"},"https://shrugs.app":{"title":"Shrugs.app","identifier":"https:\/\/shrugs.app","url":"https:\/\/shrugs.app","type":"link","titleInlineContent":[{"type":"text","text":"Shrugs.app"}]},"https://sqlite.org/c3ref/c_static.html":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"SQLITE_TRANSIENT"}],"identifier":"https:\/\/sqlite.org\/c3ref\/c_static.html","title":"SQLITE_TRANSIENT","url":"https:\/\/sqlite.org\/c3ref\/c_static.html"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/customerandsuppliersbycity":{"title":"CustomerAndSuppliersByCity","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","type":"link","titleInlineContent":[{"type":"text","text":"CustomerAndSuppliersByCity"}]},"doc://Lighter/documentation/Lighter/Linux":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","role":"article","url":"\/documentation\/lighter\/linux","type":"topic","abstract":[{"text":"Using Lighter on Linux.","type":"text"}],"title":"Linux"},"doc://Lighter/documentation/Lighter/Performance":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","role":"article","url":"\/documentation\/lighter\/performance","type":"topic","abstract":[{"text":"A quick look at Lighter performance.","type":"text"}],"title":"Performance"},"https://github.com/ZeeZide/Shrugs/wiki/Querying-the-SQLite-Cache":{"type":"link","titleInlineContent":[{"type":"text","text":"a message table for each channel"}],"identifier":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache","title":"a message table for each channel","url":"https:\/\/github.com\/ZeeZide\/Shrugs\/wiki\/Querying-the-SQLite-Cache"},"doc://Lighter/documentation/Lighter/SQLError":{"navigatorTitle":[{"kind":"identifier","text":"SQLError"}],"kind":"symbol","type":"topic","title":"SQLError","url":"\/documentation\/lighter\/sqlerror","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SQLError","kind":"identifier"}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLError","abstract":[{"type":"text","text":"A raw SQLite3 error."}],"role":"symbol"},"doc://Lighter/documentation/Lighter/Manual":{"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","title":"Manual Generation","url":"\/documentation\/lighter\/manual","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"role":"article"},"doc://Lighter/documentation/Lighter/Mapping":{"url":"\/documentation\/lighter\/mapping","role":"collectionGroup","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"title":"Mapping","type":"topic","kind":"article"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/quantityperunit/":{"title":"quantityPerUnit","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/quantityperunit\/","type":"link","titleInlineContent":[{"type":"codeVoice","code":"quantityPerUnit"}]},"doc://Lighter/documentation/Lighter/SQLEntitySchema/lookupColumnIndices(in:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lookupColumnIndices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"in","kind":"externalParam"},{"kind":"text","text":": "},{"text":"OpaquePointer","kind":"typeIdentifier","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":"!) -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"PropertyIndices","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/lighter\/sqlentityschema\/lookupcolumnindices(in:)","title":"lookupColumnIndices(in:)","kind":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLEntitySchema\/lookupColumnIndices(in:)","abstract":[{"type":"text","text":"Given a SQLite prepared statement handle, this looks up the property"},{"type":"text","text":" "},{"type":"text","text":"indices by external name (SQL column name)."},{"type":"text","text":" "},{"text":"This is used as a fallback when the SQL input is dynamic (i.e. not a","type":"text"},{"type":"text","text":" "},{"text":"code generated statement).","type":"text"}],"required":true},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product/productname/":{"title":"name","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product\/productname\/","type":"link","titleInlineContent":[{"type":"codeVoice","code":"name"}]}}}