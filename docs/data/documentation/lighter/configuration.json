{"metadata":{"role":"article","roleHeading":"Article","title":"Configuration","modules":[{"name":"Lighter.swift for SQLite3"}]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Introduction","text":"Introduction"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generator can be configured by placing a JSON file called"},{"type":"text","text":" "},{"code":"Lighter.json","type":"codeVoice"},{"type":"text","text":" in the root of the project (either Xcode project or"},{"type":"text","text":" "},{"type":"text","text":"SPM package)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The configurations has five main areas:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Global:            Detected file extensions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"CodeStyle","type":"codeVoice"},{"type":"text","text":":       Style and Formatting, Tabs or Spaces?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"EmbeddedLighter","type":"codeVoice"},{"type":"text","text":": Control generation of variadic functions ("},{"type":"codeVoice","code":"select"},{"type":"text","text":" etc)."}]}]},{"content":[{"inlineContent":[{"code":"SwiftMapping","type":"codeVoice"},{"type":"text","text":":    Mapping SQL tables to Swift types and names."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"CodeGeneration"},{"type":"text","text":":  How to write the mapped schema to Swift."}],"type":"paragraph"}]}]},{"anchor":"Per-Target-and-per-Database-Configuration","level":3,"text":"Per Target and per Database Configuration","type":"heading"},{"inlineContent":[{"text":"All sections except global can be overridden on a per-target basis by including","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the target name as a subsection, and then optionally the database name."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In example below there is a specific configuration for the"},{"text":" ","type":"text"},{"code":"ContactsTestDB","type":"codeVoice"},{"text":" target.","type":"text"},{"text":" ","type":"text"},{"text":"E.g. it overrides ","type":"text"},{"code":"EmbeddedLighter","type":"codeVoice"},{"type":"text","text":" not to use an embedded Lighter API."},{"type":"text","text":" "},{"type":"text","text":"And then it overrides things for the "},{"type":"codeVoice","code":"OtherDB"},{"text":" database within that","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EmbeddedLighter"},{"type":"text","text":" target, e.g. not to generate the “raw” API."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ],","  ","  \"CodeStyle\": {","    \"functionCommentStyle\" : \"**\",","    \"indent\"               : \"  \",","    \"lineLength\"           : 80","  },","  \"EmbeddedLighter\": {","    \"inserts\": 6","  },","  ","  \"ContactsTestDB\": {","    \"EmbeddedLighter\": null,","    ","    \"OtherDB\": {","      \"CodeStyle\": {","        \"comments\": {","          \"types\"      : \"\",","          \"properties\" : \"\",","          \"functions\"  : \"\"","        }","      },","      \"CodeGeneration\": {","        \"Raw\"                            : \"none\",","        \"readOnly\"                       : true,","        \"generateAsyncFunctions\"         : false,","        \"embedRecordTypesInDatabaseType\" : true","      }","    }","  }","}"]},{"type":"heading","anchor":"Global","text":"Global","level":3},{"type":"paragraph","inlineContent":[{"text":"At the root two keys can exist:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"databaseExtensions","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"sqlExtensions"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Both are arrays of strings which contains the respective file extensions and","type":"text"},{"type":"text","text":" "},{"text":"are used by the plugins to locate input files.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ]","}"],"type":"codeListing"},{"type":"heading","level":3,"text":"CodeStyle","anchor":"CodeStyle"},{"inlineContent":[{"text":"Style and Formatting, Tabs or Spaces?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"code":["\"CodeStyle\": {","  \"comments\"   : { \"functions\": \"**\" },","  \"indent\"     : \"  \",","  \"lineLength\" : 80","}"],"type":"codeListing","syntax":"json"},{"inlineContent":[{"type":"text","text":"The available comment styles are:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"**","type":"codeVoice"},{"type":"text","text":": DocC comments like those:"}]},{"type":"codeListing","code":["\/**"," * A type"," *\/","struct Person {...}"],"syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"\/\/\/"},{"type":"text","text":": DocC comments like those:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/\/ A primary key","var id : ID { ... }"]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"*","type":"codeVoice"},{"text":": Non-DocC comments:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/*"," * A type"," *\/","struct Person {...}"]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"\/\/"},{"type":"text","text":": Non-DocC comments:"}],"type":"paragraph"},{"code":["\/\/ A primary key","var id : ID { ... }"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"\"\"","type":"codeVoice"},{"type":"text","text":" (empty, no comments)"}]}]}]},{"inlineContent":[{"type":"text","text":"Keys:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"comments","type":"codeVoice"},{"text":"  (Dictionary): The comment styles for various Swift things:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"types"},{"type":"text","text":"       (String): Comment style for structures and classes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"properties","type":"codeVoice"},{"type":"text","text":"  (String): Comment style for Swift properties."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"functions","type":"codeVoice"},{"text":"   (String): Comment style for Swift functions.","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"comments","type":"codeVoice"},{"type":"text","text":"      (String): The comment styles to use for everything."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"indent"},{"text":" (String or Int): If a string, use that for indenting (e.g. ","type":"text"},{"type":"codeVoice","code":"\"\\t\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"if a number, the number of spaces to use.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"lineLength"},{"text":"       (Int): The suggested maximum line length (not guaranteed).","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"neverInline"},{"type":"text","text":"     (Bool): If true, nothing is marked "},{"type":"codeVoice","code":"@inlinable"},{"text":".","type":"text"}]}]}]},{"level":3,"text":"EmbeddedLighter","anchor":"EmbeddedLighter","type":"heading"},{"inlineContent":[{"type":"text","text":"Control generation of variadic functions ("},{"code":"select","type":"codeVoice"},{"text":" etc).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This is only used within Lighter itself at this time. It configures the number","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of variadic functions that are generated for "},{"code":"select","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"update"},{"type":"text","text":" and "},{"code":"insert","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","level":3,"anchor":"SwiftMapping","text":"SwiftMapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mapping SQL tables to Swift types and names."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"databaseTypeName"},{"type":"text","text":" (String): Can be used to set the type of the database"},{"type":"text","text":" "},{"type":"text","text":"structure. Normally derived from the input filenames."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"databaseTypeName","type":"codeVoice"},{"text":" (Dictionary): How to derive the database structure name","type":"text"},{"type":"text","text":" "},{"text":"from filenames:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"dropFileExtensions","type":"codeVoice"},{"type":"text","text":" (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"capitalize","type":"codeVoice"},{"text":" (Bool): E.g. ","type":"text"},{"code":"person.db","type":"codeVoice"},{"text":" becomes ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"camelCase","type":"codeVoice"},{"text":"  (Bool): E.g. ","type":"text"},{"code":"person_database.sql","type":"codeVoice"},{"type":"text","text":" becomes "},{"code":"PersonDatabase","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"code":"recordTypeNames","type":"codeVoice"},{"type":"text","text":" (Dictionary): Configure the names of the record structures"},{"text":" ","type":"text"},{"text":"that are generated (from table and view names):","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"singularize","type":"codeVoice"},{"text":" (Bool): ","type":"text"},{"code":"Orders","type":"codeVoice"},{"type":"text","text":" => "},{"type":"codeVoice","code":"Order"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"capitalize","type":"codeVoice"},{"type":"text","text":"  (Bool): "},{"code":"orders","type":"codeVoice"},{"text":" => ","type":"text"},{"code":"Orders","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"camelCase","type":"codeVoice"},{"type":"text","text":"   (Bool): "},{"type":"codeVoice","code":"order_assignments"},{"type":"text","text":" => "},{"type":"codeVoice","code":"OrderAssignments"},{"type":"text","text":"."}]}]}]}]},{"content":[{"inlineContent":[{"code":"recordReferenceNames","type":"codeVoice"},{"text":" (Dictionary): Configure the names of record","type":"text"},{"type":"text","text":" "},{"text":"“references”. This is what is used to access the tables from the database,","type":"text"},{"text":" ","type":"text"},{"text":"like ","type":"text"},{"type":"codeVoice","code":"db.people.find"},{"text":" (the ","type":"text"},{"type":"codeVoice","code":"people"},{"type":"text","text":"):"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"decapitalize","type":"codeVoice"},{"text":": ","type":"text"},{"type":"codeVoice","code":"Orders"},{"type":"text","text":" => "},{"code":"orders","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"pluralize","type":"codeVoice"},{"type":"text","text":":    "},{"code":"person","type":"codeVoice"},{"type":"text","text":" => "},{"type":"codeVoice","code":"people"},{"type":"text","text":"."}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"propertyNames"},{"text":" (Dictionary): Configure the names of the properties generated","type":"text"},{"type":"text","text":" "},{"text":"for database columns:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"decapitalize","type":"codeVoice"},{"text":" (Bool): ","type":"text"},{"type":"codeVoice","code":"OrderId"},{"text":" => ","type":"text"},{"code":"orderId","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"camelCase"},{"type":"text","text":"    (Bool): "},{"type":"codeVoice","code":"person_id"},{"text":" => ","type":"text"},{"type":"codeVoice","code":"personId"},{"type":"text","text":"."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"keys","type":"codeVoice"},{"text":" (Dictionary): Configure primary and foreign key detection:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"primaryKeyName","type":"codeVoice"},{"text":": Whether to use a single fixed property name (e.g. ","type":"text"},{"type":"codeVoice","code":"id"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for all non-compound primary keys."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"autodetect","type":"codeVoice"},{"text":" (Array of Strings): The names by which keys are detected,","type":"text"},{"text":" ","type":"text"},{"text":"defaults to “id”, “ID”, “Id”, “pkey”, “primaryKey”, “PrimaryKey”, “key”, “Key”.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"autodetectWithTableName","type":"codeVoice"},{"type":"text","text":"      (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"autodetectForeignKeys"},{"text":"        (Bool)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"autodetectForeignKeysInViews"},{"type":"text","text":" (Bool)"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"relationships","type":"codeVoice"},{"type":"text","text":": Whether relationships should be derived from foreign keys"},{"text":" ","type":"text"},{"text":"and how:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"deriveFromForeignKeys"},{"type":"text","text":" (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"strippedForeignKeySuffixes","type":"codeVoice"},{"text":" (Array of Strings)","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"typeMap"},{"type":"text","text":" (Dictionary): This is used to map SQL types to Foundation types,"},{"type":"text","text":" "},{"text":"or actually any type that implements ","type":"text"},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For example "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" to "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"When using Lighter own types can be added by implementing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"columnSuffixToType","type":"codeVoice"},{"text":" (Dictionary): Similar to ","type":"text"},{"type":"codeVoice","code":"typeMap"},{"type":"text","text":", this matches"},{"text":" ","type":"text"},{"text":"against the name of a column to define the type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"codeVoice","code":"_date"},{"type":"text","text":" could be mapped to "},{"type":"codeVoice","code":"Date"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"start_date"},{"type":"text","text":", "},{"type":"codeVoice","code":"end_date"},{"type":"text","text":" "},{"type":"text","text":"etc would all be generated as "},{"type":"codeVoice","code":"Date"},{"text":" values.","type":"text"}]}]}]},{"anchor":"CodeGeneration","text":"CodeGeneration","type":"heading","level":3},{"inlineContent":[{"text":"How to write the mapped schema to Swift.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"omitCreationSQL","type":"codeVoice"},{"text":" (Bool):","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Whether the SQL to create the database should be included."},{"text":" ","type":"text"},{"type":"text","text":"That is "},{"type":"codeVoice","code":"CREATE TABLE"},{"text":", ","type":"text"},{"code":"CREATE VIEW","type":"codeVoice"},{"text":", … statements.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It sames some space to disable those if Swift isn’t used to bootstrap SQL"},{"text":" ","type":"text"},{"type":"text","text":"database from scratch (vs. copying them from a file)."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"readOnly"},{"type":"text","text":" (Bool): Only generate read operations. I.e. there will be no"},{"type":"text","text":" "},{"code":"update","type":"codeVoice"},{"text":", ","type":"text"},{"code":"delete","type":"codeVoice"},{"type":"text","text":" or "},{"code":"insert","type":"codeVoice"},{"text":" operations.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Useful if a database is just shipped as a backing resource, e.g. a set of"},{"text":" ","type":"text"},{"type":"text","text":"product descriptions, countries, and so on. Saves on the codesize and makes"},{"type":"text","text":" "},{"type":"text","text":"sure that no accidential modifications are possible."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"generateAsyncFunctions"},{"type":"text","text":" (Bool):"},{"text":" ","type":"text"},{"text":"Generate async\/await Lighter conformances (if ","type":"text"},{"type":"codeVoice","code":"useLighter"},{"text":" is enabled).","type":"text"},{"type":"text","text":" "},{"text":"This is only available for Lighter, not the dependency free API.","type":"text"},{"text":" ","type":"text"},{"text":"It allows calling Lighter APIs using the new Swift 5.5 async\/await feature.","type":"text"},{"type":"text","text":" "},{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let products = try await db.products.fetch { $0.age < 10 }","try await db.transaction { tx in","  try tx.products.delete(10)","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"embedRecordTypesInDatabaseType"},{"text":" (Bool):","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Whether record types should be generated as subtypes of the database types."},{"text":" ","type":"text"},{"text":"Example if ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["struct TestDatabase {","  struct Person: TableRecord { ... }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example if "},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct TestDatabase {","}","struct Person: TableRecord { ... }"]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"public"},{"text":" (Bool):","type":"text"},{"text":" ","type":"text"},{"text":"Whether the API should be generated as ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":" API (vs "},{"code":"internal","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"Example if ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct TestDatabase {","  public struct Person: TableRecord { ... }","}"]},{"inlineContent":[{"text":"Example if ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["struct TestDatabase {","  struct Person: TableRecord { ... }","}"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"inlinable"},{"text":" (Bool):","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Whether public functions should be generated as "},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This exposes the function sources in the module header, which is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"good for the Swift optimizer. Example:"}]},{"code":["@inlinable","public init(id: String, name: String, ...)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"allowFoundation"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether "},{"code":"Foundation","type":"codeVoice"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":", "},{"code":"URL","type":"codeVoice"},{"type":"text","text":" or "},{"code":"Data","type":"codeVoice"},{"text":" can be used.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It can be useful to disable this in some server deployment scenarios, e.g."},{"type":"text","text":" "},{"text":"when using AWS Lambda.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"dateSerialization"},{"type":"text","text":" (String):"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"formatter\""},{"type":"text","text":", "},{"code":"\"text\"","type":"codeVoice"},{"type":"text","text":" or "},{"code":"\"string\"","type":"codeVoice"},{"type":"text","text":", Foundation "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"type":"text","text":"will be stored as "},{"code":"TEXT","type":"codeVoice"},{"type":"text","text":" in the SQL database. E.g. "},{"type":"codeVoice","code":"\"1973-01-31 12:12:12\""},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If set to ","type":"text"},{"type":"codeVoice","code":"\"timestamp\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"utime\""},{"text":" or ","type":"text"},{"code":"\"timeintervalsince1970\"","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Foundation "},{"code":"Date","type":"codeVoice"},{"text":" values will be stored as ","type":"text"},{"code":"REAL","type":"codeVoice"},{"text":" values (doubles),","type":"text"},{"text":" ","type":"text"},{"text":"storing the seconds since 1970 (a Unix timestamp).","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"dateFormat"},{"text":" (String):","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is used in circumstances when Foundation "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" values are either"},{"type":"text","text":" "},{"type":"text","text":"generated as textual values for columns ("},{"type":"codeVoice","code":"dateSerialization"},{"type":"text","text":" is "},{"type":"codeVoice","code":".formatter"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"or when String values are returned by the database and need to be parsed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The default SQLite date format is "},{"type":"codeVoice","code":"\"1973-01-31 12:12:12\""},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note: "},{"type":"codeVoice","code":"DateFormatter"},{"text":" is quite slow in parsing, if performance is a concern","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prefer to store dates as timestamps."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uuidSerialization"},{"text":" (String): (default is ","type":"text"},{"code":"BLOB","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This isn’t used if "},{"type":"codeVoice","code":"useSQLiteValueTypeBinds"},{"type":"text","text":" is on and Lighter is being used"},{"text":" ","type":"text"},{"type":"text","text":"(set the "},{"type":"codeVoice","code":"UUID.sqlUUIDStorageStyle"},{"text":" in that mode).","type":"text"}]},{"syntax":"json","code":["{ \"__doc__\": \"Lighter.json sample\",","  \"CodeGeneration\": { \"uuidSerialization\": \"text\" }","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"text\""},{"type":"text","text":", "},{"code":"\"string\"","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"\"readable\"","type":"codeVoice"},{"text":", Foundation ","type":"text"},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" values"},{"type":"text","text":" "},{"text":"will be stored as ","type":"text"},{"type":"codeVoice","code":"TEXT"},{"text":" in the SQL database","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"code":"B7D94E7E-EEE3-4E0A-A927-90748B73AA30","type":"codeVoice"},{"type":"text","text":", 36 ASCII characters)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"blob\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"bytes\""},{"type":"text","text":" or "},{"code":"\"data\"","type":"codeVoice"},{"text":", ","type":"text"},{"code":"UUID","type":"codeVoice"},{"type":"text","text":" values will be stored as"},{"type":"text","text":" "},{"text":"compact, 16-byte ","type":"text"},{"type":"codeVoice","code":"uuid_t"},{"type":"text","text":" values. I.e. in a more compact manner that"},{"text":" ","type":"text"},{"text":"requires no parsing.","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"recordTypeAliasSuffix"},{"text":" (optional String):","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is used for the case when reference names (like "},{"code":"\\.person","type":"codeVoice"},{"type":"text","text":") match"},{"type":"text","text":" "},{"type":"text","text":"the type name (e.g. "},{"type":"codeVoice","code":"person"},{"text":"). Rare, but can happen.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this case a "},{"code":"personRecordType","type":"codeVoice"},{"text":" alias would be generated (with ","type":"text"},{"code":"RecordType","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"being the configured suffix)."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"showViewHintComment"},{"text":" (Bool):","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Can be used to disable the hints to use"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.sqlite.org\/lang_createview.html"},{"text":" ","type":"text"},{"type":"text","text":"to define complex queries (only shown if views are not used already)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"commentsWithSQL","type":"codeVoice"},{"text":" (Bool):","type":"text"},{"text":" ","type":"text"},{"text":"Whether the SQL used to create a table is put into the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"documentation","type":"text"}]},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"text","text":"associated structure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"qualifiedSelf","type":"codeVoice"},{"type":"text","text":" (Bool):"},{"text":" ","type":"text"},{"type":"text","text":"Whether properties should be accessed using "},{"code":"self.property","type":"codeVoice"},{"text":" instead of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implicit "},{"type":"codeVoice","code":"property"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"extraRecordConformances"},{"text":" (Array of Strings):","type":"text"},{"type":"text","text":" "},{"text":"This is by default set to ","type":"text"},{"type":"codeVoice","code":"[ \"Codable\" ]"},{"text":". It specified additional protocols","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the generated records should conform to (apart from Lighter generated ones)."},{"type":"text","text":" "},{"type":"text","text":"Note that "},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"text":" are usually automatic (if applicable).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"swiftFilters"},{"text":" (Bool):","type":"text"},{"text":" ","type":"text"},{"text":"Whether Swift filter matcher should be generated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(I.e. the ability to use a regular Swift closure instead of a SQL where"},{"type":"text","text":" "},{"text":"qualifier).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"propertyIndexPrefix"},{"type":"text","text":" (String):"},{"text":" ","type":"text"},{"type":"text","text":"Each table gets a specific "},{"code":"PropertyIndicies","type":"codeVoice"},{"type":"text","text":" tuple type assigned. It contains"},{"text":" ","type":"text"},{"type":"text","text":"the static (bind, value or argument) position of each property in a query."},{"text":" ","type":"text"},{"type":"text","text":"It looks like "},{"code":"PropertyIndicies = ( idx_id, idx_name, idx_city )","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This option configures the prefix of those tuple members (","type":"text"},{"type":"codeVoice","code":"idx_"},{"type":"text","text":" by default)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"optionalHelpersInDatabase"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Instead of creating them as local functions, put helper functions into the"},{"text":" ","type":"text"},{"type":"text","text":"Database object as static methods."},{"type":"text","text":" "},{"text":"It is useful to keep them locally, if the generated struct is just","type":"text"},{"type":"text","text":" "},{"text":"intended for copy&paste use (because the source is becomes self-contained).","type":"text"}]}]}]},{"text":"Subsection `Lighter`","type":"heading","anchor":"Subsection-Lighter","level":4},{"inlineContent":[{"text":"If the ","type":"text"},{"code":"Lighter","type":"codeVoice"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"none\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"no\""},{"text":", ","type":"text"},{"code":"\"false\"","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"null","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the API depending on the "},{"code":"Lighter","type":"codeVoice"},{"text":" support library is not generated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This mostly affects conformances\/mixins which provide the extra functionalities."},{"text":" ","type":"text"},{"type":"text","text":"For example the records won’t be marked as "},{"code":"SQLTableRecord","type":"codeVoice"},{"text":" etc.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If the ","type":"text"},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"use\""},{"text":" or ","type":"text"},{"code":"\"yes\"","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"\"import\""},{"text":" or ","type":"text"},{"type":"codeVoice","code":"\"reexport\""},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Lighter"},{"text":" conformances will be generated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If it is "},{"type":"codeVoice","code":"\"import\""},{"text":" the ","type":"text"},{"code":"Lighter","type":"codeVoice"},{"text":" lib will be imported as usual, if set to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"reexport\""},{"type":"text","text":" it will be re-exported as part of the current module"},{"type":"text","text":" "},{"type":"text","text":"(Useful if the package\/target is itself a library providing access to a"},{"text":" ","type":"text"},{"text":"database, the consumer won’t have to import ","type":"text"},{"code":"Lighter","type":"codeVoice"},{"type":"text","text":" separately)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the key is a dictionary again, it’ll enable Lighter and contain those"},{"type":"text","text":" "},{"type":"text","text":"subkeys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"import","type":"codeVoice"},{"text":" (String or Bool): The import style as described above.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reexport"},{"type":"text","text":" (Bool): Whether to re-export Lighter APIs."}]}]},{"content":[{"inlineContent":[{"code":"relationships","type":"codeVoice"},{"text":" (Bool): Whether to generate specific functions to follow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"relationship (e.g. "},{"code":"db.orders.fetch(for: product","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"useSQLiteValueTypeBinds","type":"codeVoice"},{"text":" (Bool): Whether the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","isActive":true},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"text":"should be used to bind values (vs code generating the static type).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Examples"},{"type":"text","text":" (dictionary): Single bool subkey: "},{"code":"select","type":"codeVoice"},{"type":"text","text":", whether select"},{"type":"text","text":" "},{"type":"text","text":"examples should be included in the documentation."}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Subsection-Raw","text":"Subsection `Raw`","level":4},{"inlineContent":[{"text":"If the ","type":"text"},{"type":"codeVoice","code":"Raw"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"none\""},{"text":", ","type":"text"},{"type":"codeVoice","code":"\"omit\""},{"text":" or ","type":"text"},{"code":"null","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the dependency free, lower level SQLite API is not generated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"sqlite3_fetch_people()"},{"type":"text","text":" etc)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If it key is set to ","type":"text"},{"type":"codeVoice","code":"\"RecordType\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"attachToRecordType\""},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the low level API will be generated as methods on the structures.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"E.g. instead of a global "},{"type":"codeVoice","code":"sqlite3_fetch_people()"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"type":"text","text":"the generator will generate:"}]},{"code":["extension Person {","  static func fetch(in database: OpaquePointer) -> [ Person ] {...}","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the key is set to another string, it’ll be used as the prefix of the"},{"text":" ","type":"text"},{"text":"global functions (defaults to ","type":"text"},{"code":"\"sqlite3_\"","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"E.g. when set to ","type":"text"},{"type":"codeVoice","code":"\"mydb_\""},{"type":"text","text":", the function names would be "},{"type":"codeVoice","code":"mydb_people_fetch()"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"mydb_person_insert()","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If the key is a dictionary again, it contains those subkeys:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"prefix"},{"type":"text","text":": The global function name prefix like described above, if empty or"},{"text":" ","type":"text"},{"text":"missing, the functions will be attached to the record.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"relationships"},{"text":": Whether functions to fetch foreign keys should be generated.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"hashable"},{"type":"text","text":":      Whether the record structures should be marked as "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"type":"heading","text":"Complete Example","anchor":"Complete-Example","level":3},{"syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ],","  ","  \"CodeStyle\": {","    \"functionCommentStyle\" : \"**\",","    \"indent\"               : \"  \",","    \"lineLength\"           : 80","  },","  ","  \"ContactsTestDB\": {","    \"EmbeddedLighter\": null,","    ","    \"CodeGeneration\": {","      \"Lighter\": {","        \"__doc__\":","          \"Can use re-export to re-export Lighter API as part of the DB.\",","        \"import\": \"import\"","      }","    },","    ","    \"OtherDB\": {","      \"CodeStyle\": {","        \"comments\": {","          \"types\"      : \"\",","          \"properties\" : \"\",","          \"functions\"  : \"\"","        }","      },","      \"CodeGeneration\": {","        \"Raw\"                            : \"none\",","        \"readOnly\"                       : true,","        \"generateAsyncFunctions\"         : false,","        \"embedRecordTypesInDatabaseType\" : true","      }","    }","  },","  ","  \"EmbeddedLighter\": {","    \"selects\": {","      \"syncYield\"  : \"none\",","      \"syncArray\"  : { \"columns\": 6, \"sorts\": 2 },","      \"asyncArray\" : { \"columns\": 6, \"sorts\": 2 }","    },","    \"updates\": {","      \"keyBased\"       : 6,","      \"predicateBased\" : 6","    },","    \"inserts\": 6","  }","}"],"type":"codeListing"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"sections":[],"variants":[{"paths":["\/documentation\/lighter\/configuration"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"title":"Advanced"}],"references":{"doc://Lighter/documentation/Lighter/Performance":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","role":"article","url":"\/documentation\/lighter\/performance","type":"topic","abstract":[{"text":"A quick look at Lighter performance.","type":"text"}],"title":"Performance"},"doc://Lighter/documentation/Lighter/Migrations":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","role":"article","url":"\/documentation\/lighter\/migrations","type":"topic","abstract":[{"text":"Detecting schema changes and performing schema upgrades.","type":"text"}],"title":"Migrations"},"doc://Lighter/documentation/Lighter":{"url":"\/documentation\/lighter","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Lighter\/documentation\/Lighter","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"inlineContent":[{"type":"text","text":"very"}],"type":"strong"},{"type":"text","text":", fast. Dependency free."}]},"doc://Lighter/documentation/Lighter/Manual":{"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","title":"Manual Generation","url":"\/documentation\/lighter\/manual","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"role":"article"},"https://www.sqlite.org/lang_createview.html":{"type":"link","title":"SQL Views","identifier":"https:\/\/www.sqlite.org\/lang_createview.html","url":"https:\/\/www.sqlite.org\/lang_createview.html","titleInlineContent":[{"text":"SQL Views","type":"text"}]},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","role":"article","url":"\/documentation\/lighter\/sqliteapi","type":"topic","abstract":[{"text":"Using the dependency-free SQLite API.","type":"text"}],"title":"Dependency-Free API"},"doc://Lighter/documentation/Lighter/Mapping":{"url":"\/documentation\/lighter\/mapping","role":"collectionGroup","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"title":"Mapping","type":"topic","kind":"article"},"doc://Lighter/documentation/Lighter/SQLiteValueType":{"url":"\/documentation\/lighter\/sqlitevaluetype","role":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","abstract":[{"type":"text","text":"A value that can be used in SQLite columns."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLiteValueType","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SQLiteValueType"}],"title":"SQLiteValueType","type":"topic","kind":"symbol"},"doc://Lighter/documentation/Lighter/Linux":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","role":"article","url":"\/documentation\/lighter\/linux","type":"topic","abstract":[{"text":"Using Lighter on Linux.","type":"text"}],"title":"Linux"}}}