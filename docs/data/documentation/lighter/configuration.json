{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Introduction","level":2,"type":"heading","text":"Introduction"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generator can be configured by placing a JSON file called"},{"type":"text","text":" "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" in the root of the project (either Xcode project or"},{"type":"text","text":" "},{"type":"text","text":"SPM package)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The configurations has five main areas:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global:            Detected file extensions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CodeStyle"},{"type":"text","text":":       Style and Formatting, Tabs or Spaces?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EmbeddedLighter"},{"type":"text","text":": Control generation of variadic functions ("},{"type":"codeVoice","code":"select"},{"type":"text","text":" etc)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SwiftMapping"},{"type":"text","text":":    Mapping SQL tables to Swift types and names."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CodeGeneration"},{"type":"text","text":":  How to write the mapped schema to Swift."}]}]}]},{"anchor":"Per-Target-and-per-Database-Configuration","level":3,"type":"heading","text":"Per Target and per Database Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All sections except global can be overridden on a per-target basis by including"},{"type":"text","text":" "},{"type":"text","text":"the target name as a subsection, and then optionally the database name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In example below there is a specific configuration for the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsTestDB"},{"type":"text","text":" target."},{"type":"text","text":" "},{"type":"text","text":"E.g. it overrides "},{"type":"codeVoice","code":"EmbeddedLighter"},{"type":"text","text":" not to use an embedded Lighter API."},{"type":"text","text":" "},{"type":"text","text":"And then it overrides things for the "},{"type":"codeVoice","code":"OtherDB"},{"type":"text","text":" database within that"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedLighter"},{"type":"text","text":" target, e.g. not to generate the “raw” API."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ],","  ","  \"CodeStyle\": {","    \"functionCommentStyle\" : \"**\",","    \"indent\"               : \"  \",","    \"lineLength\"           : 80","  },","  \"EmbeddedLighter\": {","    \"inserts\": 6","  },","  ","  \"ContactsTestDB\": {","    \"EmbeddedLighter\": null,","    ","    \"OtherDB\": {","      \"CodeStyle\": {","        \"comments\": {","          \"types\"      : \"\",","          \"properties\" : \"\",","          \"functions\"  : \"\"","        }","      },","      \"CodeGeneration\": {","        \"Raw\"                            : \"none\",","        \"readOnly\"                       : true,","        \"generateAsyncFunctions\"         : false,","        \"embedRecordTypesInDatabaseType\" : true","      }","    }","  }","}"]},{"anchor":"Global","level":3,"type":"heading","text":"Global"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At the root two keys can exist:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"databaseExtensions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqlExtensions"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both are arrays of strings which contains the respective file extensions and"},{"type":"text","text":" "},{"type":"text","text":"are used by the plugins to locate input files."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ]","}"]},{"anchor":"CodeStyle","level":3,"type":"heading","text":"CodeStyle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Style and Formatting, Tabs or Spaces?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"json","code":["\"CodeStyle\": {","  \"comments\"   : { \"functions\": \"**\" },","  \"indent\"     : \"  \",","  \"lineLength\" : 80","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The available comment styles are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"**"},{"type":"text","text":": DocC comments like those:"}]},{"type":"codeListing","syntax":"swift","code":["\/**"," * A type"," *\/","struct Person {...}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"\/\/\/"},{"type":"text","text":": DocC comments like those:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ A primary key","var id : ID { ... }"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"*"},{"type":"text","text":": Non-DocC comments:"}]},{"type":"codeListing","syntax":"swift","code":["\/*"," * A type"," *\/","struct Person {...}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"\/\/"},{"type":"text","text":": Non-DocC comments:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ A primary key","var id : ID { ... }"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"\"\""},{"type":"text","text":" (empty, no comments)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"comments"},{"type":"text","text":"  (Dictionary): The comment styles for various Swift things:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"types"},{"type":"text","text":"       (String): Comment style for structures and classes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"properties"},{"type":"text","text":"  (String): Comment style for Swift properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"functions"},{"type":"text","text":"   (String): Comment style for Swift functions."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"comments"},{"type":"text","text":"      (String): The comment styles to use for everything."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"indent"},{"type":"text","text":" (String or Int): If a string, use that for indenting (e.g. "},{"type":"codeVoice","code":"\"\\t\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"if a number, the number of spaces to use."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lineLength"},{"type":"text","text":"       (Int): The suggested maximum line length (not guaranteed)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"neverInline"},{"type":"text","text":"     (Bool): If true, nothing is marked "},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":"."}]}]}]},{"anchor":"EmbeddedLighter","level":3,"type":"heading","text":"EmbeddedLighter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control generation of variadic functions ("},{"type":"codeVoice","code":"select"},{"type":"text","text":" etc)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is only used within Lighter itself at this time. It configures the number"},{"type":"text","text":" "},{"type":"text","text":"of variadic functions that are generated for "},{"type":"codeVoice","code":"select"},{"type":"text","text":", "},{"type":"codeVoice","code":"update"},{"type":"text","text":" and "},{"type":"codeVoice","code":"insert"},{"type":"text","text":"."}]},{"anchor":"SwiftMapping","level":3,"type":"heading","text":"SwiftMapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mapping SQL tables to Swift types and names."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"databaseTypeName"},{"type":"text","text":" (String): Can be used to set the type of the database"},{"type":"text","text":" "},{"type":"text","text":"structure. Normally derived from the input filenames."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"databaseTypeName"},{"type":"text","text":" (Dictionary): How to derive the database structure name"},{"type":"text","text":" "},{"type":"text","text":"from filenames:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"dropFileExtensions"},{"type":"text","text":" (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"capitalize"},{"type":"text","text":" (Bool): E.g. "},{"type":"codeVoice","code":"person.db"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"Person"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"camelCase"},{"type":"text","text":"  (Bool): E.g. "},{"type":"codeVoice","code":"person_database.sql"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"PersonDatabase"},{"type":"text","text":"."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"recordTypeNames"},{"type":"text","text":" (Dictionary): Configure the names of the record structures"},{"type":"text","text":" "},{"type":"text","text":"that are generated (from table and view names):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"singularize"},{"type":"text","text":" (Bool): "},{"type":"codeVoice","code":"Orders"},{"type":"text","text":" => "},{"type":"codeVoice","code":"Order"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"capitalize"},{"type":"text","text":"  (Bool): "},{"type":"codeVoice","code":"orders"},{"type":"text","text":" => "},{"type":"codeVoice","code":"Orders"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"camelCase"},{"type":"text","text":"   (Bool): "},{"type":"codeVoice","code":"order_assignments"},{"type":"text","text":" => "},{"type":"codeVoice","code":"OrderAssignments"},{"type":"text","text":"."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"recordReferenceNames"},{"type":"text","text":" (Dictionary): Configure the names of record"},{"type":"text","text":" "},{"type":"text","text":"“references”. This is what is used to access the tables from the database,"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"db.people.find"},{"type":"text","text":" (the "},{"type":"codeVoice","code":"people"},{"type":"text","text":"):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"decapitalize"},{"type":"text","text":": "},{"type":"codeVoice","code":"Orders"},{"type":"text","text":" => "},{"type":"codeVoice","code":"orders"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"pluralize"},{"type":"text","text":":    "},{"type":"codeVoice","code":"person"},{"type":"text","text":" => "},{"type":"codeVoice","code":"people"},{"type":"text","text":"."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"propertyNames"},{"type":"text","text":" (Dictionary): Configure the names of the properties generated"},{"type":"text","text":" "},{"type":"text","text":"for database columns:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"decapitalize"},{"type":"text","text":" (Bool): "},{"type":"codeVoice","code":"OrderId"},{"type":"text","text":" => "},{"type":"codeVoice","code":"orderId"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"camelCase"},{"type":"text","text":"    (Bool): "},{"type":"codeVoice","code":"person_id"},{"type":"text","text":" => "},{"type":"codeVoice","code":"personId"},{"type":"text","text":"."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"keys"},{"type":"text","text":" (Dictionary): Configure primary and foreign key detection:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"primaryKeyName"},{"type":"text","text":": Whether to use a single fixed property name (e.g. "},{"type":"codeVoice","code":"id"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"for all non-compound primary keys."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"autodetect"},{"type":"text","text":" (Array of Strings): The names by which keys are detected,"},{"type":"text","text":" "},{"type":"text","text":"defaults to “id”, “ID”, “Id”, “pkey”, “primaryKey”, “PrimaryKey”, “key”, “Key”."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"autodetectWithTableName"},{"type":"text","text":"      (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"autodetectForeignKeys"},{"type":"text","text":"        (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"autodetectForeignKeysInViews"},{"type":"text","text":" (Bool)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"relationships"},{"type":"text","text":": Whether relationships should be derived from foreign keys"},{"type":"text","text":" "},{"type":"text","text":"and how:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"deriveFromForeignKeys"},{"type":"text","text":" (Bool)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"strippedForeignKeySuffixes"},{"type":"text","text":" (Array of Strings)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"typeMap"},{"type":"text","text":" (Dictionary): This is used to map SQL types to Foundation types,"},{"type":"text","text":" "},{"type":"text","text":"or actually any type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" to "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When using Lighter own types can be added by implementing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"columnSuffixToType"},{"type":"text","text":" (Dictionary): Similar to "},{"type":"codeVoice","code":"typeMap"},{"type":"text","text":", this matches"},{"type":"text","text":" "},{"type":"text","text":"against the name of a column to define the type."},{"type":"text","text":" "},{"type":"text","text":"For example "},{"type":"codeVoice","code":"_date"},{"type":"text","text":" could be mapped to "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" and "},{"type":"codeVoice","code":"start_date"},{"type":"text","text":", "},{"type":"codeVoice","code":"end_date"},{"type":"text","text":" "},{"type":"text","text":"etc would all be generated as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values."}]}]}]},{"anchor":"CodeGeneration","level":3,"type":"heading","text":"CodeGeneration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"How to write the mapped schema to Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"omitCreationSQL"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether the SQL to create the database should be included."},{"type":"text","text":" "},{"type":"text","text":"That is "},{"type":"codeVoice","code":"CREATE TABLE"},{"type":"text","text":", "},{"type":"codeVoice","code":"CREATE VIEW"},{"type":"text","text":", … statements."},{"type":"text","text":" "},{"type":"text","text":"It sames some space to disable those if Swift isn’t used to bootstrap SQL"},{"type":"text","text":" "},{"type":"text","text":"database from scratch (vs. copying them from a file)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"readOnly"},{"type":"text","text":" (Bool): Only generate read operations. I.e. there will be no"},{"type":"text","text":" "},{"type":"codeVoice","code":"update"},{"type":"text","text":", "},{"type":"codeVoice","code":"delete"},{"type":"text","text":" or "},{"type":"codeVoice","code":"insert"},{"type":"text","text":" operations."},{"type":"text","text":" "},{"type":"text","text":"Useful if a database is just shipped as a backing resource, e.g. a set of"},{"type":"text","text":" "},{"type":"text","text":"product descriptions, countries, and so on. Saves on the codesize and makes"},{"type":"text","text":" "},{"type":"text","text":"sure that no accidential modifications are possible."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"generateAsyncFunctions"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Generate async\/await Lighter conformances (if "},{"type":"codeVoice","code":"useLighter"},{"type":"text","text":" is enabled)."},{"type":"text","text":" "},{"type":"text","text":"This is only available for Lighter, not the dependency free API."},{"type":"text","text":" "},{"type":"text","text":"It allows calling Lighter APIs using the new Swift 5.5 async\/await feature."},{"type":"text","text":" "},{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"swift","code":["let products = try await db.products.fetch { $0.age < 10 }","try await db.transaction { tx in","  try tx.products.delete(10)","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"embedRecordTypesInDatabaseType"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether record types should be generated as subtypes of the database types."},{"type":"text","text":" "},{"type":"text","text":"Example if "},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct TestDatabase {","  struct Person: TableRecord { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example if "},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct TestDatabase {","}","struct Person: TableRecord { ... }"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"public"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether the API should be generated as "},{"type":"codeVoice","code":"public"},{"type":"text","text":" API (vs "},{"type":"codeVoice","code":"internal"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Example if "},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["public struct TestDatabase {","  public struct Person: TableRecord { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example if "},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct TestDatabase {","  struct Person: TableRecord { ... }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether public functions should be generated as "},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This exposes the function sources in the module header, which is"},{"type":"text","text":" "},{"type":"text","text":"good for the Swift optimizer. Example:"}]},{"type":"codeListing","syntax":"swift","code":["@inlinable","public init(id: String, name: String, ...)"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"allowFoundation"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":", "},{"type":"codeVoice","code":"URL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" can be used."},{"type":"text","text":" "},{"type":"text","text":"It can be useful to disable this in some server deployment scenarios, e.g."},{"type":"text","text":" "},{"type":"text","text":"when using AWS Lambda."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"dateSerialization"},{"type":"text","text":" (String):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"formatter\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"text\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"string\""},{"type":"text","text":", Foundation "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"will be stored as "},{"type":"codeVoice","code":"TEXT"},{"type":"text","text":" in the SQL database. E.g. "},{"type":"codeVoice","code":"\"1973-01-31 12:12:12\""},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"timestamp\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"utime\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"timeintervalsince1970\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Foundation "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values will be stored as "},{"type":"codeVoice","code":"REAL"},{"type":"text","text":" values (doubles),"},{"type":"text","text":" "},{"type":"text","text":"storing the seconds since 1970 (a Unix timestamp)."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"dateFormat"},{"type":"text","text":" (String):"},{"type":"text","text":" "},{"type":"text","text":"This is used in circumstances when Foundation "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" values are either"},{"type":"text","text":" "},{"type":"text","text":"generated as textual values for columns ("},{"type":"codeVoice","code":"dateSerialization"},{"type":"text","text":" is "},{"type":"codeVoice","code":".formatter"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or when String values are returned by the database and need to be parsed."},{"type":"text","text":" "},{"type":"text","text":"The default SQLite date format is "},{"type":"codeVoice","code":"\"1973-01-31 12:12:12\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note: "},{"type":"codeVoice","code":"DateFormatter"},{"type":"text","text":" is quite slow in parsing, if performance is a concern"},{"type":"text","text":" "},{"type":"text","text":"prefer to store dates as timestamps."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uuidSerialization"},{"type":"text","text":" (String):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"text\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"string\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"readable\""},{"type":"text","text":", Foundation "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"will be stored as "},{"type":"codeVoice","code":"TEXT"},{"type":"text","text":" int he SQL database"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"B7D94E7E-EEE3-4E0A-A927-90748B73AA30"},{"type":"text","text":", 36 ASCII characters)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If set to "},{"type":"codeVoice","code":"\"blob\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"bytes\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"data\""},{"type":"text","text":", "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" values will be stored as"},{"type":"text","text":" "},{"type":"text","text":"compact, 16-byte "},{"type":"codeVoice","code":"uuid_t"},{"type":"text","text":" values. I.e. in a more compact manner that"},{"type":"text","text":" "},{"type":"text","text":"requires no parsing."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"recordTypeAliasSuffix"},{"type":"text","text":" (optional String):"},{"type":"text","text":" "},{"type":"text","text":"This is used for the case when reference names (like "},{"type":"codeVoice","code":"\\.person"},{"type":"text","text":") match"},{"type":"text","text":" "},{"type":"text","text":"the type name (e.g. "},{"type":"codeVoice","code":"person"},{"type":"text","text":"). Rare, but can happen."},{"type":"text","text":" "},{"type":"text","text":"In this case a "},{"type":"codeVoice","code":"personRecordType"},{"type":"text","text":" alias would be generated (with "},{"type":"codeVoice","code":"RecordType"},{"type":"text","text":" "},{"type":"text","text":"being the configured suffix)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"showViewHintComment"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Can be used to disable the hints to use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.sqlite.org\/lang_createview.html"},{"type":"text","text":" "},{"type":"text","text":"to define complex queries (only shown if views are not used already)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"commentsWithSQL"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether the SQL used to create a table is put into the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"documentation"}]},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"text","text":"associated structure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"qualifiedSelf"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether properties should be accessed using "},{"type":"codeVoice","code":"self.property"},{"type":"text","text":" instead of the"},{"type":"text","text":" "},{"type":"text","text":"implicit "},{"type":"codeVoice","code":"property"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"extraRecordConformances"},{"type":"text","text":" (Array of Strings):"},{"type":"text","text":" "},{"type":"text","text":"This is by default set to "},{"type":"codeVoice","code":"[ \"Codable\" ]"},{"type":"text","text":". It specified additional protocols"},{"type":"text","text":" "},{"type":"text","text":"the generated records should conform to (apart from Lighter generated ones)."},{"type":"text","text":" "},{"type":"text","text":"Note that "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" are usually automatic (if applicable)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"swiftFilters"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Whether Swift filter matcher should be generated."},{"type":"text","text":" "},{"type":"text","text":"(I.e. the ability to use a regular Swift closure instead of a SQL where"},{"type":"text","text":" "},{"type":"text","text":"qualifier)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"propertyIndexPrefix"},{"type":"text","text":" (String):"},{"type":"text","text":" "},{"type":"text","text":"Each table gets a specific "},{"type":"codeVoice","code":"PropertyIndicies"},{"type":"text","text":" tuple type assigned. It contains"},{"type":"text","text":" "},{"type":"text","text":"the static (bind, value or argument) position of each property in a query."},{"type":"text","text":" "},{"type":"text","text":"It looks like "},{"type":"codeVoice","code":"PropertyIndicies = ( idx_id, idx_name, idx_city )"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This option configures the prefix of those tuple members ("},{"type":"codeVoice","code":"idx_"},{"type":"text","text":" by default)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"optionalHelpersInDatabase"},{"type":"text","text":" (Bool):"},{"type":"text","text":" "},{"type":"text","text":"Instead of creating them as local functions, put helper functions into the"},{"type":"text","text":" "},{"type":"text","text":"Database object as static methods."},{"type":"text","text":" "},{"type":"text","text":"It is useful to keep them locally, if the generated struct is just"},{"type":"text","text":" "},{"type":"text","text":"intended for copy&paste use (because the source is becomes self-contained)."}]}]}]},{"anchor":"Subsection-Lighter","level":4,"type":"heading","text":"Subsection `Lighter`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"none\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"no\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"false\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"null"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the API depending on the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" support library is not generated."},{"type":"text","text":" "},{"type":"text","text":"This mostly affects conformances\/mixins which provide the extra functionalities."},{"type":"text","text":" "},{"type":"text","text":"For example the records won’t be marked as "},{"type":"codeVoice","code":"SQLTableRecord"},{"type":"text","text":" etc."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"use\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"yes\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"import\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"reexport\""},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" conformances will be generated."},{"type":"text","text":" "},{"type":"text","text":"If it is "},{"type":"codeVoice","code":"\"import\""},{"type":"text","text":" the "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" lib will be imported as usual, if set to"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"reexport\""},{"type":"text","text":" it will be re-exported as part of the current module"},{"type":"text","text":" "},{"type":"text","text":"(Useful if the package\/target is itself a library providing access to a"},{"type":"text","text":" "},{"type":"text","text":"database, the consumer won’t have to import "},{"type":"codeVoice","code":"Lighter"},{"type":"text","text":" separately)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the key is a dictionary again, it’ll enable Lighter and contain those"},{"type":"text","text":" "},{"type":"text","text":"subkeys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"import"},{"type":"text","text":" (String or Bool): The import style as described above."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reexport"},{"type":"text","text":" (Bool): Whether to re-export Lighter APIs."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"relationships"},{"type":"text","text":" (Bool): Whether to generate specific functions to follow"},{"type":"text","text":" "},{"type":"text","text":"relationship (e.g. "},{"type":"codeVoice","code":"db.orders.fetch(for: product"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"useSQLiteValueTypeBinds"},{"type":"text","text":" (Bool): Whether the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"should be used to bind values (vs code generating the static type)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Examples"},{"type":"text","text":" (dictionary): Single bool subkey: "},{"type":"codeVoice","code":"select"},{"type":"text","text":", whether select"},{"type":"text","text":" "},{"type":"text","text":"examples should be included in the documentation."}]}]}]},{"anchor":"Subsection-Raw","level":4,"type":"heading","text":"Subsection `Raw`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Raw"},{"type":"text","text":" key is set to "},{"type":"codeVoice","code":"\"none\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"omit\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"null"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the dependency free, lower level SQLite API is not generated"},{"type":"text","text":" "},{"type":"text","text":"(e.g. "},{"type":"codeVoice","code":"sqlite3_fetch_people()"},{"type":"text","text":" etc)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If it key is set to "},{"type":"codeVoice","code":"\"RecordType\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"attachToRecordType\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the low level API will be generated as methods on the structures."},{"type":"text","text":" "},{"type":"text","text":"E.g. instead of a global "},{"type":"codeVoice","code":"sqlite3_fetch_people()"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"the generator will generated:"}]},{"type":"codeListing","syntax":"swift","code":["extension Person {","  static func fetch(in database: OpaquePointer) -> [ Person ] {...}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the key is set to another string, it’ll be used as the prefix of the"},{"type":"text","text":" "},{"type":"text","text":"global functions (defaults to "},{"type":"codeVoice","code":"\"sqlite3_\""},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"E.g. when set to "},{"type":"codeVoice","code":"\"mydb_\""},{"type":"text","text":", the function names would be "},{"type":"codeVoice","code":"mydb_people_fetch()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"mydb_person_insert()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the key is a dictionary again, it contains those subkeys:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"prefix"},{"type":"text","text":": The global function name prefix like described above, if empty or"},{"type":"text","text":" "},{"type":"text","text":"missing, the functions will be attached to the record."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"relationships"},{"type":"text","text":": Whether functions to fetch foreign keys should be generated."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"hashable"},{"type":"text","text":":      Whether the record structures should be marked as "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}]}]},{"anchor":"Complete-Example","level":3,"type":"heading","text":"Complete Example"},{"type":"codeListing","syntax":"json","code":["{","  \"databaseExtensions\" : [ \"sqlite3\", \"db\", \"sqlite\" ],","  \"sqlExtensions\"      : [ \"sql\" ],","  ","  \"CodeStyle\": {","    \"functionCommentStyle\" : \"**\",","    \"indent\"               : \"  \",","    \"lineLength\"           : 80","  },","  ","  \"ContactsTestDB\": {","    \"EmbeddedLighter\": null,","    ","    \"CodeGeneration\": {","      \"Lighter\": {","        \"__doc__\":","          \"Can use re-export to re-export Lighter API as part of the DB.\",","        \"import\": \"import\"","      }","    },","    ","    \"OtherDB\": {","      \"CodeStyle\": {","        \"comments\": {","          \"types\"      : \"\",","          \"properties\" : \"\",","          \"functions\"  : \"\"","        }","      },","      \"CodeGeneration\": {","        \"Raw\"                            : \"none\",","        \"readOnly\"                       : true,","        \"generateAsyncFunctions\"         : false,","        \"embedRecordTypesInDatabaseType\" : true","      }","    }","  },","  ","  \"EmbeddedLighter\": {","    \"selects\": {","      \"syncYield\"  : \"none\",","      \"syncArray\"  : { \"columns\": 6, \"sorts\": 2 },","      \"asyncArray\" : { \"columns\": 6, \"sorts\": 2 }","    },","    \"updates\": {","      \"keyBased\"       : 6,","      \"predicateBased\" : 6","    },","    \"inserts\": 6","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/lighter\/configuration"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Configuration","role":"article","modules":[{"name":"Lighter.swift for SQLite3"}]},"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/Linux","doc:\/\/Lighter\/documentation\/Lighter\/Manual","doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","doc:\/\/Lighter\/documentation\/Lighter\/Mapping","doc:\/\/Lighter\/documentation\/Lighter\/Migrations","doc:\/\/Lighter\/documentation\/Lighter\/Performance"],"generated":true}],"references":{"doc://Lighter/documentation/Lighter/Migrations":{"role":"article","title":"Migrations","abstract":[{"type":"text","text":"Detecting schema changes and performing schema upgrades."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Migrations","kind":"article","type":"topic","url":"\/documentation\/lighter\/migrations"},"doc://Lighter/documentation/Lighter/Manual":{"role":"article","title":"Manual Generation","abstract":[{"type":"text","text":"How to generate Lighter content by hand."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Manual","kind":"article","type":"topic","url":"\/documentation\/lighter\/manual"},"https://www.sqlite.org/lang_createview.html":{"title":"SQL Views","titleInlineContent":[{"type":"text","text":"SQL Views"}],"type":"link","identifier":"https:\/\/www.sqlite.org\/lang_createview.html","url":"https:\/\/www.sqlite.org\/lang_createview.html"},"doc://Lighter/documentation/Lighter":{"role":"collection","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"type":"strong","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":", fast. Dependency free."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter","kind":"symbol","type":"topic","url":"\/documentation\/lighter"},"doc://Lighter/documentation/Lighter/Mapping":{"role":"collectionGroup","title":"Mapping","abstract":[{"type":"text","text":"Mapping Data retrieved from the Database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Mapping","kind":"article","type":"topic","url":"\/documentation\/lighter\/mapping"},"doc://Lighter/documentation/Lighter/SQLiteValueType":{"role":"symbol","title":"SQLiteValueType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLiteValueType"}],"abstract":[{"type":"text","text":"A value that can be used in SQLite columns."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteValueType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLiteValueType"}],"url":"\/documentation\/lighter\/sqlitevaluetype"},"doc://Lighter/documentation/Lighter/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"A quick look at Lighter performance."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Performance","kind":"article","type":"topic","url":"\/documentation\/lighter\/performance"},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"role":"article","title":"Dependency-Free API","abstract":[{"type":"text","text":"Using the dependency-free SQLite API."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","kind":"article","type":"topic","url":"\/documentation\/lighter\/sqliteapi"},"doc://Lighter/documentation/Lighter/Linux":{"role":"article","title":"Linux","abstract":[{"type":"text","text":"Using Lighter on Linux."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Linux","kind":"article","type":"topic","url":"\/documentation\/lighter\/linux"}}}