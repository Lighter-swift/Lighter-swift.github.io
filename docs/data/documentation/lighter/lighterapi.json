{"topicSections":[{"title":"Important Types","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase","doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord","doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate"]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/GettingStarted","doc:\/\/Lighter\/documentation\/Lighter\/Northwind"],"title":"Getting Started"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"title":"Lighter API Overview","role":"collectionGroup","modules":[{"name":"Lighter.swift for SQLite3"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/lighter\/lighterapi"]}],"abstract":[{"type":"text","text":"Using the Lighter API."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter itself is a small support library that enhances the capabilities of the"},{"type":"text","text":" "},{"text":"generated code. It is still a pretty small library but can do tasks like:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"connection management","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"async\/await query execution","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"dynamic building of SQL predicates","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Lighter is not supposed to be used on its own. It is a set of Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocols and mixins that annotate the sources generated by the code generators."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an additional dependency is not desired, Enlighter can also generate"},{"text":" ","type":"text"},{"text":"dependency free code for a database: ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","type":"reference"},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"At a Glimpse","anchor":"At-a-Glimpse"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"text":" ","type":"text"},{"type":"text","text":"itself (e.g."},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g."},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the database is embedded into the app or library (as a resource file), it","type":"text"},{"type":"text","text":" "},{"text":"can be directly used like this:","type":"text"}]},{"code":["let database = Northwind.module!"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If the database is a cache or document storage, it needs to be created:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let database = Northwind.bootstrap()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many variants of bootstrap exist, e.g. it can also copy a prefilled resource"},{"text":" ","type":"text"},{"type":"text","text":"database."},{"type":"text","text":" "},{"text":"During development, when the SQL files are still changed,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"bootstrap(overwrite: true)"},{"text":" can be useful, e.g. to get a new cache database on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each start."}]},{"inlineContent":[{"text":"The Lighter APIs then allow the common","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},{"type":"text","text":" on them."},{"text":" ","type":"text"},{"type":"text","text":"E.g. to insert a new product into the Northwind database:"}],"type":"paragraph"},{"type":"codeListing","code":["var newProduct = Product(name: \"Maple Sirup\")","try database.insert(newProduct)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To change it:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["newProduct.name = \"Marmelade\"","try database.update(newProduct)"]},{"inlineContent":[{"type":"text","text":"To delete it:"}],"type":"paragraph"},{"syntax":"swift","code":["try database.delete(newProduct)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Database tables and views are exposed as “record references”,"},{"type":"text","text":" "},{"type":"text","text":"which enable us to fetch them with a nice syntax:"}],"type":"paragraph"},{"code":["let allProducts = try database.products.fetch()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If just a single record needs to be fetched by its identifier, ","type":"text"},{"code":"find","type":"codeVoice"},{"type":"text","text":" is used:"}],"type":"paragraph"},{"code":["let product31 = try database.products.find(31)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To filter a Swift closure can be used (it runs in the database):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let products = try database.products.filter { product in","  product.name.lowercased().contains(\"e\")","}"]},{"inlineContent":[{"type":"text","text":"Things can be put into transactions for isolation and performance:"}],"type":"paragraph"},{"syntax":"swift","code":["try database.transaction { tx in","  tx.insert([ one, two, three, four, five ])","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if Swift concurrency is available, async\/await versions of everything are"},{"text":" ","type":"text"},{"type":"text","text":"available:"}]},{"type":"codeListing","syntax":"swift","code":["async let supplier = database.suppliers.find(for: product)","async let category = database.categories.find(for: product)","( self.supplier, self.category ) = try await ( supplier, category )"]},{"type":"heading","level":2,"text":"What is Generated","anchor":"What-is-Generated"},{"inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"type":"text","text":" "},{"type":"text","text":"itself (e.g."},{"text":" ","type":"text"},{"overridingTitle":"Northwind","isActive":true,"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","overridingTitleInlineContent":[{"type":"text","text":"Northwind"}],"type":"reference"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"text":"(e.g.","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product","isActive":true,"overridingTitleInlineContent":[{"text":"Product","type":"text"}],"overridingTitle":"Product","type":"reference"},{"type":"text","text":")."}],"type":"paragraph"},{"text":"Database Structure","anchor":"Database-Structure","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The name of the structure is derived from the database file name. E.g. if it"},{"type":"text","text":" "},{"text":"is called “northwind.db”, the default name mapping produces a structure with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the name"},{"type":"text","text":" "},{"text":"“","type":"text"},{"isActive":true,"overridingTitle":"Northwind","type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","overridingTitleInlineContent":[{"text":"Northwind","type":"text"}]},{"text":"”.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"reference","isActive":true},{"type":"text","text":", the database structure conforms to e.g.:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase","type":"reference"},{"text":": This handles opening the database etc.","type":"text"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseAsyncChangeOperations","isActive":true,"type":"reference"},{"type":"text","text":": This mixin provides support for all the"},{"type":"text","text":" "},{"text":"CRUD operations and more.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder"},{"type":"text","text":": Using this the database can bootstrap a new"},{"text":" ","type":"text"},{"type":"text","text":"database from the contained SQL."}],"type":"paragraph"}]}]},{"text":"Table and View Structures","type":"heading","level":3,"anchor":"Table-and-View-Structures"},{"inlineContent":[{"text":"The name of the structure is derived from the table name according to the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By default “snake_case” (e.g. "},{"code":"product_assignment","type":"codeVoice"},{"type":"text","text":") is converted to Swiftier"},{"text":" ","type":"text"},{"type":"text","text":"camel case ("},{"code":"ProductAssignment","type":"codeVoice"},{"text":"), for both the structure name as well as the","type":"text"},{"text":" ","type":"text"},{"text":"property names.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Depending on the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true},{"type":"text","text":", the structures conforms to e.g.:"}]},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLKeyedTableRecord","isActive":true},{"type":"text","text":": If the record represents a table that has a single"},{"type":"text","text":" "},{"type":"text","text":"primary key."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","type":"reference","isActive":true},{"type":"text","text":":"},{"text":" ","type":"text"},{"text":"If the record has a primary key.","type":"text"},{"type":"text","text":" "},{"text":"This is particularily useful in combination with SwiftUI, as such records can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"directly be used in SwiftUI Lists and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Codable","type":"codeVoice"},{"type":"text","text":": An extra conformance in the default configuration, not needed by"},{"type":"text","text":" "},{"type":"text","text":"Lighter itself."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"By default Enlighter changes the name of the primary key to ","type":"text"},{"type":"codeVoice","code":"id"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can be changed using the "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"text":"Performing Queries","level":2,"type":"heading","anchor":"Performing-Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter has a rich set of query functions for many needs."}]},{"anchor":"Locating-Individual-Records","level":3,"type":"heading","text":"Locating Individual Records"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/find(_:)-7k750","type":"reference"},{"text":" functions are used to locate","type":"text"},{"type":"text","text":" "},{"text":"individual records. One variant works for records with primary keys:","type":"text"}]},{"code":["let person = try database.people.find(10)","let earth  = try db.solarBodies.find(\"Earth\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The other one allows the specification of a column:"}],"type":"paragraph"},{"code":["let earth = try db.solarBodies.find(by: \\.name, \"Earth\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Filtering-Records","type":"heading","text":"Filtering Records","level":3},{"inlineContent":[{"type":"text","text":"Lighter provides two ways to filter tables that look similar but work"},{"type":"text","text":" "},{"text":"differently.","type":"text"}],"type":"paragraph"},{"text":"Filtering using Swift","level":4,"anchor":"Filtering-using-Swift","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Lighter can directly filter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the database using a Swift closure ("},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/filter(limit:filter:)","isActive":true},{"text":"):","type":"text"}]},{"type":"codeListing","code":["let products = try database.products.filter { product in","  product.name.lowercased().contains(\"e\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure receives a fully filled "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" model which it can"},{"text":" ","type":"text"},{"type":"text","text":"filter w\/ arbitrary Swift code."},{"text":" ","type":"text"},{"type":"text","text":"This can be important if the filtering requirements are more demanding,"},{"text":" ","type":"text"},{"text":"e.g. a SQLite ","type":"text"},{"type":"codeVoice","code":"LOWER"},{"type":"text","text":" function doesn’t do the same Unicode normalization the"},{"type":"text","text":" "},{"type":"text","text":"Swift "},{"type":"codeVoice","code":"lowercased()"},{"text":" function and companions do.","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Careful with reusing the same database within a filter. It is possible,"},{"type":"text","text":" "},{"text":"but each call will get an own database connection. It is best to keep","type":"text"},{"type":"text","text":" "},{"text":"them simple.","type":"text"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the "},{"inlineContent":[{"type":"text","text":"most convenient way"}],"type":"strong"},{"text":" to filter which offers the broadest","type":"text"},{"type":"text","text":" "},{"text":"flexibility.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"disadvantage"}]},{"type":"text","text":" is that it can be a little "},{"type":"strong","inlineContent":[{"text":"slower","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SQLite can’t use database indices and a full record has to be filled for"},{"type":"text","text":" "},{"text":"filtering.","type":"text"}]},{"anchor":"Filtering-using-Predicates","level":4,"type":"heading","text":"Filtering using Predicates"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate","type":"reference"},{"text":"’s work a lot like CoreData ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":"s, but directly bind","type":"text"},{"text":" ","type":"text"},{"text":"to the column types and due to that are completely typesafe.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Straight forward operators (like ","type":"text"},{"code":"!","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":", ","type":"text"},{"type":"codeVoice","code":"||"},{"text":", ","type":"text"},{"type":"codeVoice","code":"<"},{"text":") are provided,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as matchers ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasPrefix(_:caseInsensitive:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasSuffix(_:caseInsensitive:)","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/contains(_:caseInsensitive:)"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and range queries ("},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-4ds12","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-6rq6g","type":"reference","isActive":true},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":"swift","code":["let products = try database.products.fetch { product in","  product.name.contains(\"e\") && product.age < 10","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It looks very much like the Swift-closure based filter, but it isn’t."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"product","type":"codeVoice"},{"type":"text","text":" is a standin for the record, which knows about the column types,"},{"type":"text","text":" "},{"type":"text","text":"but is just used for "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate","isActive":true,"type":"reference"},{"type":"text","text":" generation."}]},{"type":"paragraph","inlineContent":[{"text":"Due to the type-safety one can’t accidentially compare a number with a string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"e.g. the compiler would forbid this:"}]},{"syntax":"swift","code":["let products = try database.products.fetch {","  $0.age == \"FourSomething\"","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is a "},{"inlineContent":[{"text":"fast and flexible","type":"text"}],"type":"strong"},{"text":" way to filter records as real SQL is produced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that can be used by SQLite as it sees fit (e.g. use indices)."}],"type":"paragraph"},{"text":"Sorting","anchor":"Sorting","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"code":"fetch","type":"codeVoice"},{"text":" functions come with an ","type":"text"},{"code":"orderBy","type":"codeVoice"},{"text":" variant:","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/fetch(limit:orderBy:_:)-4ly8m","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Examples:"}],"type":"paragraph"},{"syntax":"swift","code":["let bodies = try db.solarBodies.fetch(orderBy: \\.englishName)","let bodies = try db.solarBodies.fetch(orderBy: \\.bodyType, .descending)"],"type":"codeListing"},{"anchor":"Fetching-Relationships","type":"heading","text":"Fetching Relationships","level":3},{"inlineContent":[{"type":"text","text":"When Enlighter detected a relationship, it generates convenience accessors"},{"type":"text","text":" "},{"text":"(can be disabled in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let category = try db.categories.find(5)","let productsForCategory = try db.products.fetch(for: category)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other way around:"}]},{"syntax":"swift","code":["let product = try db.products.find(42)","let categoryOfProduct = try.db.categories.find(for: product)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Those are just convenience wrappers for the builtin fetcher functions that"},{"text":" ","type":"text"},{"type":"text","text":"work on the foreign keys:"}],"type":"paragraph"},{"code":["let products = try await db.products.fetch(for: \\.categoryID, in: category)","let category = try await db.products.findTarget(for: \\.categoryID, in: product)"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Selecting Individual Columns","anchor":"Selecting-Individual-Columns","type":"heading"},{"inlineContent":[{"text":"One of the advantages of SQL is that individual columns can be selected","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated for maximum efficiency. Only things that are"},{"text":" ","type":"text"},{"text":"required need to be fetched (vs. full records):","type":"text"}],"type":"paragraph"},{"code":["\/\/ Fetch just the `id` and `name` columns:","let people = try await db.select(from: \\.people, \\.id, \\.name) {","  $0.id > 2 && $0.title == nil","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or updated:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Bulk update a specific column:","try db.update(\\.people, set: \\.title, to: nil, where: { record in","  record.name.hasPrefix(\"Duck\")","})"]},{"type":"paragraph","inlineContent":[{"text":"The references are fully typesafe down to the schema, only columns","type":"text"},{"type":"text","text":" "},{"text":"contained in the ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" table can be specified (and are directly available","type":"text"},{"text":" ","type":"text"},{"text":"in Xcode autocompletion).","type":"text"}]},{"text":"Performing raw SQL Queries","anchor":"Performing-raw-SQL-Queries","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final escape hatch one can perform raw SQL queries:"}]},{"code":["let results = try db.solarBodies.fetch(sql: \"SELECT * FROM solar_bodies\")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This does proper escaping using interpolations, e.g. this is possible:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let results = try db.persons.fetch(sql:","  \"SELECT * FROM person WHERE \\($0.personId) LIKE UPPER(\\(name))\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A raw fetch against a specific type (e.g. "},{"type":"codeVoice","code":"solarBodies"},{"type":"text","text":") will always return"},{"text":" ","type":"text"},{"type":"text","text":"full records (e.g. "},{"code":"SolarBody","type":"codeVoice"},{"type":"text","text":"). This still works for fetching fragments though:"}]},{"type":"codeListing","syntax":"swift","code":["let results = try db.solarBodies.fetch(sql: ","  \"SELECT id, name FROM solar_bodies\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All other properties of the structure will be set to their default values (as"},{"text":" ","type":"text"},{"type":"text","text":"specified in the SQL schema, or a sensible default if that isn’t available)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetching fragments like that is still reasonably fast, it has a bigger"},{"text":" ","type":"text"},{"text":"associated memory cost vs the targetted ","type":"text"},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseFetchOperations\/select(from:_:_:)","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"Using SQL Views to Define Complex Queries","anchor":"Using-SQL-Views-to-Define-Complex-Queries"},{"inlineContent":[{"type":"text","text":"It is tempting to define queries dynamically in Swift. It is often more"},{"type":"text","text":" "},{"type":"text","text":"performant to do such in SQL and use the full power of SQL built into"},{"type":"text","text":" "},{"type":"text","text":"SQLite, e.g. "},{"type":"codeVoice","code":"GROUP BY"},{"type":"text","text":", "},{"type":"codeVoice","code":"DISTINCT"},{"type":"text","text":", "},{"code":"SUM","type":"codeVoice"},{"text":" and extensive joins.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Lighter can’t translate plain queries yet (stay tuned), but there is an easy"},{"type":"text","text":" "},{"type":"text","text":"workaround: SQL Views. Views in the basic form are just stored queries:"}],"type":"paragraph"},{"type":"codeListing","code":["CREATE VIEW [Customer and Suppliers by City] AS","  SELECT City, CompanyName, ContactName, 'Customers' AS Relationship ","    FROM Customers","  UNION ","  SELECT City, CompanyName, ContactName, 'Suppliers' ","    FROM Suppliers ","ORDER BY City, CompanyName"],"syntax":"sql"},{"type":"paragraph","inlineContent":[{"text":"Northwind comes with a set of example views, e.g.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},{"type":"text","text":"."}]}]}],"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"references":{"https://developer.apple.com/documentation/swift/identifiable":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","url":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","titleInlineContent":[{"type":"text","text":"Identifiable"}],"type":"link","title":"Identifiable"},"doc://Lighter/documentation/Lighter/SQLColumn/hasPrefix(_:caseInsensitive:)":{"url":"\/documentation\/lighter\/sqlcolumn\/hasprefix(_:caseinsensitive:)","title":"hasPrefix(_:caseInsensitive:)","kind":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasPrefix(_:caseInsensitive:)","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"code":"StringProtocol","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"hasPrefix","kind":"identifier"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"caseInsensitive"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SQLColumnValuePredicate","preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Checks whether the value in the column has a certain prefix."}]},"doc://Lighter/documentation/Lighter/SQLDatabaseAsyncChangeOperations":{"title":"SQLDatabaseAsyncChangeOperations","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseAsyncChangeOperations","kind":"symbol","abstract":[{"type":"text","text":"Asynchronous operations that change the database."}],"type":"topic","url":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SQLDatabaseAsyncChangeOperations","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"SQLDatabaseAsyncChangeOperations","kind":"identifier"}]},"doc://Lighter/documentation/Lighter/SQLDatabaseFetchOperations/select(from:_:_:)":{"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseFetchOperations\/select(from:_:_:)","kind":"symbol","url":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"select"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"RecordTypes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type>, ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"."},{"text":"Schema","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"title":"select(from:_:_:)","abstract":[{"type":"text","text":"Select columns from a SQL table or view in a typesafe way."}],"role":"symbol"},"doc://Lighter/documentation/Lighter/SQLKeyedTableRecord":{"title":"SQLKeyedTableRecord","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLKeyedTableRecord","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SQLKeyedTableRecord"},{"type":"text","text":" is a "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord","type":"reference","isActive":true},{"type":"text","text":"(a "},{"type":"reference","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord","isActive":true},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"that is tied to a table with a single primary key."}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLKeyedTableRecord"}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLKeyedTableRecord","url":"\/documentation\/lighter\/sqlkeyedtablerecord"},"doc://Lighter/documentation/Lighter/SQLColumn/in(_:)-4ds12":{"abstract":[{"type":"text","text":"Checks whether the value of a column matches a set of given values."}],"kind":"symbol","title":"in(_:)","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-4ds12","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"`in`","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"text":"SQLColumnValueSetPredicate","preciseIdentifier":"s:7Lighter26SQLColumnValueSetPredicateV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"url":"\/documentation\/lighter\/sqlcolumn\/in(_:)-4ds12","type":"topic"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/find(_:)-7k750":{"abstract":[{"text":"Fetch a single record with the specified primary key.","type":"text"}],"kind":"symbol","title":"find(_:)","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/find(_:)-7k750","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"find","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"."},{"text":"Schema","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"PrimaryKeyColumn","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Ops"},{"text":" conforms to ","type":"text"},{"code":"SQLDatabaseOperations","type":"codeVoice"},{"text":", ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":", and "},{"code":"T.Schema","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SQLKeyedTableSchema","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(_:)-7k750","type":"topic"},"doc://Lighter/documentation/Lighter/SQLColumn/contains(_:caseInsensitive:)":{"abstract":[{"type":"text","text":"Checks whether the value in the column contains a certain string."}],"kind":"symbol","title":"contains(_:caseInsensitive:)","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/contains(_:caseInsensitive:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"caseInsensitive","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV","text":"SQLColumnValuePredicate","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"StringProtocol","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/lighter\/sqlcolumn\/contains(_:caseinsensitive:)","type":"topic"},"doc://Lighter/documentation/Lighter/GettingStarted":{"title":"Getting Started","url":"\/documentation\/lighter\/gettingstarted","role":"article","kind":"article","abstract":[{"text":"Setting up Lighter for network caches or as resource databases.","type":"text"}],"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/GettingStarted"},"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete":{"title":"CRUD","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","type":"link","titleInlineContent":[{"type":"text","text":"CRUD"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/fetch(limit:orderBy:_:)-4ly8m":{"title":"fetch(limit:orderBy:_:)","url":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:)-4ly8m","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"fetch"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"SC"},{"text":">(","kind":"text"},{"text":"limit","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"orderBy"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".","kind":"text"},{"text":"Schema","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SC"},{"text":">, ","kind":"text"},{"text":"SQLSortOrder","kind":"typeIdentifier","preciseIdentifier":"s:7Lighter12SQLSortOrderO"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Fetch records of a view\/table unfiltered, but in a sorted manner."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Ops"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SQLDatabaseAsyncOperations"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":"."}]},"type":"topic","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/fetch(limit:orderBy:_:)-4ly8m"},"doc://Lighter/documentation/Lighter/SQLPredicate":{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate","url":"\/documentation\/lighter\/sqlpredicate","type":"topic","abstract":[{"type":"text","text":"Represents a dynamic (but statically typed) predicate that can be rendered"},{"type":"text","text":" "},{"text":"into a SQL WHERE string.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPredicate"}],"title":"SQLPredicate","navigatorTitle":[{"text":"SQLPredicate","kind":"identifier"}]},"doc://Lighter/documentation/Lighter/SQLTableRecord":{"url":"\/documentation\/lighter\/sqltablerecord","kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord","title":"SQLTableRecord","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLTableRecord","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"code":"SQLTableRecord","type":"codeVoice"},{"type":"text","text":" is a "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord","type":"reference","isActive":true},{"type":"text","text":" that is tied to a table specifically."}],"navigatorTitle":[{"kind":"identifier","text":"SQLTableRecord"}]},"doc://Lighter/documentation/Lighter/SQLDatabase":{"role":"symbol","abstract":[{"type":"text","text":"A type representing a SQLite3 database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLDatabase","kind":"identifier"}],"kind":"symbol","title":"SQLDatabase","navigatorTitle":[{"text":"SQLDatabase","kind":"identifier"}],"url":"\/documentation\/lighter\/sqldatabase","type":"topic"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/filter(limit:filter:)":{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/filter(limit:filter:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"text":"(","kind":"text"},{"text":"limit","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":"?, ","kind":"text"},{"text":"filter","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"T"},{"text":"]","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Ops"},{"text":" conforms to ","type":"text"},{"code":"SQLDatabaseOperations","type":"codeVoice"},{"type":"text","text":", "},{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SQLRecord","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"T.Schema","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SQLSwiftMatchableSchema","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/lighter\/sqlrecordfetchoperations\/filter(limit:filter:)","abstract":[{"type":"text","text":"Fetch filtered records of a view\/table w\/o any sorting."}],"title":"filter(limit:filter:)","kind":"symbol"},"doc://Lighter/documentation/Lighter/SQLCreationStatementsHolder/creationSQL":{"required":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder\/creationSQL","type":"topic","abstract":[{"type":"text","text":"SQL "},{"code":"CREATE","type":"codeVoice"},{"type":"text","text":" statements (e.g. "},{"code":"CREATE TABLE person (...)","type":"codeVoice"},{"text":").","type":"text"}],"title":"creationSQL","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"creationSQL"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"url":"\/documentation\/lighter\/sqlcreationstatementsholder\/creationsql","role":"symbol"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","url":"\/documentation\/lighter\/configuration","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","type":"topic","kind":"article","title":"Configuration","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Lighter.json"},{"text":" configuration file.","type":"text"}]},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"kind":"article","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","role":"article","url":"\/documentation\/lighter\/sqliteapi","type":"topic","abstract":[{"text":"Using the dependency-free SQLite API.","type":"text"}],"title":"Dependency-Free API"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product":{"titleInlineContent":[{"text":"Product","type":"text"}],"title":"Product","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product","type":"link","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product"},"doc://Lighter/documentation/Lighter/SQLColumn/hasSuffix(_:caseInsensitive:)":{"conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"StringProtocol","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasSuffix(_:caseInsensitive:)","type":"topic","abstract":[{"text":"Checks whether the value in the column has a certain suffix.","type":"text"}],"title":"hasSuffix(_:caseInsensitive:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"hasSuffix"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"caseInsensitive"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"text":"SQLColumnValuePredicate","kind":"typeIdentifier","preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/lighter\/sqlcolumn\/hassuffix(_:caseinsensitive:)","role":"symbol"},"doc://Lighter/documentation/Lighter/SQLColumn/in(_:)-6rq6g":{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-6rq6g","title":"in(_:)","abstract":[{"text":"Checks whether the value of a column is in a specific range.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`in`"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SN","text":"ClosedRange"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"SQLColumnValueRangePredicate","preciseIdentifier":"s:7Lighter28SQLColumnValueRangePredicateV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/lighter\/sqlcolumn\/in(_:)-6rq6g","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/customerandsuppliersbycity":{"type":"link","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","titleInlineContent":[{"type":"text","text":"CustomerAndSuppliersByCity"}],"url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","title":"CustomerAndSuppliersByCity"},"doc://Lighter/documentation/Lighter/SQLCreationStatementsHolder":{"abstract":[{"type":"text","text":"A type that holds SQL "},{"type":"codeVoice","code":"CREATE"},{"type":"text","text":" statements in the "},{"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder\/creationSQL","type":"reference","isActive":true},{"type":"text","text":" property."}],"url":"\/documentation\/lighter\/sqlcreationstatementsholder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SQLCreationStatementsHolder"}],"role":"symbol","type":"topic","title":"SQLCreationStatementsHolder","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SQLCreationStatementsHolder","kind":"identifier"}]},"doc://Lighter/documentation/Lighter/SQLRecord":{"url":"\/documentation\/lighter\/sqlrecord","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SQLRecord"},{"text":" is an abstract protocol representing a set of columns fetched","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from a database."}],"title":"SQLRecord","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SQLRecord"}],"navigatorTitle":[{"kind":"identifier","text":"SQLRecord"}]},"doc://Lighter/documentation/Lighter/Northwind":{"abstract":[{"text":"Using the Northwind example database.","type":"text"}],"url":"\/documentation\/lighter\/northwind","kind":"article","role":"article","type":"topic","title":"Northwind","identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Northwind"},"https://Northwind-swift.github.io/NorthwindSQLite.swift/documentation/northwind/northwind":{"titleInlineContent":[{"text":"Northwind","type":"text"}],"title":"Northwind","identifier":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","url":"https:\/\/Northwind-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","type":"link"},"doc://Lighter/documentation/Lighter":{"url":"\/documentation\/lighter","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Lighter\/documentation\/Lighter","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"inlineContent":[{"type":"text","text":"very"}],"type":"strong"},{"type":"text","text":", fast. Dependency free."}]}}}