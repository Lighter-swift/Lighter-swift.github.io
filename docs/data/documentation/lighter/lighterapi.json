{"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/GettingStarted","doc:\/\/Lighter\/documentation\/Lighter\/Northwind"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter itself is a small support library that enhances the capabilities of the"},{"type":"text","text":" "},{"type":"text","text":"generated code. It is still a pretty small library but can do tasks like:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"connection management"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"async\/await query execution"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"dynamic building of SQL predicates"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter is not supposed to be used on its own. It is a set of Swift"},{"type":"text","text":" "},{"type":"text","text":"protocols and mixins that annotate the sources generated by the code generators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an additional dependency is not desired, Enlighter can also generate"},{"type":"text","text":" "},{"type":"text","text":"dependency free code for a database: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI"},{"type":"text","text":"."}]},{"anchor":"At-a-Glimpse","level":2,"type":"heading","text":"At a Glimpse"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"type":"text","text":" "},{"type":"text","text":"itself (e.g."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the database is embedded into the app or library (as a resource file), it"},{"type":"text","text":" "},{"type":"text","text":"can be directly used like this:"}]},{"type":"codeListing","syntax":"swift","code":["let database = Northwind.module!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the database is a cache or document storage, it needs to be created:"}]},{"type":"codeListing","syntax":"swift","code":["let database = Northwind.bootstrap()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many variants of bootstrap exist, e.g. it can also copy a prefilled resource"},{"type":"text","text":" "},{"type":"text","text":"database."},{"type":"text","text":" "},{"type":"text","text":"During development, when the SQL files are still changed,"},{"type":"text","text":" "},{"type":"codeVoice","code":"bootstrap(overwrite: true)"},{"type":"text","text":" can be useful, e.g. to get a new cache database on"},{"type":"text","text":" "},{"type":"text","text":"each start."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Lighter APIs then allow the common"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},{"type":"text","text":" on them."},{"type":"text","text":" "},{"type":"text","text":"E.g. to insert a new product into the Northwind database:"}]},{"type":"codeListing","syntax":"swift","code":["var newProduct = Product(name: \"Maple Sirup\")","try database.insert(newProduct)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To change it:"}]},{"type":"codeListing","syntax":"swift","code":["newProduct.name = \"Marmelade\"","try database.update(newProduct)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To delete it:"}]},{"type":"codeListing","syntax":"swift","code":["try database.delete(newProduct)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Database tables and views are exposed as “record references”,"},{"type":"text","text":" "},{"type":"text","text":"which enable us to fetch them with a nice syntax:"}]},{"type":"codeListing","syntax":"swift","code":["let allProducts = try database.products.fetch()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If just a single record needs to be fetched by its identifier, "},{"type":"codeVoice","code":"find"},{"type":"text","text":" is used:"}]},{"type":"codeListing","syntax":"swift","code":["let product31 = try database.products.find(31)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To filter a Swift closure can be used (it runs in the database):"}]},{"type":"codeListing","syntax":"swift","code":["let products = try database.products.filter { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Things can be put into transactions for isolation and performance:"}]},{"type":"codeListing","syntax":"swift","code":["try database.transaction { tx in","  tx.insert([ one, two, three, four, five ])","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if Swift concurrency is available, async\/await versions of everything are"},{"type":"text","text":" "},{"type":"text","text":"available:"}]},{"type":"codeListing","syntax":"swift","code":["async let supplier = database.suppliers.find(for: product)","async let category = database.categories.find(for: product)","( self.supplier, self.category ) = try await ( supplier, category )"]},{"anchor":"What-is-Generated","level":2,"type":"heading","text":"What is Generated"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code generators generate one Swift structure representing the Database"},{"type":"text","text":" "},{"type":"text","text":"itself (e.g."},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"Northwind"}],"isActive":true,"type":"reference","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","overridingTitle":"Northwind"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and one Swift structure for each SQL table or view"},{"type":"text","text":" "},{"type":"text","text":"(e.g."},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"Product"}],"isActive":true,"type":"reference","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product","overridingTitle":"Product"},{"type":"text","text":")."}]},{"anchor":"Database-Structure","level":3,"type":"heading","text":"Database Structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the database file name. E.g. if it"},{"type":"text","text":" "},{"type":"text","text":"is called “northwind.db”, the default name mapping produces a structure with"},{"type":"text","text":" "},{"type":"text","text":"the name"},{"type":"text","text":" "},{"type":"text","text":"“"},{"overridingTitleInlineContent":[{"type":"text","text":"Northwind"}],"isActive":true,"type":"reference","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","overridingTitle":"Northwind"},{"type":"text","text":"”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the database structure conforms to e.g.:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase"},{"type":"text","text":": This handles opening the database etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseAsyncChangeOperations"},{"type":"text","text":": This mixin provides support for all the"},{"type":"text","text":" "},{"type":"text","text":"CRUD operations and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder"},{"type":"text","text":": Using this the database can bootstrap a new"},{"type":"text","text":" "},{"type":"text","text":"database from the contained SQL."}]}]}]},{"anchor":"Table-and-View-Structures","level":3,"type":"heading","text":"Table and View Structures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the structure is derived from the table name according to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default “snake_case” (e.g. "},{"type":"codeVoice","code":"product_assignment"},{"type":"text","text":") is converted to Swiftier"},{"type":"text","text":" "},{"type":"text","text":"camel case ("},{"type":"codeVoice","code":"ProductAssignment"},{"type":"text","text":"), for both the structure name as well as the"},{"type":"text","text":" "},{"type":"text","text":"property names."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":", the structures conforms to e.g.:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLKeyedTableRecord"},{"type":"text","text":": If the record represents a table that has a single"},{"type":"text","text":" "},{"type":"text","text":"primary key."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"text","text":"If the record has a primary key."},{"type":"text","text":" "},{"type":"text","text":"This is particularily useful in combination with SwiftUI, as such records can"},{"type":"text","text":" "},{"type":"text","text":"directly be used in SwiftUI Lists and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Codable"},{"type":"text","text":": An extra conformance in the default configuration, not needed by"},{"type":"text","text":" "},{"type":"text","text":"Lighter itself."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default Enlighter changes the name of the primary key to "},{"type":"codeVoice","code":"id"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that can be changed using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"."}]},{"anchor":"Performing-Queries","level":2,"type":"heading","text":"Performing Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter has a rich set of query functions for many needs."}]},{"anchor":"Locating-Individual-Records","level":3,"type":"heading","text":"Locating Individual Records"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/find(_:)-7k750"},{"type":"text","text":" functions are used to locate"},{"type":"text","text":" "},{"type":"text","text":"individual records. One variant works for records with primary keys:"}]},{"type":"codeListing","syntax":"swift","code":["let person = try database.people.find(10)","let earth  = try db.solarBodies.find(\"Earth\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other one allows the specification of a column:"}]},{"type":"codeListing","syntax":"swift","code":["let earth = try db.solarBodies.find(by: \\.name, \"Earth\")"]},{"anchor":"Filtering-Records","level":3,"type":"heading","text":"Filtering Records"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter provides two ways to filter tables that look similar but work"},{"type":"text","text":" "},{"type":"text","text":"differently."}]},{"anchor":"Filtering-using-Swift","level":4,"type":"heading","text":"Filtering using Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter can directly filter"},{"type":"text","text":" "},{"type":"text","text":"in the database using a Swift closure ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/filter(limit:filter:)"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let products = try database.products.filter { product in","  product.name.lowercased().contains(\"e\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure receives a fully filled "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" model which it can"},{"type":"text","text":" "},{"type":"text","text":"filter w\/ arbitrary Swift code."},{"type":"text","text":" "},{"type":"text","text":"This can be important if the filtering requirements are more demanding,"},{"type":"text","text":" "},{"type":"text","text":"e.g. a SQLite "},{"type":"codeVoice","code":"LOWER"},{"type":"text","text":" function doesn’t do the same Unicode normalization the"},{"type":"text","text":" "},{"type":"text","text":"Swift "},{"type":"codeVoice","code":"lowercased()"},{"type":"text","text":" function and companions do."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Careful with reusing the same database within a filter. It is possible,"},{"type":"text","text":" "},{"type":"text","text":"but each call will get an own database connection. It is best to keep"},{"type":"text","text":" "},{"type":"text","text":"them simple."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the "},{"type":"strong","inlineContent":[{"type":"text","text":"most convenient way"}]},{"type":"text","text":" to filter which offers the broadest"},{"type":"text","text":" "},{"type":"text","text":"flexibility."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"disadvantage"}]},{"type":"text","text":" is that it can be a little "},{"type":"strong","inlineContent":[{"type":"text","text":"slower"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"SQLite can’t use database indices and a full record has to be filled for"},{"type":"text","text":" "},{"type":"text","text":"filtering."}]},{"anchor":"Filtering-using-Predicates","level":4,"type":"heading","text":"Filtering using Predicates"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate"},{"type":"text","text":"’s work a lot like CoreData "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":"s, but directly bind"},{"type":"text","text":" "},{"type":"text","text":"to the column types and due to that are completely typesafe."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Straight forward operators (like "},{"type":"codeVoice","code":"!"},{"type":"text","text":", "},{"type":"codeVoice","code":"&&"},{"type":"text","text":", "},{"type":"codeVoice","code":"||"},{"type":"text","text":", "},{"type":"codeVoice","code":"<"},{"type":"text","text":") are provided,"},{"type":"text","text":" "},{"type":"text","text":"as well as matchers ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasPrefix(_:caseInsensitive:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasSuffix(_:caseInsensitive:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/contains(_:caseInsensitive:)"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and range queries ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-4ds12"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-6rq6g"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"swift","code":["let products = try database.products.fetch { product in","  product.name.contains(\"e\") && product.age < 10","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It looks very much like the Swift-closure based filter, but it isn’t."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"product"},{"type":"text","text":" is a standin for the record, which knows about the column types,"},{"type":"text","text":" "},{"type":"text","text":"but is just used for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate"},{"type":"text","text":" generation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the type-safety one can’t accidentially compare a number with a string,"},{"type":"text","text":" "},{"type":"text","text":"e.g. the compiler would forbid this:"}]},{"type":"codeListing","syntax":"swift","code":["let products = try database.products.fetch {","  $0.age == \"FourSomething\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a "},{"type":"strong","inlineContent":[{"type":"text","text":"fast and flexible"}]},{"type":"text","text":" way to filter records as real SQL is produced"},{"type":"text","text":" "},{"type":"text","text":"that can be used by SQLite as it sees fit (e.g. use indices)."}]},{"anchor":"Sorting","level":4,"type":"heading","text":"Sorting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fetch"},{"type":"text","text":" functions come with an "},{"type":"codeVoice","code":"orderBy"},{"type":"text","text":" variant:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/fetch(limit:orderBy:_:)-4ly8m"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples:"}]},{"type":"codeListing","syntax":"swift","code":["let bodies = try db.solarBodies.fetch(orderBy: \\.englishName)","let bodies = try db.solarBodies.fetch(orderBy: \\.bodyType, .descending)"]},{"anchor":"Fetching-Relationships","level":3,"type":"heading","text":"Fetching Relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When Enlighter detected a relationship, it generates convenience accessors"},{"type":"text","text":" "},{"type":"text","text":"(can be disabled in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let category = try db.categories.find(5)","let productsForCategory = try db.products.fetch(for: category)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other way around:"}]},{"type":"codeListing","syntax":"swift","code":["let product = try db.products.find(42)","let categoryOfProduct = try.db.categories.find(for: product)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Those are just convenience wrappers for the builtin fetcher functions that"},{"type":"text","text":" "},{"type":"text","text":"work on the foreign keys:"}]},{"type":"codeListing","syntax":"swift","code":["let products = try await db.products.fetch(for: \\.categoryID, in: category)","let category = try await db.products.findTarget(for: \\.categoryID, in: product)"]},{"anchor":"Selecting-Individual-Columns","level":3,"type":"heading","text":"Selecting Individual Columns"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the advantages of SQL is that individual columns can be selected"},{"type":"text","text":" "},{"type":"text","text":"and updated for maximum efficiency. Only things that are"},{"type":"text","text":" "},{"type":"text","text":"required need to be fetched (vs. full records):"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Fetch just the `id` and `name` columns:","let people = try await db.select(from: \\.people, \\.id, \\.name) {","  $0.id > 2 && $0.title == nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or updated:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Bulk update a specific column:","try db.update(\\.people, set: \\.title, to: nil, where: { record in","  record.name.hasPrefix(\"Duck\")","})"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The references are fully typesafe down to the schema, only columns"},{"type":"text","text":" "},{"type":"text","text":"contained in the "},{"type":"codeVoice","code":"person"},{"type":"text","text":" table can be specified (and are directly available"},{"type":"text","text":" "},{"type":"text","text":"in Xcode autocompletion)."}]},{"anchor":"Performing-raw-SQL-Queries","level":3,"type":"heading","text":"Performing raw SQL Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final escape hatch one can perform raw SQL queries:"}]},{"type":"codeListing","syntax":"swift","code":["let results = try db.solarBodies.fetch(sql: \"SELECT * FROM solar_bodies\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does proper escaping using interpolations, e.g. this is possible:"}]},{"type":"codeListing","syntax":"swift","code":["let results = try db.persons.fetch(sql:","  \"SELECT * FROM person WHERE \\($0.personId) LIKE UPPER(\\(name))\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A raw fetch against a specific type (e.g. "},{"type":"codeVoice","code":"solarBodies"},{"type":"text","text":") will always return"},{"type":"text","text":" "},{"type":"text","text":"full records (e.g. "},{"type":"codeVoice","code":"SolarBody"},{"type":"text","text":"). This still works for fetching fragments though:"}]},{"type":"codeListing","syntax":"swift","code":["let results = try db.solarBodies.fetch(sql: ","  \"SELECT id, name FROM solar_bodies\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All other properties of the structure will be set to their default values (as"},{"type":"text","text":" "},{"type":"text","text":"specified in the SQL schema, or a sensible default if that isn’t available)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetching fragments like that is still reasonably fast, it has a bigger"},{"type":"text","text":" "},{"type":"text","text":"associated memory cost vs the targetted "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseFetchOperations\/select(from:_:_:)"},{"type":"text","text":"."}]},{"anchor":"Using-SQL-Views-to-Define-Complex-Queries","level":3,"type":"heading","text":"Using SQL Views to Define Complex Queries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is tempting to define queries dynamically in Swift. It is often more"},{"type":"text","text":" "},{"type":"text","text":"performant to do such in SQL and use the full power of SQL built into"},{"type":"text","text":" "},{"type":"text","text":"SQLite, e.g. "},{"type":"codeVoice","code":"GROUP BY"},{"type":"text","text":", "},{"type":"codeVoice","code":"DISTINCT"},{"type":"text","text":", "},{"type":"codeVoice","code":"SUM"},{"type":"text","text":" and extensive joins."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lighter can’t translate plain queries yet (stay tuned), but there is an easy"},{"type":"text","text":" "},{"type":"text","text":"workaround: SQL Views. Views in the basic form are just stored queries:"}]},{"type":"codeListing","syntax":"sql","code":["CREATE VIEW [Customer and Suppliers by City] AS","  SELECT City, CompanyName, ContactName, 'Customers' AS Relationship ","    FROM Customers","  UNION ","  SELECT City, CompanyName, ContactName, 'Suppliers' ","    FROM Suppliers ","ORDER BY City, CompanyName"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Northwind comes with a set of example views, e.g."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},{"type":"text","text":"."}]}]}],"variants":[{"paths":["\/documentation\/lighter\/lighterapi"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Lighter\/documentation\/Lighter\/LighterAPI","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Using the Lighter API."}],"kind":"article","metadata":{"modules":[{"name":"Lighter.swift for SQLite3"}],"role":"collectionGroup","title":"Lighter API Overview"},"hierarchy":{"paths":[["doc:\/\/Lighter\/documentation\/Lighter"]]},"topicSections":[{"title":"Important Types","identifiers":["doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase","doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord","doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate"]}],"references":{"doc://Lighter/documentation/Lighter/SQLDatabase":{"role":"symbol","title":"SQLDatabase","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLDatabase"}],"abstract":[{"type":"text","text":"A type representing a SQLite3 database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLDatabase"}],"url":"\/documentation\/lighter\/sqldatabase"},"doc://Lighter/documentation/Lighter/Northwind":{"role":"article","title":"Northwind","abstract":[{"type":"text","text":"Using the Northwind example database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Northwind","kind":"article","type":"topic","url":"\/documentation\/lighter\/northwind"},"doc://Lighter/documentation/Lighter/SQLColumn/contains(_:caseInsensitive:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"contains(_:caseInsensitive:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"caseInsensitive"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SQLColumnValuePredicate","preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Checks whether the value in the column contains a certain string."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/contains(_:caseInsensitive:)","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlcolumn\/contains(_:caseinsensitive:)"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/find(_:)-7k750":{"conformance":{"constraints":[{"type":"codeVoice","code":"Ops"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLDatabaseOperations"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":", and "},{"type":"codeVoice","code":"T.Schema"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLKeyedTableSchema"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"find(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"find"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Schema"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"PrimaryKeyColumn"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Fetch a single record with the specified primary key."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/find(_:)-7k750","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlrecordfetchoperations\/find(_:)-7k750"},"doc://Lighter/documentation/Lighter/SQLDatabaseAsyncChangeOperations":{"role":"symbol","title":"SQLDatabaseAsyncChangeOperations","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLDatabaseAsyncChangeOperations"}],"abstract":[{"type":"text","text":"Asynchronous operations that change the database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseAsyncChangeOperations","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLDatabaseAsyncChangeOperations"}],"url":"\/documentation\/lighter\/sqldatabaseasyncchangeoperations"},"doc://Lighter/documentation/Lighter/SQLRecord":{"role":"symbol","title":"SQLRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLRecord"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":" is an abstract protocol representing a set of columns fetched"},{"type":"text","text":" "},{"type":"text","text":"from a database."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLRecord"}],"url":"\/documentation\/lighter\/sqlrecord"},"doc://Lighter/documentation/Lighter/SQLCreationStatementsHolder":{"role":"symbol","title":"SQLCreationStatementsHolder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLCreationStatementsHolder"}],"abstract":[{"type":"text","text":"A type that holds SQL "},{"type":"codeVoice","code":"CREATE"},{"type":"text","text":" statements in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder\/creationSQL"},{"type":"text","text":" property."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLCreationStatementsHolder"}],"url":"\/documentation\/lighter\/sqlcreationstatementsholder"},"doc://Lighter/documentation/Lighter/SQLColumn/in(_:)-4ds12":{"role":"symbol","title":"in(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`in`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SQLColumnValueSetPredicate","preciseIdentifier":"s:7Lighter26SQLColumnValueSetPredicateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-4ds12","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlcolumn\/in(_:)-4ds12"},"doc://Lighter/documentation/Lighter/SQLTableRecord":{"role":"symbol","title":"SQLTableRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLTableRecord"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SQLTableRecord"},{"type":"text","text":" is a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord"},{"type":"text","text":" that is tied to a table specifically."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLTableRecord"}],"url":"\/documentation\/lighter\/sqltablerecord"},"doc://Lighter/documentation/Lighter/SQLColumn/hasSuffix(_:caseInsensitive:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"hasSuffix(_:caseInsensitive:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hasSuffix"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"caseInsensitive"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SQLColumnValuePredicate","preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Checks whether the value in the column has a certain suffix."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasSuffix(_:caseInsensitive:)","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlcolumn\/hassuffix(_:caseinsensitive:)"},"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete":{"title":"CRUD","titleInlineContent":[{"type":"text","text":"CRUD"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete","url":"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete"},"doc://Lighter/documentation/Lighter/SQLColumn/in(_:)-6rq6g":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"in(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`in`"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ClosedRange","preciseIdentifier":"s:SN"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"SQLColumnValueRangePredicate","preciseIdentifier":"s:7Lighter28SQLColumnValueRangePredicateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/in(_:)-6rq6g","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlcolumn\/in(_:)-6rq6g"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/northwind":{"title":"Northwind","titleInlineContent":[{"type":"text","text":"Northwind"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/northwind"},"doc://Lighter/documentation/Lighter/SQLColumn/hasPrefix(_:caseInsensitive:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"hasPrefix(_:caseInsensitive:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hasPrefix"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"caseInsensitive"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SQLColumnValuePredicate","preciseIdentifier":"s:7Lighter23SQLColumnValuePredicateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Checks whether the value in the column has a certain prefix."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLColumn\/hasPrefix(_:caseInsensitive:)","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlcolumn\/hasprefix(_:caseinsensitive:)"},"doc://Lighter/documentation/Lighter/GettingStarted":{"role":"article","title":"Getting Started","abstract":[{"type":"text","text":"Setting up Lighter for network caches or as resource databases."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/lighter\/gettingstarted"},"doc://Lighter/documentation/Lighter/SQLKeyedTableRecord":{"role":"symbol","title":"SQLKeyedTableRecord","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLKeyedTableRecord"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SQLKeyedTableRecord"},{"type":"text","text":" is a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLTableRecord"},{"type":"text","text":"(a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecord"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"that is tied to a table with a single primary key."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLKeyedTableRecord","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLKeyedTableRecord"}],"url":"\/documentation\/lighter\/sqlkeyedtablerecord"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/customerandsuppliersbycity":{"title":"CustomerAndSuppliersByCity","titleInlineContent":[{"type":"text","text":"CustomerAndSuppliersByCity"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/customerandsuppliersbycity"},"https://lighter-swift.github.io/NorthwindSQLite.swift/documentation/northwind/product":{"title":"Product","titleInlineContent":[{"type":"text","text":"Product"}],"type":"link","identifier":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product","url":"https:\/\/lighter-swift.github.io\/NorthwindSQLite.swift\/documentation\/northwind\/product"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/fetch(limit:orderBy:_:)-4ly8m":{"conformance":{"constraints":[{"type":"codeVoice","code":"Ops"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLDatabaseAsyncOperations"},{"type":"text","text":" and "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"fetch(limit:orderBy:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fetch"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SC"},{"kind":"text","text":">("},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"orderBy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Schema"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SC"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"SQLSortOrder","preciseIdentifier":"s:7Lighter12SQLSortOrderO"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Fetch records of a view\/table unfiltered, but in a sorted manner."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/fetch(limit:orderBy:_:)-4ly8m","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlrecordfetchoperations\/fetch(limit:orderby:_:)-4ly8m"},"https://developer.apple.com/documentation/swift/identifiable":{"title":"Identifiable","titleInlineContent":[{"type":"text","text":"Identifiable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable","url":"https:\/\/developer.apple.com\/documentation\/swift\/identifiable"},"doc://Lighter/documentation/Lighter/SQLiteAPI":{"role":"article","title":"Dependency-Free API","abstract":[{"type":"text","text":"Using the dependency-free SQLite API."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLiteAPI","kind":"article","type":"topic","url":"\/documentation\/lighter\/sqliteapi"},"doc://Lighter/documentation/Lighter/SQLDatabaseFetchOperations/select(from:_:_:)":{"role":"symbol","title":"select(from:_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"select"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"RecordTypes"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type>, "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Schema"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Select columns from a SQL table or view in a typesafe way."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLDatabaseFetchOperations\/select(from:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqldatabasefetchoperations\/select(from:_:_:)"},"doc://Lighter/documentation/Lighter/Configuration":{"role":"article","title":"Configuration","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Lighter.json"},{"type":"text","text":" configuration file."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/Configuration","kind":"article","type":"topic","url":"\/documentation\/lighter\/configuration"},"doc://Lighter/documentation/Lighter/SQLPredicate":{"role":"symbol","title":"SQLPredicate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPredicate"}],"abstract":[{"type":"text","text":"Represents a dynamic (but statically typed) predicate that can be rendered"},{"type":"text","text":" "},{"type":"text","text":"into a SQL WHERE string."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLPredicate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SQLPredicate"}],"url":"\/documentation\/lighter\/sqlpredicate"},"doc://Lighter/documentation/Lighter/SQLCreationStatementsHolder/creationSQL":{"role":"symbol","title":"creationSQL","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"creationSQL"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"SQL "},{"type":"codeVoice","code":"CREATE"},{"type":"text","text":" statements (e.g. "},{"type":"codeVoice","code":"CREATE TABLE person (...)"},{"type":"text","text":")."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLCreationStatementsHolder\/creationSQL","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/lighter\/sqlcreationstatementsholder\/creationsql"},"doc://Lighter/documentation/Lighter":{"role":"collection","title":"Lighter.swift for SQLite3","abstract":[{"type":"text","text":"Type-safe down to the schema. Very, "},{"type":"strong","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":", fast. Dependency free."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter","kind":"symbol","type":"topic","url":"\/documentation\/lighter"},"doc://Lighter/documentation/Lighter/SQLRecordFetchOperations/filter(limit:filter:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Ops"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLDatabaseOperations"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLRecord"},{"type":"text","text":", and "},{"type":"codeVoice","code":"T.Schema"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SQLSwiftMatchableSchema"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"filter(limit:filter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"filter"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Fetch filtered records of a view\/table w\/o any sorting."}],"identifier":"doc:\/\/Lighter\/documentation\/Lighter\/SQLRecordFetchOperations\/filter(limit:filter:)","kind":"symbol","type":"topic","url":"\/documentation\/lighter\/sqlrecordfetchoperations\/filter(limit:filter:)"}}}